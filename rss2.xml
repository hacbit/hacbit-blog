<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>hacbit&#39;s blog</title>
    <link>http://hacbit.tech/</link>
    
    <atom:link href="http://hacbit.tech/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>The world open itself before those with noble heart.</description>
    <pubDate>Tue, 13 May 2025 15:21:23 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>基于ValueDropdown拓展以支持自定义icon</title>
      <link>http://hacbit.tech/%E5%9F%BA%E4%BA%8EValueDropdown%E6%8B%93%E5%B1%95%E4%BB%A5%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89icon/</link>
      <guid>http://hacbit.tech/%E5%9F%BA%E4%BA%8EValueDropdown%E6%8B%93%E5%B1%95%E4%BB%A5%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89icon/</guid>
      <pubDate>Tue, 13 May 2025 13:56:12 GMT</pubDate>
      
      <description>&lt;p&gt;之前遇到过一个需求是要在下拉框的目录做一个标记来指示状态，应该很自然就可以想到能不能修改一下 icon，比如把文件夹的那个icon改成其他颜色的，这样会比修改显示名字毫无疑问更加显眼。&lt;/p&gt;
&lt;p&gt;不过其实想要进行更大限度的修改是完全可以的，只需要魔改一下 ValueDropdown 就行。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>之前遇到过一个需求是要在下拉框的目录做一个标记来指示状态，应该很自然就可以想到能不能修改一下 icon，比如把文件夹的那个icon改成其他颜色的，这样会比修改显示名字毫无疑问更加显眼。</p><p>不过其实想要进行更大限度的修改是完全可以的，只需要魔改一下 ValueDropdown 就行。</p><span id="more"></span><p>先说一下简单的解决先前提到的需求的办法吧——改显示名字。</p><p>一般是使用 <code>ValueDropdownList&lt;T&gt;</code> 或者 <code>IEnumerable&lt;ValueDropdownItem&lt;T&gt;&gt;</code>  (二者是等价的) 作为函数的返回值，比如：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ShowInInspector, LabelText(<span class="string">&quot;测试下拉框&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">ValueDropdown(nameof(GetAllowIndexs))</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> Index;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ValueDropdownList&lt;<span class="built_in">int</span>&gt; <span class="title">GetAllowIndexs</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> ValueDropdownList&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        list.Add(<span class="string">$&quot;The <span class="subst">&#123;i + <span class="number">1</span>&#125;</span> item&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下，可以给每个 value 都指定自定义的名字，不过更复杂的操作似乎就不行了（或者我没有找到？）</p><p><img src="/%E5%9F%BA%E4%BA%8EValueDropdown%E6%8B%93%E5%B1%95%E4%BB%A5%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89icon/image-20250513221635581.png" alt="测试下拉框"></p><h2 id="拓展-ValueDropdown"><a href="#拓展-ValueDropdown" class="headerlink" title="拓展 ValueDropdown"></a>拓展 ValueDropdown</h2><p>既然原本的 ValueDropdown 无法满足需求，那就自己搓一个吧，写一个类继承原来的 ValueDropdown 特性。</p><p>然后我们再原来的基础上，再添加一个回调字段</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR &amp;&amp; ODIN_INSPECTOR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Sirenix.OdinInspector</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.All, AllowMultiple = false, Inherited = true)</span>]</span><br><span class="line">[<span class="meta">Conditional(<span class="string">&quot;UNITY_EDITOR&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomValueDropdownAttribute</span> : <span class="title">ValueDropdownAttribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ItemAction;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomValueDropdownAttribute</span>(<span class="params"><span class="built_in">string</span> valueGetter, <span class="built_in">string</span> itemAction</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">valueGetter</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ItemAction = itemAction;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>然后自定义 attribute drawer</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Sirenix.OdinInspector.Editor.Drawers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">CustomValueDropdownAttributeDrawer</span> : <span class="title">OdinAttributeDrawer</span>&lt;<span class="title">CustomValueDropdownAttribute</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单看一下 <code>ValueDropdownAttributeDrawer</code> 的实现，就会发现是基于 OdinMenuTree 做的，每一项其实都是一个 OdinMenuItem，所以不妨让我们的自定义的回调的参数是 OdinMenuItem，这样就可以实现更大限度的自定义每一项。</p><p>添加一个 ActionResolver 字段原来解析传入的方法名</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ActionResolver? itemAction;</span><br></pre></td></tr></table></figure><p>然后在初始化函数中添加解析逻辑，（也别忘了设置错误信息）</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">base</span>.Attribute.ItemAction <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    itemAction = ActionResolver.Get(</span><br><span class="line">        <span class="keyword">base</span>.Property,</span><br><span class="line">        <span class="keyword">base</span>.Attribute.ItemAction,</span><br><span class="line"><span class="keyword">new</span>[] &#123; <span class="keyword">new</span> ActionResolvers.NamedValue(<span class="string">&quot;item&quot;</span>, <span class="keyword">typeof</span>(OdinMenuItem)) &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error = rawGetter.ErrorMessage ?? itemAction?.ErrorMessage;</span><br></pre></td></tr></table></figure><p>翻一下逻辑，会发现设置 icon 是通过 <code>AddThumbnailIcons(preferAssetPreviewAsIcon: true);</code> 调用。所以我们修改一下这部分的逻辑，当 itemAction 为空时，就继续走老逻辑，如果不为空，那就尝试调用解析的逻辑</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    genericSelector.SelectionTree.EnumerateTree(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        itemAction?.Context.NamedValues.Set(<span class="string">&quot;item&quot;</span>, x);</span><br><span class="line">        itemAction?.DoAction();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x.Icon == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x.AddThumbnailIcon(preferAssetPreviewAsIcon: <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h2><p>在原来的测试代码那里添加一个函数</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HandleItem</span>(<span class="params">OdinMenuItem item</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    item.Icon = EditorIcons.Flag.Active;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且修改字段的特性</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CustomValueDropdown(nameof(GetAllowIndexs), nameof(HandleItem))</span>]</span><br></pre></td></tr></table></figure><p><img src="/%E5%9F%BA%E4%BA%8EValueDropdown%E6%8B%93%E5%B1%95%E4%BB%A5%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89icon/image-20250513231709716.png" alt="image-20250513231709716"></p>]]></content:encoded>
      
      
      <category domain="http://hacbit.tech/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/">游戏开发</category>
      
      
      <category domain="http://hacbit.tech/tags/Unity/">Unity</category>
      
      <category domain="http://hacbit.tech/tags/CSharp/">CSharp</category>
      
      <category domain="http://hacbit.tech/tags/Odin/">Odin</category>
      
      
      <comments>http://hacbit.tech/%E5%9F%BA%E4%BA%8EValueDropdown%E6%8B%93%E5%B1%95%E4%BB%A5%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89icon/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>春招笔试总结</title>
      <link>http://hacbit.tech/%E6%98%A5%E6%8B%9B%E7%AC%94%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <guid>http://hacbit.tech/%E6%98%A5%E6%8B%9B%E7%AC%94%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Sat, 08 Mar 2025 05:38:06 GMT</pubDate>
      
        
        
      <description>&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;



&lt;h2 id=&quot;灵犀笔试&quot;&gt;&lt;a href=&quot;#灵犀笔试&quot; class=&quot;headerlink&quot; title=&quot;灵犀笔试&quot;&gt;&lt;/a&gt;灵犀笔试&lt;/h2&gt;&lt;h3 id=&quot;加油站&quot;&gt;&lt;a href=&quot;#加油站&quot; class=&quot;hea</description>
        
      
      
      
      <content:encoded><![CDATA[<span id="more"></span><h2 id="灵犀笔试"><a href="#灵犀笔试" class="headerlink" title="灵犀笔试"></a>灵犀笔试</h2><h3 id="加油站"><a href="#加油站" class="headerlink" title="加油站"></a>加油站</h3><p>leetcode 原题，不过我没有做到过：<a href="https://leetcode.cn/problems/gas-station/description/">https://leetcode.cn/problems/gas-station/description/</a></p><p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code> 个加油站有汽油 <code>gas[i]</code> 升。</p><p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第 <code>i+1</code> 个加油站需要消耗汽油 <code>cost[i]</code> 升。你从其中的一个加油站出发，开始时油箱为空。</p><p>给定两个整数数组 <code>gas</code> 和 <code>cost</code> ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 <code>-1</code> 。如果存在解，则 <strong>保证</strong> 它是 <strong>唯一</strong> 的。</p><p><strong>示例 1:</strong></p><blockquote><p>输入: gas &#x3D; [1,2,3,4,5], cost &#x3D; [3,4,5,1,2]<br>输出: 3<br>解释:<br>从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 &#x3D; 0 + 4 &#x3D; 4 升汽油<br>开往 4 号加油站，此时油箱有 4 - 1 + 5 &#x3D; 8 升汽油<br>开往 0 号加油站，此时油箱有 8 - 2 + 1 &#x3D; 7 升汽油<br>开往 1 号加油站，此时油箱有 7 - 3 + 2 &#x3D; 6 升汽油<br>开往 2 号加油站，此时油箱有 6 - 4 + 3 &#x3D; 5 升汽油<br>开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。<br>因此，3 可为起始索引。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p>输入: gas &#x3D; [2,3,4], cost &#x3D; [3,4,3]<br>输出: -1<br>解释:<br>你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。<br>我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 &#x3D; 0 + 4 &#x3D; 4 升汽油<br>开往 0 号加油站，此时油箱有 4 - 3 + 2 &#x3D; 3 升汽油<br>开往 1 号加油站，此时油箱有 3 - 3 + 3 &#x3D; 3 升汽油<br>你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。<br>因此，无论怎样，你都不可能绕环路行驶一周。</p></blockquote><h4 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h4><p>思路很简单，直接贪心，先两个数组做差，算出每个点到下一个点的油量变化，然后遍历数组，从第一个正值开始，依次累加，当累加变成负值就继续找下一个正值。</p><p>遍历完如果最后累加结果是负值，说明找不到，直接返回 -1，如果为正值，就考虑把开始计算的节点前的所有盈亏加起来（因为是要跑一个环形）和 0 比较即可</p><p>所以其实是找到一个位置，使得左边的和与右边（包括当前点）的和相加 &gt; 0，同时保证右边的子数组的前缀和不能有小于零的</p><blockquote><p>  做了两题发现可以用 C#，后面都是直接写 C# 了</p><p>  <strong>输入按照实际笔试中的来写</strong></p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">var</span> n = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">        <span class="keyword">var</span> gas = Console.ReadLine().Split().Select(<span class="built_in">int</span>.Parse);</span><br><span class="line">        <span class="keyword">var</span> cost = Console.ReadLine().Split().Select(<span class="built_in">int</span>.Parse);</span><br><span class="line">        <span class="keyword">var</span> sub = gas.Zip(cost, (g, c) =&gt; g - c).ToList();</span><br><span class="line">        <span class="keyword">var</span> start = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">var</span> leftSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">var</span> s = sub[i];</span><br><span class="line">            <span class="keyword">if</span> (s &gt;= <span class="number">0</span> &amp;&amp; start == <span class="number">-1</span>) &#123;</span><br><span class="line">                start = i;</span><br><span class="line">                leftSum += sum;</span><br><span class="line">                sum = s;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += s;</span><br><span class="line">                <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) start = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; start) leftSum += s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (leftSum + sum &lt; <span class="number">0</span>) start = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><p>第四题样例没有全部通过，思路还是贪心。</p><p>题目大意：</p><blockquote><p>  给出 a b c 并且构造一个 nums 数组，要求满足：</p><ul><li><p><code>nums.length = a</code></p></li><li><p><code>0 &lt;= a &lt;= c &lt;= 1e9</code></p></li><li><p><code>nums[i]</code> 是正整数（<code>0 &lt;= i &lt; a</code> ）</p></li><li><p><code>abs(nums[i] - nums[i+1]) &lt;= 1 (0 &lt;= i &lt; a - 1)</code></p></li><li><p><code>0 &lt;= b &lt; a</code></p></li><li><p>使得 <code>nums[b]</code> 最大</p></li><li><p><code>sum(nums) &lt;= c</code></p></li></ul><p>  最后返回 <code>nums[b]</code></p></blockquote><p>要找到符合全部要求的 nums，首先考虑极端情况，也就是从 b 位置开始，往两侧依次递减到 1，类似这种形状的数组 <code>[1, 1, 2, 3, 2]</code>， 在这种情况下，所有数值的和一定是最小的。</p><p>所以可以计算 x &#x3D; b 处的  y_b 的值的范围，从大到小遍历，依次构造相应的函数 f(x) 并且判断其积分 F(x) &lt;&#x3D; c，返回第一个符合题意的 y_b 即可。</p><p>实际做的时候因为计算面积导致数量级会达到 1e18，超过了 int 的上限。（下次一定记得换 long）</p><p>然后如果 c 远远大于 a，就会导致遍历很久，所以我们根据差值来逼近目标值。</p><p>一个可能的解法（本地测了一些样例， 不确定行不行）：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> abc = Console.ReadLine()!.Split().Select(<span class="built_in">long</span>.Parse).ToArray();</span><br><span class="line">    <span class="keyword">var</span> (a, b, c) = (abc[<span class="number">0</span>], abc[<span class="number">1</span>], abc[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">var</span> maxNumsB = c - a + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = maxNumsB; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> totalS = Calc(a, b, i);</span><br><span class="line">        <span class="keyword">if</span> (totalS &lt;= c)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// approaching the target based on the difference</span></span><br><span class="line">        <span class="keyword">var</span> delta = totalS - c;</span><br><span class="line">        i -= delta / (a + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">long</span> <span class="title">Calc</span>(<span class="params"><span class="built_in">long</span> a, <span class="built_in">long</span> b, <span class="built_in">long</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 0 &lt;= b &lt; a</span></span><br><span class="line">    <span class="comment">// calculate left triangle and right triangle (or trapezoid)</span></span><br><span class="line">    <span class="comment">// left is f(x) = x + r (y = b + r =&gt; r = y - b), so get f(x) = x + y - b</span></span><br><span class="line">    <span class="keyword">var</span> leftX = y - <span class="number">1</span> &gt; b ? <span class="number">0</span> : b - y + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> leftY = leftX + y - b;</span><br><span class="line">    <span class="comment">// right is f(x) = -x + r (y = -b + r =&gt; r = y + b), so get f(x) = -x + y + b</span></span><br><span class="line">    <span class="keyword">var</span> rightX = y + b &lt; a ? y - <span class="number">1</span> + b : a - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> rightY = -rightX + y + b;</span><br><span class="line">    <span class="comment">// S = (Y + y) * abs(b - X) / 2</span></span><br><span class="line">    <span class="comment">// and add rest of the area (always 1)</span></span><br><span class="line">    <span class="keyword">var</span> leftS = (leftY + y) * (b - leftX + <span class="number">1</span>) / <span class="number">2</span> + leftX;</span><br><span class="line">    <span class="keyword">var</span> rightS = (rightY + y) * (rightX - b + <span class="number">1</span>) / <span class="number">2</span> + (a - rightX - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> totalS = leftS + rightS - y;</span><br><span class="line">    <span class="comment">// Console.WriteLine($&quot;&#123;y&#125;: &#123;leftX&#125;, &#123;leftY&#125;, &#123;rightX&#125;, &#123;rightY&#125;, &#123;leftS&#125;, &#123;rightS&#125;, &#123;totalS&#125;&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> totalS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://hacbit.tech/categories/%E6%9D%82%E8%AE%B0/">杂记</category>
      
      
      <category domain="http://hacbit.tech/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>http://hacbit.tech/%E6%98%A5%E6%8B%9B%E7%AC%94%E8%AF%95%E6%80%BB%E7%BB%93/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>浅谈CSharp与Rust的元编程机制</title>
      <link>http://hacbit.tech/%E6%B5%85%E8%B0%88CSharp%E4%B8%8ERust%E7%9A%84%E5%85%83%E7%BC%96%E7%A8%8B%E6%9C%BA%E5%88%B6/</link>
      <guid>http://hacbit.tech/%E6%B5%85%E8%B0%88CSharp%E4%B8%8ERust%E7%9A%84%E5%85%83%E7%BC%96%E7%A8%8B%E6%9C%BA%E5%88%B6/</guid>
      <pubDate>Wed, 05 Mar 2025 15:33:16 GMT</pubDate>
      
      <description>&lt;p&gt;大部分的语言或多或少提供了一些元编程机制，使得开发者能够对现有的语法语义进行拓展，能够极大的提高编程体验和开发效率。可能一提到元编程，大家很容易想到大名鼎鼎的 &lt;code&gt;Lisp&lt;/code&gt; 语言（你可能会说：“难道不是 Cpp？”，我又不会模板元编程，你让我讲啥 x）。得益于其本身接近语法树的语法，使得 Lisp 开发者可以很容易操作语法节点，甚至实现 “自己的 Lisp”，于是就才涌现了很多的 Lisp 方言。当然，本篇文章并不是为了讨论 Lisp，只是想要就 “元编程” 这一个角度，来谈谈 C# 和 Rust 语言各自的机制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  关于&lt;strong&gt;元编程&lt;/strong&gt;是什么，简单来说是用&lt;strong&gt;程序编写程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  更详细的描述建议参考 wiki ： &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%83%E7%BC%96%E7%A8%8B&quot;&gt;https://zh.wikipedia.org/wiki/%E5%85%83%E7%BC%96%E7%A8%8B&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>大部分的语言或多或少提供了一些元编程机制，使得开发者能够对现有的语法语义进行拓展，能够极大的提高编程体验和开发效率。可能一提到元编程，大家很容易想到大名鼎鼎的 <code>Lisp</code> 语言（你可能会说：“难道不是 Cpp？”，我又不会模板元编程，你让我讲啥 x）。得益于其本身接近语法树的语法，使得 Lisp 开发者可以很容易操作语法节点，甚至实现 “自己的 Lisp”，于是就才涌现了很多的 Lisp 方言。当然，本篇文章并不是为了讨论 Lisp，只是想要就 “元编程” 这一个角度，来谈谈 C# 和 Rust 语言各自的机制。</p><blockquote><p>  关于<strong>元编程</strong>是什么，简单来说是用<strong>程序编写程序</strong></p><p>  更详细的描述建议参考 wiki ： <a href="https://zh.wikipedia.org/wiki/%E5%85%83%E7%BC%96%E7%A8%8B">https://zh.wikipedia.org/wiki/%E5%85%83%E7%BC%96%E7%A8%8B</a></p></blockquote><span id="more"></span><h2 id="元编程概述"><a href="#元编程概述" class="headerlink" title="元编程概述"></a>元编程概述</h2><p>元编程一般有两种实现方式：一是通过使用内部暴露的 API 来直接处理语法节点，二是能够动态执行字符串表达式。</p><p>对于后者来说，典型的是 Python 的 <code>eval</code>  和 <code>exec</code> 函数，JS 中也有类似的功能。对于这类实现来说，固然十分方便，但是也会带来很严重的安全问题。如果对于外部用户来说，<code>eval</code> 这类的危险函数的输入是可控的，那么用户就可以传入一段精心构造的字符串来执行恶意命令导致可能的信息泄露、提权等安全问题。</p><p>所以我个人会更倾向于前者（虽然这往往意味着更加抽象的语法和更高的编写难度），比如 C# 和 Rust 便是如此。</p><p>在 C# 中，Roslyn 编译器提供了一系列 API （<code>Microsoft.CodeAnalysis.CSharp</code>）用于编写源生成器，源生成器会在编译时被调用，访问每个语法节点，然后根据你的实现去动态的生成代码给编译器（如果不开 emit，那么这些代码不会以实际的源文件形式出现在你的文件夹中）；而 Rust 则是提供了极其强大，堪比 Lisp 的宏系统。普通的函数宏会依据用户编写的规则去在编译期展开，过程宏则有点接近 C#，不过 Rust 并不提供直接遍历全局的语法节点，而只是限制在该宏的使用者本身。</p><h2 id="一些简单实践"><a href="#一些简单实践" class="headerlink" title="一些简单实践"></a>一些简单实践</h2><p>以下是关于 C# 和 Rust 元编程的简单实践，可以观察一下他们之间的差异。</p><blockquote><p>  以下代码并非是为了教学，只是从一些简单的示例来比较他们之间的差异性，以及讨论各自的优劣。</p><p>  关于代码的解释，会在后面一起分析</p></blockquote><h3 id="C-增量生成器（IncrementalGenerator）实践"><a href="#C-增量生成器（IncrementalGenerator）实践" class="headerlink" title="C# 增量生成器（IncrementalGenerator）实践"></a>C# 增量生成器（IncrementalGenerator）实践</h3><blockquote><p>  由于 C# 的<strong>源生成器</strong>每次都要遍历所有语法节点，十分影响性能，微软已经将其标记为<strong>弃用</strong>，取而代之的是新的增量生成器 API</p><p>  <strong>增量生成器</strong>中提供了多种管道进行分析，比如 <code>CompilationProvider</code> , <code>SyntaxProvider</code>, <code>AdditionalTextsProvider</code> 等等。相比于旧的 <code>ISourceGenerator</code> ，可以提供更细粒度的分析，接受的分析对象也不局限于源代码。</p></blockquote><p>首先需要新建一个 C# 库项目，我推荐目标框架是 netstandard2.0，使用的 <code>Microsoft.CodeAnalysis.CSharp</code> 版本为 <code>4.3.0</code> （这可以保证该源生成器能在大部分的项目中使用，甚至 Unity）</p><p>简单写一个小 demo：</p><p>对于该生成器，需要实现 <code>IIncrementalGenerator</code>  接口的 <code>Initialize</code> 方法。然后我们从语法节点的角度切入，比如我们需要给具有 <code>[Test]</code> Attribute 的 class 分部实现一个方法，那么就可以像下面这样。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> Microsoft.CodeAnalysis;</span><br><span class="line"><span class="keyword">using</span> Microsoft.CodeAnalysis.CSharp.Syntax;</span><br><span class="line"><span class="keyword">using</span> Microsoft.CodeAnalysis.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test.Analysis</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Generator(LanguageNames.CSharp)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">TestGenerator</span> : <span class="title">IIncrementalGenerator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">IncrementalGeneratorInitializationContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> provider = context.SyntaxProvider</span><br><span class="line">                .CreateSyntaxProvider(</span><br><span class="line">                    (s, _) =&gt; s <span class="keyword">is</span> ClassDeclarationSyntax classDecl &amp;&amp; </span><br><span class="line">                        classDecl.AttributeLists</span><br><span class="line">                            .SelectMany(al =&gt; al.Attributes)</span><br><span class="line">                            .Any(a =&gt; a.Name.ToString() == <span class="string">&quot;Test&quot;</span>),</span><br><span class="line">                    (ctx, _) =&gt; ctx.Node <span class="keyword">as</span> ClassDeclarationSyntax</span><br><span class="line">                ).Collect();</span><br><span class="line"></span><br><span class="line">            context.RegisterSourceOutput(provider, (spc, source) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> @class <span class="keyword">in</span> source)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> namespaceName = @class.FirstAncestorOrSelf&lt;NamespaceDeclarationSyntax&gt;().Name.ToString();</span><br><span class="line">                    <span class="comment">// Add Test method to the class</span></span><br><span class="line">                    <span class="keyword">var</span> code = <span class="string">$@&quot;// &lt;auto-generated/&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">using System;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">namespace <span class="subst">&#123;namespaceName&#125;</span></span></span><br><span class="line"><span class="string">&#123;&#123;</span></span><br><span class="line"><span class="string">    public partial class <span class="subst">&#123;@<span class="keyword">class</span>.Identifier&#125;</span></span></span><br><span class="line"><span class="string">    &#123;&#123;</span></span><br><span class="line"><span class="string">        public void Test() =&gt; Console.WriteLine(&quot;&quot;Test&quot;&quot;);</span></span><br><span class="line"><span class="string">    &#125;&#125;</span></span><br><span class="line"><span class="string">&#125;&#125;&quot;</span>;</span><br><span class="line">                    spc.AddSource(<span class="string">$&quot;<span class="subst">&#123;@<span class="keyword">class</span>.Identifier&#125;</span>_Test.g.cs&quot;</span>, SourceText.From(code, Encoding.UTF8));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外在一个终端项目中引用该项目，我们需要定义一个 TestAttribute，然后在一个分部类上使用它，然后这个类就会自动实现 Test() 方法了。</p><blockquote><p>  说明:information_source: ： 由于测试项目使用的是 net9.0， 支持顶级表达式，所以可以不需要写静态 Main 函数。</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> Test.TestClass();</span><br><span class="line">test.Test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Test</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">TestClass</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = true)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestAttribute</span> : <span class="title">Attribute</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下就会发现正确输出了 <code>&quot;Test&quot;</code></p><h3 id="C-诊断分析器（DiagnosticAnalyzer）实践"><a href="#C-诊断分析器（DiagnosticAnalyzer）实践" class="headerlink" title="C# 诊断分析器（DiagnosticAnalyzer）实践"></a>C# 诊断分析器（DiagnosticAnalyzer）实践</h3><p>比如我希望 <code>[Test]</code> 所在的 class 是密封的，那么我可以创建一个诊断器来分析，当不是 sealed 时抛出一个错误。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> disable RS2008</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Immutable;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> Microsoft.CodeAnalysis;</span><br><span class="line"><span class="keyword">using</span> Microsoft.CodeAnalysis.CSharp;</span><br><span class="line"><span class="keyword">using</span> Microsoft.CodeAnalysis.CSharp.Syntax;</span><br><span class="line"><span class="keyword">using</span> Microsoft.CodeAnalysis.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test.Analysis</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DiagnosticAnalyzer(LanguageNames.CSharp)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">TestAnalyzer</span> : <span class="title">DiagnosticAnalyzer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> ImmutableArray&lt;DiagnosticDescriptor&gt; SupportedDiagnostics =&gt; ImmutableArray.Create(Rule);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DiagnosticDescriptor Rule = <span class="keyword">new</span> DiagnosticDescriptor(</span><br><span class="line">            id: <span class="string">&quot;TEST001&quot;</span>,</span><br><span class="line">            title: <span class="string">&quot;Test class must be sealed&quot;</span>,</span><br><span class="line">            messageFormat: <span class="string">&quot;class &#x27;&#123;0&#125;&#x27; must be sealed&quot;</span>,</span><br><span class="line">            category: <span class="string">&quot;Test&quot;</span>,</span><br><span class="line">            defaultSeverity: DiagnosticSeverity.Error,</span><br><span class="line">            isEnabledByDefault: <span class="literal">true</span>,</span><br><span class="line">            description: <span class="string">&quot;Test class must be sealed.&quot;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">AnalysisContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.Analyze | GeneratedCodeAnalysisFlags.ReportDiagnostics);</span><br><span class="line">            context.EnableConcurrentExecution();</span><br><span class="line">            context.RegisterSyntaxNodeAction(AnalyzeSyntax, SyntaxKind.ClassDeclaration);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AnalyzeSyntax</span>(<span class="params">SyntaxNodeAnalysisContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (context.Node <span class="keyword">is</span> <span class="keyword">not</span> ClassDeclarationSyntax classDecl) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> hasTestAttribute = classDecl.AttributeLists</span><br><span class="line">                .SelectMany(al =&gt; al.Attributes)</span><br><span class="line">                .Any(a =&gt; a.Name.ToString() == <span class="string">&quot;Test&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (hasTestAttribute == <span class="literal">false</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> isSealed = classDecl.Modifiers.Any(m =&gt; m.IsKind(SyntaxKind.SealedKeyword));</span><br><span class="line">            <span class="keyword">if</span> (isSealed == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                context.ReportDiagnostic(Diagnostic.Create(SupportedDiagnostics[<span class="number">0</span>], classDecl.GetLocation(), classDecl.Identifier.Text));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后回到测试项目尝试 build，就可以看到有条报错：<code>error TEST001: class &#39;TestClass&#39; must be sealed</code></p><h3 id="Rust-函数宏（声明宏）实践"><a href="#Rust-函数宏（声明宏）实践" class="headerlink" title="Rust 函数宏（声明宏）实践"></a>Rust 函数宏（声明宏）实践</h3><blockquote><p>  我使用的是新的宏声明方式，旧的方式是使用 <code>macro_rules!</code> 进行声明</p><p>  <code>#![feature(decl_macro)]</code> 需要使用 Rust 的 nightly 或 beta 版本 :warning:</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![feature(decl_macro)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    macros::hello!(world);</span><br><span class="line">    macros::muti_hello!(world, rust, <span class="keyword">macro</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> macros &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">macro</span> <span class="title function_ invoke__">hello</span>($n:ident) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Hello, &#123;&#125;!&quot;</span>, <span class="built_in">stringify!</span>($n));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">macro</span> <span class="title function_ invoke__">muti_hello</span>($( $n:ident ),*$(,)?) &#123;</span><br><span class="line">        $(</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Hello, &#123;&#125;!&quot;</span>, <span class="built_in">stringify!</span>($n));</span><br><span class="line">        )*</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下观察输出：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> world!</span><br><span class="line"><span class="built_in">Hello,</span> world!</span><br><span class="line"><span class="built_in">Hello,</span> rust!</span><br><span class="line"><span class="built_in">Hello,</span> macro!</span><br></pre></td></tr></table></figure><h3 id="Rust-过程宏（proc-macro）实践"><a href="#Rust-过程宏（proc-macro）实践" class="headerlink" title="Rust 过程宏（proc-macro）实践"></a>Rust 过程宏（proc-macro）实践</h3><p>Rust 写过程宏类似于 C# 的增量生成器或诊断器，也是需要新建一个 Rust 项目，在新的过程宏项目中添加 quote, syn 依赖，然后简单写一个 Hello 特征的 derive</p><blockquote><p>  Rust trait （特征） 可以类比于其他语言的 interface（接口）</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> proc_macro;</span><br><span class="line"><span class="keyword">use</span> proc_macro::TokenStream;</span><br><span class="line"><span class="keyword">use</span> quote::quote;</span><br><span class="line"><span class="keyword">use</span> syn::&#123;parse::Parse, parse_macro_input, DeriveInput, Token&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[proc_macro_derive(Hello)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">hello_derive</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">input</span> = parse_macro_input!(input <span class="keyword">as</span> DeriveInput);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = &amp;input.ident;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">expanded</span> = quote! &#123;</span><br><span class="line">        <span class="keyword">impl</span> <span class="title class_">Hello</span> <span class="keyword">for</span> #name &#123;</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">hello</span>() &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;Hello, &#123;&#125;!&quot;</span>, <span class="built_in">stringify!</span>(#name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    expanded.<span class="title function_ invoke__">into</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SingleHelloInput</span> &#123;</span><br><span class="line">    from: syn::Ident,</span><br><span class="line">    to: syn::Ident,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HelloInput</span> &#123;</span><br><span class="line">    some_hellos: <span class="type">Vec</span>&lt;SingleHelloInput&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Parse</span> <span class="keyword">for</span> <span class="title class_">HelloInput</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">parse</span>(input: syn::parse::ParseStream) <span class="punctuation">-&gt;</span> syn::<span class="type">Result</span>&lt;<span class="keyword">Self</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">some_hellos</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">while</span> !input.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">from</span> = input.<span class="title function_ invoke__">parse</span>()?;</span><br><span class="line">            input.parse::&lt;Token![=&gt;]&gt;()</span><br><span class="line">                .<span class="title function_ invoke__">map_err</span>(|e| syn::Error::<span class="title function_ invoke__">new</span>(e.<span class="title function_ invoke__">span</span>(), <span class="string">&quot;Expected `=&gt;`&quot;</span>))?;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">to</span> = input.<span class="title function_ invoke__">parse</span>()?;</span><br><span class="line">            some_hellos.<span class="title function_ invoke__">push</span>(SingleHelloInput &#123; from, to &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(HelloInput &#123; some_hellos &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[proc_macro]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">say_hello</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">input</span> = parse_macro_input!(input <span class="keyword">as</span> HelloInput);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">hellos</span> = input.some_hellos.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|SingleHelloInput &#123; from, to &#125;| &#123;</span><br><span class="line">        quote! &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;say hello from &#123;&#125; to &#123;&#125;!&quot;</span>, <span class="built_in">stringify!</span>(#from), <span class="built_in">stringify!</span>(#to));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">expanded</span> = quote! &#123;</span><br><span class="line">        #(#hellos)*</span><br><span class="line">    &#125;;</span><br><span class="line">    expanded.<span class="title function_ invoke__">into</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把该项目添加到另一个项目的依赖，并测试宏的功能：</p><blockquote><p>  <code>hello_derive</code> 宏的功能是给目标实现 <code>Hello</code> 特征（当然，这得你自己定义），于是可以调用 <code>World::hello()</code> 方法</p><p>  注意:warning: ：此处不是静态方法，Rust 并不能直接在 struct 中定义静态方法（实际上也没有这个概念x），此处是由于 World 结构体没有任何成员，所以创建 World 实例可以直接简化成 <code>World</code> ，而不需要 <code>World &#123; &#125;</code></p><p>  <code>say_hello</code> 宏则是可以接受任意多组输入，每一组的格式必须是 <code>标识符 =&gt; 标识符</code> ，该宏的解析是自定义的。</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> test_macro::&#123;Hello, say_hello&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    World::<span class="title function_ invoke__">hello</span>();</span><br><span class="line">    say_hello!(World =&gt; Rust);</span><br><span class="line">    say_hello! &#123;</span><br><span class="line">        Hacbit =&gt; Rust</span><br><span class="line">        Rust =&gt; Hacbit     My =&gt; ABAB</span><br><span class="line">            My =&gt; Anii</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Hello)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">World</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">hello</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hello, World!</span><br><span class="line"><span class="built_in">say</span> hello <span class="keyword">from</span> World <span class="keyword">to</span> Rust!</span><br><span class="line"><span class="built_in">say</span> hello <span class="keyword">from</span> Hacbit <span class="keyword">to</span> Rust!</span><br><span class="line"><span class="built_in">say</span> hello <span class="keyword">from</span> Rust <span class="keyword">to</span> Hacbit!</span><br><span class="line"><span class="built_in">say</span> hello <span class="keyword">from</span> My <span class="keyword">to</span> ABAB!</span><br><span class="line"><span class="built_in">say</span> hello <span class="keyword">from</span> My <span class="keyword">to</span> Anii!</span><br></pre></td></tr></table></figure><h2 id="C-和Rust在元编程实现上的异同"><a href="#C-和Rust在元编程实现上的异同" class="headerlink" title="C#和Rust在元编程实现上的异同"></a>C#和Rust在元编程实现上的异同</h2><p>看了上面的几个示例，应该对两者的元编程机制有了一定的印象。</p><p>对于 C# 和 Rust 的相同的地方（虽然上面的例子可能没有很好的体现）：</p><ul><li>都是把源代码解析成 AST （抽象语法树），然后分析节点对象</li><li>需要额外引入库项目作为类似编译器插件的东西，以此实现在编译期对原有代码的功能进行拓展</li></ul><p>不过差异也十分显著：</p><ul><li>C# 提供多个管道（比如 <code>context.SyntaxProvider</code>）来访问各种节点（比如 <code>ClassDeclarationSyntax</code>）对象，生成器可以自定义筛选条件，并分析筛选出来的节点来生成相关拓展； Rust 则需要用户显示的去 “使用” 宏，比如 <code>#[derive(Hello)]</code> 就是直接指定了宏的使用目标，因而无需筛选。所以实际上，<strong>C# 在获取元信息的范围更广，Rust 只能获取目标的元信息，而无法得知目标以外的元信息。</strong></li><li>但是另一方面，<strong>受限于 C# 本身的语法，C# 无法提供更细粒度的指令流分析</strong>。而 Rust 在这方面就十分灵活，可以自定义 Token 流解析器，你可以把各种符号（允许的 Token）塞进的宏规则中，而无需在意语法（就像上面的 <code>say_hello!</code> 那样）。这意味着，<strong>在 Rust 中你可以定义自己语法。</strong></li></ul><p>无论是 C# 的生成器&#x2F;分析器，还是 Rust 的宏，其实核心区别无非就是作用范围的不同，一个是全局，一个是局部。而由这两点分歧，又很容易想到，C# 的元编程机制只能进行<strong>增量</strong>，是不能够修改原有代码的（因为生成器&#x2F;分析器是并行的，而元信息作为共享资源，自然不能随意修改）；Rust 的宏作用范围只有局部，每个宏之间是独立（或者包含），而不会产生交叉，因而可以<strong>随意修改原有逻辑</strong>。</p><p>不管具体实现如何，毫无疑问他们都是具有相当程度可定制化的，并且也能保证运行时性能和安全性。不同于反射、或者运行时动态执行字符串等运行时特性，他们本质上是<strong>将一部分运行时逻辑提前到编译期</strong>，因而减少运行时的性能损耗（当然，这也意味着你需要付出更长编译时间的代价 :laughing: ），也就是 Rust 中特别提倡的<strong>零成本抽象</strong>。同时，由于这些编译期特性只会在编译期产生作用，就不会有运行时特性那样潜在的注入漏洞等安全风险。（除非黑客能够控制你的编译管线 x :laughing: ）</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>有什么比较合适的使用场景呢？</p><p>按照我的经验可能往往是用来动态实现一些接口，函数之类的。不过这个应该更容易在 Rust 中实现（也十分自然），因为 Rust 的 <code>struct</code> 可以在任何地方去实现新功能，只需要定义一个新的 <code>trait</code> （如果是在该 <code>struct</code> 定义所在的模块之外）。而放在 C# 就有点麻烦，通常我们不得不需要强制用户使用 <code>partial</code> 关键字，并且也无法对一些内置的（或第三方库中的）类型进行更大限度的拓展，比如我们不能给 <code>int</code> 添加新的接口实现。</p><p>生成一些桥接代码可能是不错的选择，比如我们想要在 c 端和 s 端交换数据，那么肯定需要对两端的数据结构进行一个适配，这时候就可以根据配置动态生成；或者是想要和其他语言走 FFI，那么也可以通过元编程机制生成相关代码（比如 pyo3 项目对 Rust 和 Python 的 FFI 通信的处理）。</p><p>不过 C# 的诊断器确实是个很有意思的东西，天然适合写框架。毕竟可以全局检查你的代码，并且添加各种约束，以减少使用框架时的未定义行为，所以如果去翻各种第三方库，他们大多都会写一些 Analyzer 。Rust 的确做不了这块，原因如前文所述，Rust 不提供能够直接访问全局语法树的 API，不过 Rust 本身也有 rust-analyzer ，还可以配合 cargo-clippy，因此对于代码本身的检查也很严格就是了（）</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>要我说的话，肯定是 Rust 的机制写的更爽（），毕竟可以自定义语法欸，超帅的吧！</p><p>Rust 独立开发的话，随便写点宏自娱自乐其实挺有趣的，之前也写过一些<del>奇奇怪怪的</del>功能，比如使用宏加载 json 文件自动生成 enum。（C# 当然也很容易实现）</p><p>由于我是 Rust 出身，代码风格极大程度受到了 Rust 设计哲学的影响，在使用 C# 的时候，说实话多次尝试将一些 Rust 特性在 C# 中实现（），不过确实有点麻烦，特别是我想要实现类似过程宏的东西时候遇到了很大的阻碍（一大理由就是 C# 不允许用户自己分析 TokenStream，使得不可能像 Rust 那样自由），我尝试的一个思路是使用字符串，然后我就自己设计语法（参考 Rust），搓了词法分析，语法分析。不过话说回来，这样就不像是 C#，固然人家 Lisp，Rust 可以设计自己的语法，但是他们都还是 Lisp，Rust，而 C# 既然本身设计哲学就是这样，强行改变写法只会显得抽象和丑陋。</p><p>当然 Rust 和 C# 都是极其优秀的语言，写工程确实舒服。<del>（叠个甲）</del></p><p>不知道看本篇文章的读者有没有玩过所学语言的元编程机制，如果本文给你打开了一扇新世界的大门<del>（大概不是深渊吧）</del>，将是我的荣幸。</p>]]></content:encoded>
      
      
      <category domain="http://hacbit.tech/categories/%E6%9D%82%E8%AE%B0/">杂记</category>
      
      
      <category domain="http://hacbit.tech/tags/Rust/">Rust</category>
      
      <category domain="http://hacbit.tech/tags/CSharp/">CSharp</category>
      
      
      <comments>http://hacbit.tech/%E6%B5%85%E8%B0%88CSharp%E4%B8%8ERust%E7%9A%84%E5%85%83%E7%BC%96%E7%A8%8B%E6%9C%BA%E5%88%B6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>在Unity中解放高版本C#特性</title>
      <link>http://hacbit.tech/%E5%9C%A8Unity%E4%B8%AD%E8%A7%A3%E6%94%BE%E9%AB%98%E7%89%88%E6%9C%ACCS%E7%89%B9%E6%80%A7/</link>
      <guid>http://hacbit.tech/%E5%9C%A8Unity%E4%B8%AD%E8%A7%A3%E6%94%BE%E9%AB%98%E7%89%88%E6%9C%ACCS%E7%89%B9%E6%80%A7/</guid>
      <pubDate>Mon, 24 Feb 2025 14:10:35 GMT</pubDate>
      
      <description>&lt;p&gt;之前我在知乎问过相关问题，后面参考了几个知友的回答，借鉴了一些项目，也算是基本解决了这个问题&lt;/p&gt;
&lt;p&gt;也顺便附上我的知乎回答：&lt;a href=&quot;https://www.zhihu.com/question/11672499668/answer/103930816515&quot;&gt;https://www.zhihu.com/question/11672499668/answer/103930816515&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是关于如何在 Unity 中使用&lt;strong&gt;更高版本的 C# 特性&lt;/strong&gt;的详细解决办法（&lt;strong&gt;具有一定局限性&lt;/strong&gt;）&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>之前我在知乎问过相关问题，后面参考了几个知友的回答，借鉴了一些项目，也算是基本解决了这个问题</p><p>也顺便附上我的知乎回答：<a href="https://www.zhihu.com/question/11672499668/answer/103930816515">https://www.zhihu.com/question/11672499668/answer/103930816515</a></p><p>以下是关于如何在 Unity 中使用<strong>更高版本的 C# 特性</strong>的详细解决办法（<strong>具有一定局限性</strong>）</p><span id="more"></span><h2 id="Comfirm-the-C-version-that-Unity-supports"><a href="#Comfirm-the-C-version-that-Unity-supports" class="headerlink" title="Comfirm the C# version that Unity supports"></a>Comfirm the C# version that Unity supports</h2><p>关于你的 unity editor <strong>本身能够支持</strong>到多高的 C# 版本，以我的 unity 2022.3.52f1c1 为例，去 unity editor 所在的目录下面这个路径，打开 README 里面有 dotnet sdk 版本</p><img src="/%E5%9C%A8Unity%E4%B8%AD%E8%A7%A3%E6%94%BE%E9%AB%98%E7%89%88%E6%9C%ACCS%E7%89%B9%E6%80%A7/dotnet_sdk.png" alt="dotnet_sdk" style="zoom: 67%;"><p>然后去官方搜索一下该版本的相关信息：</p><img src="/%E5%9C%A8Unity%E4%B8%AD%E8%A7%A3%E6%94%BE%E9%AB%98%E7%89%88%E6%9C%ACCS%E7%89%B9%E6%80%A7/sdk_search.png" alt="sdk_search" style="zoom: 67%;"><p>发现可以支持到 C#10，在这个版本中，C#处于可预览状态，如果是一般的 cs 项目（使用该 sdk），可以直接在 csproj 指定 <code>&lt;LangVersion&gt;preview&lt;/LangVersion&gt;</code>  来使用部分的 C#11 特性。</p><p>但是 Unity 中的所谓 C# 项目并不是这么一回事，项目根目录里面的一堆 .csproj 文件，只是 Unity 自动生成给 IDE 看的，这也是为什么用 Rider，VSCode 之类的 IDE 打开项目后能进行解析（）</p><h2 id="Unity-Compile"><a href="#Unity-Compile" class="headerlink" title="Unity Compile"></a>Unity Compile</h2><p>在<a href="https://docs.unity3d.com/2022.3/Documentation/Manual/CSharpCompiler.html">官方手册</a>里面有关于这个的说明：Unity editor 会指定默认的编译选项给后端的 Roslyn 编译器（也就是C#版本指定 9.0）</p><img src="/%E5%9C%A8Unity%E4%B8%AD%E8%A7%A3%E6%94%BE%E9%AB%98%E7%89%88%E6%9C%ACCS%E7%89%B9%E6%80%A7/compiler.png" alt="compiler" style="zoom:67%;"><p>不过后面也说明了可以传递别的参数（），于是可以在<a href="https://docs.unity3d.com/2022.3/Documentation/Manual/CustomScriptingSymbols.html">这篇文章</a>找到答案，用户可以在 Assets&#x2F; 目录下添加 csc.rsp 文件来指定编译参数，文档给的例子是在 .rsp 文件里通过 <code>-define:XXXX</code> 来定义宏，用以条件编译。</p><p>但是我们显然能玩点别的东西，比如指定 <code>-langversion</code> ，按照前文的思路，我们可以启用 C#11 的部分特性。</p><p>所以我们创建一个 <code>csc.rsp</code> 文件放在 <strong>Assets&#x2F; 目录</strong>下（<strong>或者你的程序集的同目录</strong>），写入以下内容：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-langversion:preview -<span class="literal">null</span>able</span><br></pre></td></tr></table></figure><p>这些指令是将语言版本<strong>设置为预览状态</strong>，然后<strong>启用nullable编译</strong></p><blockquote><p>  关于后者，你可以在代码中使用  ? 来声明一个类型<strong>可为 null</strong>，比如：</p>  <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Example</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span>? ValueInt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  如果不启用的 nullable，使用 ？ 会警告你 “需要在 #nullable 的上下文使用”。</p></blockquote><p>然后你可以在你的脚本里面使用 C#11 的特性，<strong>回到 UnityEditor 中</strong>看看能不能通过编译。以下是一段简单的测试代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> DefaultValue</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// set default value in struct field</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Value = <span class="number">114514</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> NonArgConstructor</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// struct constructor with no-args</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NonArgConstructor</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">Value = <span class="string">&quot;1145141919810&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你使用的较新的 unity 2022.3 （&gt;&#x3D; 2022.3.12f1）那么这段代码是可以通过编译的（当然你也可以整个 mono 类去创建这两个 struct 输出确认是否真的设置成了指定的默认值）</p><p>不过你在编写上述代码的时候，IDE 里面一定是一片爆红吧 :laughing: 。</p><p>不用担心，让 csproj 来救你（x</p><h2 id="Change-csproj-files"><a href="#Change-csproj-files" class="headerlink" title="Change .csproj files"></a>Change .csproj files</h2><p>在前面有说过，Unity 项目根目录的 .csproj 文件都是给 IDE 看的，你可以随便打开一个 .csproj 文件，里面应该很容易找到一行内容是：<code>&lt;LangVersion&gt;9.0&lt;/LangVersion&gt;</code></p><p>这会导致你的 IDE 会认为你的项目使用 C#9 ，所以前面编写 C#11 的代码的时候自然是会报错的啦（），你可以手动修改一下文件试试。</p><p>尝试将你的 <code>Assembly-CSharp.csproj</code>  文件里面的 langversion 那一行改成 <code>&lt;LangVersion&gt;preview&lt;/LangVersion&gt;</code></p><blockquote><p>  如果你使用程序集，比如有一个 <code>My.Test.asmdef</code> 的程序集，那么 UnityEditor 会自动给这个程序集生成一个 <code>My.Test.csproj</code> （当然也是在项目根目录），那么 IDE 对该程序集中的代码的解析，就会受到 <code>My.Test.csproj</code> 的影响，这时候需要去修改 <code>My.Test.csproj</code> 里面的 langversion 选项了（）</p></blockquote><p>回到你的 IDE 里面应该就不会报错了。</p><p>当然每次编译后，unity 都会重新生成一遍，所以建议写个脚本，读取 csproj， 然后修改相关的选项，然后可以监听 <code>compilationFinished</code> 事件自动执行。</p><h2 id="Some-lunatic-ideas-for-higher-version-P-S"><a href="#Some-lunatic-ideas-for-higher-version-P-S" class="headerlink" title="Some lunatic ideas for higher version (P.S.)"></a>Some lunatic ideas for higher version (P.S.)</h2><p>还有一些本人没有实践过的想法，有些已经被别人尝试过，有些不确定有没有人试过，感兴趣的可以玩玩 :laughing:</p><ul><li>开一个 C# 项目，目标框架设置 <code>&lt;TargetFramework&gt;netstandard2.1&lt;/TargetFramework&gt;</code>，然后语言版本设置 <code>&lt;TargetFramework&gt;latest&lt;/TargetFramework&gt;</code> ，应该能够使用到 C#12 甚至更高的特性，当然部分特性可能缺少预定义类，可以通过 PolySharp 来补充（），详情可以参考 R3 项目。</li><li>修改你的 Unity Editor 的 Roslyn 编译器依赖的 SDK 版本（？）（如果要尝试建议备份一下）</li></ul>]]></content:encoded>
      
      
      <category domain="http://hacbit.tech/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/">游戏开发</category>
      
      
      <category domain="http://hacbit.tech/tags/Unity/">Unity</category>
      
      <category domain="http://hacbit.tech/tags/Tutorial/">Tutorial</category>
      
      <category domain="http://hacbit.tech/tags/CSharp/">CSharp</category>
      
      
      <comments>http://hacbit.tech/%E5%9C%A8Unity%E4%B8%AD%E8%A7%A3%E6%94%BE%E9%AB%98%E7%89%88%E6%9C%ACCS%E7%89%B9%E6%80%A7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSharp实现强制类型限定</title>
      <link>http://hacbit.tech/CSharp%E5%AE%9E%E7%8E%B0%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E9%99%90%E5%AE%9A/</link>
      <guid>http://hacbit.tech/CSharp%E5%AE%9E%E7%8E%B0%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E9%99%90%E5%AE%9A/</guid>
      <pubDate>Sat, 15 Feb 2025 05:43:43 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;CSharp-实现强制类型限定&quot;&gt;&lt;a href=&quot;#CSharp-实现强制类型限定&quot; class=&quot;headerlink&quot; title=&quot;CSharp 实现强制类型限定&quot;&gt;&lt;/a&gt;CSharp 实现强制类型限定&lt;/h1&gt;&lt;p&gt;之前偶然有些灵感，想着如果遇到了如下情景，需要此处的 object 只能是某种特定类型，比如实现了 &lt;code&gt;ITestInterface&lt;/code&gt; 这个接口，那么大概会写成下面这样。&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Method&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;object&lt;/span&gt; obj&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; ITestInterface target)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样做自然没啥问题，但是只有到运行时才知道 obj 的类型到底符不符合要求，那么能不能把&lt;strong&gt;检查提前到编译期&lt;/strong&gt;呢？也就是在编写代码的时候就能够很大程度避免使用不合要求的类型。&lt;/p&gt;
&lt;p&gt;对于 C# 来说，其实可以写一个诊断分析器来实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  以下使用 Unity 2022.3 对应的环境&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="CSharp-实现强制类型限定"><a href="#CSharp-实现强制类型限定" class="headerlink" title="CSharp 实现强制类型限定"></a>CSharp 实现强制类型限定</h1><p>之前偶然有些灵感，想着如果遇到了如下情景，需要此处的 object 只能是某种特定类型，比如实现了 <code>ITestInterface</code> 这个接口，那么大概会写成下面这样。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">is</span> ITestInterface target)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做自然没啥问题，但是只有到运行时才知道 obj 的类型到底符不符合要求，那么能不能把<strong>检查提前到编译期</strong>呢？也就是在编写代码的时候就能够很大程度避免使用不合要求的类型。</p><p>对于 C# 来说，其实可以写一个诊断分析器来实现。</p><blockquote><p>  以下使用 Unity 2022.3 对应的环境</p></blockquote><span id="more"></span><h2 id="编写之前"><a href="#编写之前" class="headerlink" title="编写之前"></a>编写之前</h2><p>那么按照我的个人习惯。这里先定义一个 <code>TypeConstraintAttribute</code> ，要注意由于是给参数做一个限定，所以这里需要指定这个 attribute 的目标为 <code>Parameter</code> ，后面的两个一般都是设置 <code>false</code> 就行了。</p><blockquote><p>  这里 <code>AllowMultiple</code> 可以考虑设置成 true（也就是一个参数可以挂多个 <code>[TypeConstraint]</code> ），理由后面再说（</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">TypeConstraintAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Type[] Constraints &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TypeConstraintAttribute</span>(<span class="params"><span class="keyword">params</span> Type[] constraints</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Constraints = constraints;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是只定义 attr 自然是没啥用的，一般可能会经常配合反射，源生成器，分析器之类的来用。</p><blockquote><p>  根据 Unity 官方手册中的说明，对于 Unity2022.3 的 editor，使用的源生成器项目目标框架需要是 <code>netstandard2.0</code> ，然后依赖的 <code>Microsoft.CodeAnalysis.CSharp</code> 需要是 <code>3.8.0</code> 版本</p></blockquote><p>所以去另外创建一个新项目：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new classlib <span class="literal">-n</span> Analysis <span class="operator">-f</span> netstandard2.<span class="number">0</span></span><br><span class="line"><span class="built_in">cd</span> Analysis</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.CSharp <span class="literal">--version</span> <span class="number">3.8</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>然后顺便打开 <code>Analysis.csproj</code> 把语言版本设置成 <code>9.0</code> （要不然默认就只有 <code>C#7.3</code> ）</p><p>现在配置文件里面应该大概是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netstandard2.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LangVersion</span>&gt;</span>9.0<span class="tag">&lt;/<span class="name">LangVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.CodeAnalysis.CSharp&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;3.8.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写分析器"><a href="#编写分析器" class="headerlink" title="编写分析器"></a>编写分析器</h2><p>在项目文件夹中新建一个 <code>TypeConstraintAnalyzer.cs</code> ，然后在就是诊断器的起手式（x</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Analysis</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DiagnosticAnalyzer(LanguageNames.CSharp)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">TypeConstraintAnalyzer</span> : <span class="title">DiagnosticAnalyzer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> ImmutableArray&lt;DiagnosticDescriptor&gt; SupportedDiagnostics =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplement();</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">AnalysisContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);</span><br><span class="line">            context.EnableConcurrentExecution();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SupportedDiagnostics</code> 可以先不管，然后就是注册一些行为，一般可能注册符号行为或者语法节点行为（）</p><p>对于我们要实现对类型的限定，那么第一步就是先解析<strong>函数定义</strong>处，其参数上的 <code>[TypeConstraint(...)]</code> 中的提供的那些限定类型。这意味我们需要把解析到的相关信息储存，然后第二步解析函数调用时根据先前的信息类判断是否符合限定。</p><h3 id="分析-Attribute"><a href="#分析-Attribute" class="headerlink" title="分析 Attribute"></a>分析 Attribute</h3><p>定义一个 <code>AnalyzeSymbol</code> ，并注册：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">AnalysisContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// SymbolKind.Method 表示 AnalyzeSymbol 会用来分析函数的符号信息</span></span><br><span class="line">    context.RegisterSymbolAction(AnalyzeSymbol, SymbolKind.Method);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AnalyzeSymbol</span>(<span class="params">SymbolAnalysisContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是检查参数是否有 <code>TypeConstraintAttribute</code> 之类的，最后把对应的参数信息储存，这里我们可以定义一个字段来储存</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Dictionary&lt;IMethodSymbol, Dictionary&lt;IParameterSymbol, ImmutableHashSet&lt;INamedTypeSymbol&gt;&gt;&gt; MethodConstraints = <span class="keyword">new</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AnalyzeSymbol</span>(<span class="params">SymbolAnalysisContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (context.Symbol <span class="keyword">is</span> <span class="keyword">not</span> IMethodSymbol methodSymbol) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (methodSymbol.Parameters.Length <span class="keyword">is</span> <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> parametersConstraints = <span class="keyword">new</span> Dictionary&lt;IParameterSymbol, ImmutableHashSet&lt;INamedTypeSymbol&gt;&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> parameter <span class="keyword">in</span> methodSymbol.Parameters)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// check if the parameter have TypeConstraintAttribute</span></span><br><span class="line">        <span class="comment">// 这里有点忘了，&quot;TypeConstraintAttribute&quot; 不行的话就改成 &quot;TypeConstraint&quot; 吧</span></span><br><span class="line">        <span class="keyword">var</span> attrs = parameter.GetAttributes().Where(attr =&gt; attr.AttributeClass.Name == <span class="string">&quot;TypeConstraintAttribute&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (attrs.Any() <span class="keyword">is</span> <span class="literal">false</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> typeConstraintAttr = attrs.First();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Correctly handle the type of ConstructorArguments</span></span><br><span class="line">        <span class="keyword">var</span> allowedTypes = typeConstraintAttr.ConstructorArguments</span><br><span class="line">            .SelectMany(arg =&gt; arg.Values)</span><br><span class="line">            .Select(arg =&gt; arg.Value <span class="keyword">as</span> INamedTypeSymbol)</span><br><span class="line">            .Where(type =&gt; type <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>)</span><br><span class="line">            .ToImmutableHashSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (allowedTypes.Any() <span class="keyword">is</span> <span class="literal">false</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        parametersConstraints.Add(parameter, allowedTypes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parametersConstraints.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        MethodConstraints[methodSymbol] = parametersConstraints;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  如果想要测试有没有正确去解析，可以打一些 log 到文件里面（如果要方便点建议使用绝对路径吧）</p></blockquote><p>这里的直接储存到字段会给你一个警告：<em>不要将每次编译的数据存储到诊断分析器的字段中</em></p><p>如果懒得去优化的话，就直接在文件开头添加一行 <code>#pragma warning disable RS1008</code>  就行。</p><p>顺便说明一下上面的 <code>allowedTypes</code> 吧：</p><blockquote><p>  在 roslyn 分析器中不能直接去获取一个 Attribute 内部的字段信息，一般是从构造函数来获取信息。</p><p>  在先前我们定义的 attr 时候是这样的：</p>  <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TypeConstraintAttribute</span>(<span class="params"><span class="keyword">params</span> Type[] constraints</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Constraints = constraints;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  也就是 constraints 参数是一个 Type[] ，虽然使用的时候可以像是任意数量参数那样，但是解析符号的时候这里是一个参数，所以就需要先 SelectMany 再 Select ，如果直接 <code>typeConstraintAttr.ConstructorArguments.Select(...)</code>  就会异常，具体的表现就是在别的项目里使用该分析器的时候会没有任何表现（因为分析器运行到这里就崩溃了）</p></blockquote><h3 id="分析调用"><a href="#分析调用" class="headerlink" title="分析调用"></a>分析调用</h3><p>注册一个新的行为，这次我们注册到 <code>SyntaxNodeAction</code> （因为这个是在 <code>SymbolAction</code> 之后执行的，不过我猜这一步注册 <code>SymbolAction</code> 应该没啥问题）</p><p>然后分析的目标是调用表达式（<code>Invocation Expression</code>）</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">AnalysisContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    context.RegisterSyntaxNodeAction(AnalyzeMethodCall, SyntaxKind.InvocationExpression);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AnalyzeMethodCall</span>(<span class="params">SyntaxNodeAnalysisContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断被调用的函数是不是有 <code>[TypeConstraint(...)]</code> 限定过的函数（也就是检查是不是在之前储存的那个字典就行），并获取调用时的实参，以及定义时的参数信息</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AnalyzeMethodCall</span>(<span class="params">SyntaxNodeAnalysisContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> invocation = (InvocationExpressionSyntax)context.Node;</span><br><span class="line">    <span class="keyword">if</span> (context.SemanticModel.GetSymbolInfo(invocation).Symbol <span class="keyword">is</span> <span class="keyword">not</span> IMethodSymbol methodSymbol</span><br><span class="line">        || MethodConstraints.ContainsKey(methodSymbol) <span class="keyword">is</span> <span class="literal">false</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> parametersConstraints = MethodConstraints[methodSymbol];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arguments = invocation.ArgumentList.Arguments;</span><br><span class="line">    <span class="keyword">var</span> parameters = methodSymbol.Parameters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后遍历参数，并判断是否满足限制，这里需要注意 arg 和 param 要对应上</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> (argument, parameter) <span class="keyword">in</span> arguments.Zip(parameters, (arg, param) =&gt; (arg, param)))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> argumentType = context.SemanticModel.GetTypeInfo(argument.Expression).Type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parametersConstraints.TryGetValue(parameter, <span class="keyword">out</span> <span class="keyword">var</span> allowedTypes))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> isValid = allowedTypes.Any(allowed =&gt;</span><br><span class="line">            SymbolEqualityComparer.Default.Equals(allowed, argumentType) ||</span><br><span class="line">            argumentType.AllInterfaces.Any(i =&gt; SymbolEqualityComparer.Default.Equals(i, allowed)) ||</span><br><span class="line">            (argumentType.BaseType != <span class="literal">null</span> &amp;&amp; SymbolEqualityComparer.Default.Equals(argumentType.BaseType, allowed)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是根据实参是否合法，来抛出提示就行了。我们定义一个新的规则，比如这样：</p><blockquote><p>  这里应该也会有一个警告，懒得搞也是在文件开头加一行： <code>#pragma warning disable RS2008</code></p><p>  也可以按照官方的说明：<a href="https://github.com/dotnet/roslyn-analyzers/blob/main/src/Microsoft.CodeAnalysis.Analyzers/ReleaseTrackingAnalyzers.Help.md">https://github.com/dotnet/roslyn-analyzers/blob/main/src/Microsoft.CodeAnalysis.Analyzers/ReleaseTrackingAnalyzers.Help.md</a></p><p>  创建 <code>AnalyzerReleases.Unshipped.md</code> 和 <code>AnalyzerReleases.Shipped.md</code> 两个文件，并且按照格式把规则信息补充（</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DiagnosticDescriptor Rule = <span class="keyword">new</span> DiagnosticDescriptor(</span><br><span class="line">    id: <span class="string">&quot;ANALY001&quot;</span>,</span><br><span class="line">    title: <span class="string">&quot;无效的参数类型&quot;</span>,</span><br><span class="line">    messageFormat: <span class="string">&quot;参数类型 &#x27;&#123;0&#125;&#x27; 不满足 TypeConstraintAttribute 中的约束条件, 类型 &#x27;&#123;0&#125;&#x27; 需要为 &#x27;&#123;1&#125;&#x27; 中的一种, 或派生于其中之一。&quot;</span>,</span><br><span class="line">    category: <span class="string">&quot;Usage&quot;</span>,</span><br><span class="line">    defaultSeverity: DiagnosticSeverity.Error,</span><br><span class="line">    isEnabledByDefault: <span class="literal">true</span>,</span><br><span class="line">    description: <span class="string">&quot;参数类型不满足 TypeConstraintAttribute 中的约束条件&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> ImmutableArray&lt;DiagnosticDescriptor&gt; SupportedDiagnostics =&gt; ImmutableArray.Create(Rule);</span><br></pre></td></tr></table></figure><p>然后在原来检测的地方获取上下文并抛出错误</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isValid <span class="keyword">is</span> <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> diagnostic = Diagnostic.Create(Rule, argument.GetLocation(), argumentType, <span class="built_in">string</span>.Join(<span class="string">&quot;, &quot;</span>, allowedTypes.Select(type =&gt; type.Name)));</span><br><span class="line">    context.ReportDiagnostic(diagnostic);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在-Unity-中使用分析器"><a href="#在-Unity-中使用分析器" class="headerlink" title="在 Unity 中使用分析器"></a>在 Unity 中使用分析器</h2><p>把项目 build 一下，把 dll 文件按照 Unity 官方手册的说明 <a href="https://docs.unity3d.com/cn/2022.3/Manual/roslyn-analyzers.html">https://docs.unity3d.com/cn/2022.3/Manual/roslyn-analyzers.html</a> 应用到项目中，之后就可以测试了。</p><blockquote><p>  在前面的实现中，我由于是判断只有满足多个限制中的一个就行，所以多个类型之间其实是 <code>or</code> 的关系。</p><p>  在最开始我说定义 <code>TypeConstraintAttribute</code> 的时候，可以把 <code>AllowMultiple</code> 设置为 true，这样的话就可以考虑多个 <code>[TypeConstraint(...)]</code> 之间是 <code>and</code> 关系，这里我就不实现了（</p></blockquote><p><img src="/CSharp%E5%AE%9E%E7%8E%B0%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E9%99%90%E5%AE%9A/Test.png" alt="Test"></p>]]></content:encoded>
      
      
      <category domain="http://hacbit.tech/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/">游戏开发</category>
      
      
      <category domain="http://hacbit.tech/tags/Tutorial/">Tutorial</category>
      
      <category domain="http://hacbit.tech/tags/CSharp/">CSharp</category>
      
      <category domain="http://hacbit.tech/tags/Analysis/">Analysis</category>
      
      
      <comments>http://hacbit.tech/CSharp%E5%AE%9E%E7%8E%B0%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E9%99%90%E5%AE%9A/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Unity 项目文档生成</title>
      <link>http://hacbit.tech/Unity-%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/</link>
      <guid>http://hacbit.tech/Unity-%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/</guid>
      <pubDate>Sat, 08 Feb 2025 09:06:38 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Unity-项目文档生成&quot;&gt;&lt;a href=&quot;#Unity-项目文档生成&quot; class=&quot;headerlink&quot; title=&quot;Unity 项目文档生成&quot;&gt;&lt;/a&gt;Unity 项目文档生成&lt;/h1&gt;&lt;p&gt;对于 C# 项目来说，可以使用 docfx 这个开源工具来生成代码文档，这个工具也同样能用在 Unity 的项目中。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Unity-项目文档生成"><a href="#Unity-项目文档生成" class="headerlink" title="Unity 项目文档生成"></a>Unity 项目文档生成</h1><p>对于 C# 项目来说，可以使用 docfx 这个开源工具来生成代码文档，这个工具也同样能用在 Unity 的项目中。</p><span id="more"></span><p>以我的 KimerA 框架的项目结构为例吧：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">KimerA</span><br><span class="line">├─Docs</span><br><span class="line">└─Src</span><br><span class="line">    ├─KimerA</span><br><span class="line">    │  ├─<span class="string">.vscode</span></span><br><span class="line">    │  ├─Assets</span><br><span class="line"><span class="string">......</span></span><br></pre></td></tr></table></figure><p>其中 <strong>KimerA&#x2F;Src&#x2F;KimerA</strong> 就是 unity 项目的根目录。</p><blockquote><p>  首先保证至少有 DotNet8 的环境</p><p>  运行 <code>dotnet tool update -g docfx</code> 来全局安装 docfx 工具</p></blockquote><p><em>关于 docfx 的入门，建议直接看官方的  <a href="https://dotnet.github.io/docfx/index.html">https://dotnet.github.io/docfx/index.html</a></em></p><p>在 <strong>KimerA&#x2F;Docs</strong> 打开一个终端，输入 <code>docfx init</code> 初始化相关设置</p><p>然后应该就看到了 Docs 文件夹下多了 <code>docfx.json, index.md, toc.yml</code>  这三个文件</p><blockquote><p>  启动 docfx 服务后的主界面就是根据 index.md 来的</p><p>  toc.yml （Table of Config），就和名字一样，是指示文档结构的</p><p>  docfx.json 就是生成文档时的相关配置</p></blockquote><p>docfx.json 中 metadata -&gt; src 应该默认是指向一个 .csproj 路径，但是对于 unity 项目，建议改成 .cs 文件的路径</p><p>下面是一个示例的 docfx.json 文件内容，（当然，由于我是为了打包成 unitypackage 我才放到 Plugins 下面，如果只是要给项目核心逻辑的哪些脚本生成文档，大可改成类似  <code>TestProj/Assets/Scripts/*.cs</code> ,  <code>TestProj/Assets/Scripts/**/*.cs</code> 这样的）</p><blockquote><p>  需要解释一下为什么在 metadata 中会添加一个   <code>&quot;references&quot;: [ &quot;*.dll&quot; ]</code></p><p>  因为我依赖了 UnityEngine，所以当 docfx 尝试 build 的时候（生成文档前会先build）就会缺少依赖，我的做法是直接去编辑器文件夹下面复制了一个 UnityEngine.dll （不知道有没有更好的办法）</p><p>  然后 “references” 字段需要的是模式，可以填  “UnityEngine.dll”, “*.dll”，但是不能 “.&#x2F;UnityEngine.dll”</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;KimerA/Assets/Plugins/KimerA/Runtime/**/*.cs&quot;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../Src&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;api&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disableGitFeatures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disableDefaultFilter&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;*.dll&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;globalMetadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;_disableContribution&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;_appTitle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KimerA&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;api/**.yml&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;api/index.md&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;articles/**.md&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;articles/**/toc.yml&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;toc.yml&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;*.md&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;images/**&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;overwrite&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;apidoc/**.md&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;obj/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;_site/**&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_site&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;globalMetadataFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fileMetadataFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;modern&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;postProcessors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;markdownEngineName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;markdig&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noLangKeyword&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keepFileLink&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cleanupCacheHistory&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>toc.yml</strong></p><blockquote><p>  生成的 yml 文件名是根据命名空间来的，我希望一打开就是 <code>KimerA.Core</code> 这个命名空间内的东西，那么 homepage 就这么写（</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">KimerA</span> <span class="string">API</span> <span class="string">Documentation</span></span><br><span class="line">  <span class="attr">href:</span> <span class="string">api/</span></span><br><span class="line">  <span class="attr">homepage:</span> <span class="string">api/KimerA.Core.yml</span></span><br></pre></td></tr></table></figure><p>然后 index.md 里面随便写点东西，就可以直接 <code>docfx .\docfx.json --serve</code> 了</p><img src="/Unity-%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/Home.png" alt="Home" style="zoom:67%;"><p>点上方按钮进去就是大概这样</p><img src="/Unity-%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/Core.png" alt="Core" style="zoom: 67%;"><h2 id="一些可能的问题"><a href="#一些可能的问题" class="headerlink" title="一些可能的问题"></a>一些可能的问题</h2><ul><li><p>使用了 unsafe 代码，无法直接编译</p><blockquote><p>  可以在 docfx.json 中的 metadata 中添加 <code>&quot;properties&quot;: &#123; &quot;AllowUnsafeBlocks&quot;: &quot;true&quot; &#125;</code></p><p>  但是要注意， properties 中的属性的值都必须是 String 类型，这里填  true 会无法解析（x</p></blockquote></li><li><p>最近使用的时候遇到了 UnityEngine.dll 中缺少符号的问题，大概是 UnityEngine.dll 还会依赖其他的 dll，所以我直接把 editor 里面的 <code>Data/Managed/UnityEngine/</code> 这个目录一起复制过去了，然后把配置文件里面的 references 改成 <code>&quot;UnityEngine/*.dll&quot;</code> 就可以了。</p></li></ul>]]></content:encoded>
      
      
      <category domain="http://hacbit.tech/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/">游戏开发</category>
      
      
      <category domain="http://hacbit.tech/tags/Unity/">Unity</category>
      
      <category domain="http://hacbit.tech/tags/Tutorial/">Tutorial</category>
      
      
      <comments>http://hacbit.tech/Unity-%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>rust宏魔法-2</title>
      <link>http://hacbit.tech/rust%E5%AE%8F%E9%AD%94%E6%B3%95-2/</link>
      <guid>http://hacbit.tech/rust%E5%AE%8F%E9%AD%94%E6%B3%95-2/</guid>
      <pubDate>Mon, 26 Aug 2024 14:31:29 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Rust宏魔法——第二辑（&quot;&gt;&lt;a href=&quot;#Rust宏魔法——第二辑（&quot; class=&quot;headerlink&quot; title=&quot;Rust宏魔法——第二辑（&quot;&gt;&lt;/a&gt;Rust宏魔法——第二辑（&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  又来整点奇技淫巧了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这期就玩玩用声明宏来生成宏（&lt;/p&gt;
&lt;p&gt;总结可以直接看 👉 &lt;a href=&quot;#%E7%9C%81%E6%B5%81&quot;&gt;省流&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设有以下的奇怪情景：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  你整了一个日志系统，但是其中的输出内容是预设好的（当然也应该预留一个比如 Other 的来自定义内容）&lt;/p&gt;
&lt;p&gt;  然后你想要给每一种输出内容都注册一个宏，并且有些输出是带有 “{}” 的，因此你希望能够有类似下面这个效果：&lt;/p&gt;
  &lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app_start_failed!(e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// App start failed due to the error : &amp;#123;e&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  也就是像 &lt;code&gt;println!&lt;/code&gt; 之类的宏能够接受不定数量的参数，具体看格式（也就是你预设字符串里面有几个 “{}” )&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Rust宏魔法——第二辑（"><a href="#Rust宏魔法——第二辑（" class="headerlink" title="Rust宏魔法——第二辑（"></a>Rust宏魔法——第二辑（</h1><blockquote><p>  又来整点奇技淫巧了</p></blockquote><p>这期就玩玩用声明宏来生成宏（</p><p>总结可以直接看 👉 <a href="#%E7%9C%81%E6%B5%81">省流</a></p><p>假设有以下的奇怪情景：</p><blockquote><p>  你整了一个日志系统，但是其中的输出内容是预设好的（当然也应该预留一个比如 Other 的来自定义内容）</p><p>  然后你想要给每一种输出内容都注册一个宏，并且有些输出是带有 “{}” 的，因此你希望能够有类似下面这个效果：</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app_start_failed!(e)</span><br><span class="line"><span class="comment">// App start failed due to the error : &#123;e&#125;</span></span><br></pre></td></tr></table></figure><p>  也就是像 <code>println!</code> 之类的宏能够接受不定数量的参数，具体看格式（也就是你预设字符串里面有几个 “{}” )</p></blockquote><span id="more"></span><p>为了方便演示，就以以下作为例子吧</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app_started : <span class="string">&quot;App start!&quot;</span></span><br><span class="line">app_start_failed : <span class="string">&quot;App start failed due to the error: &#123;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>如果只是考虑上面这种，应该很容易写成这样：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> generate_macros &#123;</span><br><span class="line">    ( $( $id:ident =&gt; $e:expr ),*$(,)? ) =&gt; &#123;</span><br><span class="line">        $(</span><br><span class="line">            <span class="meta">#[macro_export]</span></span><br><span class="line">            <span class="built_in">macro_rules!</span> $id &#123;</span><br><span class="line">                () =&gt; &#123;</span><br><span class="line">                    <span class="built_in">println!</span>($e);</span><br><span class="line">    &#125;;</span><br><span class="line">                ($tt:tt) =&gt; &#123;</span><br><span class="line">                    <span class="built_in">println!</span>($e, $tt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        )*</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">generate_macros! &#123;</span><br><span class="line">    app_started =&gt; <span class="string">&quot;App start!&quot;</span>,</span><br><span class="line">    app_start_failed =&gt; <span class="string">&quot;App start failed due to the error: &#123;&#125;&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    app_started!();</span><br><span class="line">    app_start_failed!(<span class="string">&quot;AAAAAAA&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样自然能够正常运行，但是也不难发现问题，就是如果增加了一个有两个 “{}” 的字段，那就不得不给 generate_macros 里面新增一个规则。</p><p>当然，对于 macro 烂熟于心的你，肯定想到可以把这个里面的匹配模式统一成  <code>$($tt:tt)*</code> ，也就是类似下面这种：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> generate_macros &#123;</span><br><span class="line">    ( $( $id:ident =&gt; $e:expr ),*$(,)? ) =&gt; &#123;</span><br><span class="line">        $(</span><br><span class="line">            <span class="meta">#[macro_export]</span></span><br><span class="line">            <span class="built_in">macro_rules!</span> $id &#123;</span><br><span class="line">                ($($tt:tt)*) =&gt; &#123;</span><br><span class="line">                    <span class="built_in">println!</span>($e, $tt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        )*</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接自信运行！</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">error: attempted to repeat an expression containing no syntax variables matched as repeating at this depth</span><br><span class="line"> <span class="literal">--</span>&gt; src/main.rs:<span class="number">9</span>:<span class="number">19</span></span><br><span class="line">  |</span><br><span class="line"><span class="number">9</span> |                 (<span class="variable">$</span>(<span class="variable">$tt:tt</span>)*) =&gt; &#123;</span><br><span class="line">  |                   ^^^^^^^</span><br></pre></td></tr></table></figure><p>报错了，悲（</p><p>这个原因主要是像 <code>$( #[macro_export] xxxxx )*</code> 这样，被递归展开了，但是在 <code>macro_rules! $id &#123;&#125;</code> 中这么写，就不知道什么时候结束，因为 <code>$tt</code> 也是没有在 <code>macro_rules! generate_macros</code> 中声明（</p><p>但是这里如果是通过 <code>proc-macro</code> 包上一层就可以正确解析了</p><p>新建一个 <code>proc-macro</code> 类型的crate，写上以下代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> proc_macro;</span><br><span class="line"><span class="keyword">use</span> proc_macro::TokenStream;</span><br><span class="line"><span class="keyword">use</span> quote::quote;</span><br><span class="line"><span class="keyword">use</span> syn::&#123;parse_macro_input, parse::&#123;Parse, ParseBuffer&#125;, Token, Ident, LitStr&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MacroInfo</span> &#123;</span><br><span class="line">    id: Ident,</span><br><span class="line">    msg: LitStr,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Parse</span> <span class="keyword">for</span> <span class="title class_">MacroInfo</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">parse</span>(input: &amp;ParseBuffer) <span class="punctuation">-&gt;</span> syn::<span class="type">Result</span>&lt;<span class="keyword">Self</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">id</span> = input.parse::&lt;Ident&gt;()?;</span><br><span class="line">        input.parse::&lt;Token![=&gt;]&gt;()?;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">msg</span> = input.parse::&lt;LitStr&gt;()?;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(<span class="keyword">Self</span> &#123; id, msg &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[proc_macro]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">make_macro</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">input</span> = parse_macro_input!(input <span class="keyword">as</span> MacroInfo);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">id</span> = &amp;input.id;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">msg</span> = &amp;input.msg;</span><br><span class="line">    </span><br><span class="line">    quote! &#123;</span><br><span class="line">        <span class="built_in">macro_rules!</span> #id &#123;</span><br><span class="line">            ($($tt:tt)*) =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(#msg, $($tt)*);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.<span class="title function_ invoke__">into</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 <code>generate_macros</code> 这边替换一下就好了</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> generate_macros &#123;</span><br><span class="line">    ( $( $id:ident =&gt; $e:expr ),*$(,)? ) =&gt; &#123;</span><br><span class="line">        $(</span><br><span class="line">            make_macro! &#123;</span><br><span class="line">                $id =&gt; $e</span><br><span class="line">            &#125;</span><br><span class="line">        )*</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示范：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">generate_macros! &#123;</span><br><span class="line">    hello =&gt; <span class="string">&quot;Hello, &#123;&#125;!&quot;</span>,</span><br><span class="line">    goodbye =&gt; <span class="string">&quot;Goodbye, &#123;&#125;!&quot;</span>,</span><br><span class="line">    hhh =&gt; <span class="string">&quot;hhh, &#123;&#125; and &#123;&#125;!&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    hello!(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    goodbye!(<span class="string">&quot;world&quot;</span>); </span><br><span class="line">    hhh!(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此，写任意格式的字符串就不需要在 generate_macros 那里添加新的匹配模式了。</p><h2 id="省流"><a href="#省流" class="headerlink" title="省流"></a>省流</h2><p>为了避免在 macro_rules 中定义 macro_rules 时错误的解析内层声明宏的 <code>$( xxx )*</code> 这一类模式，需要把这部分移动到 <code>proc-macro</code> 中。</p>]]></content:encoded>
      
      
      <category domain="http://hacbit.tech/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      
      <category domain="http://hacbit.tech/tags/Rust/">Rust</category>
      
      
      <comments>http://hacbit.tech/rust%E5%AE%8F%E9%AD%94%E6%B3%95-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>rust宏魔法(1)</title>
      <link>http://hacbit.tech/rust%E5%AE%8F%E9%AD%94%E6%B3%95-1/</link>
      <guid>http://hacbit.tech/rust%E5%AE%8F%E9%AD%94%E6%B3%95-1/</guid>
      <pubDate>Wed, 17 Apr 2024 00:29:14 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Rust宏魔法——第一辑（不知道后面还会不会更新，总之这是个系列）&quot;&gt;&lt;a href=&quot;#Rust宏魔法——第一辑（不知道后面还会不会更新，总之这是个系列）&quot; class=&quot;headerlink&quot; title=&quot;Rust宏魔法——第一辑（不知道后面还会不会更新，总之这是个系列）&quot;&gt;&lt;/a&gt;Rust宏魔法——第一辑（不知道后面还会不会更新，总之这是个系列）&lt;/h1&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：本文默认你已经有一定的Rust基础&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;rust的宏的强大相信大家肯定听的不少，本篇就简单说说rust的过程宏&lt;/p&gt;
&lt;p&gt;rust的宏有好几种，有基于模式匹配的，还有可以直接对语法树动手的，过程宏就是可以修改语法树，可以在编译器派生代码：比如有个test crate，然后它依赖于test_macro crate，而后者是一个proc-macro库，也就是里面定义了过程宏，编译时就会先编译test_macro然后用test_macro的对test的语法解析流修改再丢给编译器，所以可以实现很多非常抽象的操作。&lt;/p&gt;
&lt;p&gt;写本文的契机是，前段时间在Rust中文社区群里看到有人问能不能用宏把json生成一个enum（json只有一层），这个需求和过程宏还是很契合的，所以就简单实现了一下，以下内容就是对实现的讲解&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Rust宏魔法——第一辑（不知道后面还会不会更新，总之这是个系列）"><a href="#Rust宏魔法——第一辑（不知道后面还会不会更新，总之这是个系列）" class="headerlink" title="Rust宏魔法——第一辑（不知道后面还会不会更新，总之这是个系列）"></a>Rust宏魔法——第一辑（不知道后面还会不会更新，总之这是个系列）</h1><p><em><strong>注：本文默认你已经有一定的Rust基础</strong></em></p><p>rust的宏的强大相信大家肯定听的不少，本篇就简单说说rust的过程宏</p><p>rust的宏有好几种，有基于模式匹配的，还有可以直接对语法树动手的，过程宏就是可以修改语法树，可以在编译器派生代码：比如有个test crate，然后它依赖于test_macro crate，而后者是一个proc-macro库，也就是里面定义了过程宏，编译时就会先编译test_macro然后用test_macro的对test的语法解析流修改再丢给编译器，所以可以实现很多非常抽象的操作。</p><p>写本文的契机是，前段时间在Rust中文社区群里看到有人问能不能用宏把json生成一个enum（json只有一层），这个需求和过程宏还是很契合的，所以就简单实现了一下，以下内容就是对实现的讲解</p><span id="more"></span><p>首先开个crate吧</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new json_to_enum</span><br></pre></td></tr></table></figure><blockquote><p>  直到撰写本文时，想要定义过程宏还是必须要单独开个crate，并且在<code>cargo.toml</code>里面设置 <code>lib.proc-macro = true</code></p><p>  至于原因是rust的编译单元是crate，而前面也说要拿过程宏的库编译好对其他库使用的，所以就不可避免要分割，单独开个crate。</p></blockquote><p>然后创建过程宏库，这里我一般喜欢把依赖的其他自己写的库放在src下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">cargo new <span class="literal">--lib</span> json_to_enum_macro</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><p>然后创建一个json文件用于测试，内容比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;app_name_not_set&quot;</span><span class="punctuation">:</span> <span class="string">&quot;应用名称未设置&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;app_name_too_long&quot;</span><span class="punctuation">:</span> <span class="string">&quot;应用名称过长&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;app_name_invalid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;应用名称无效&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;app_name_already_exists&quot;</span><span class="punctuation">:</span> <span class="string">&quot;应用名称已存在&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>现在的文件结构应该是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├─src</span><br><span class="line">│  ├─main.rs</span><br><span class="line">│  └─json_to_enum_macro</span><br><span class="line">│      └─src</span><br><span class="line">│   └─lib.rs</span><br><span class="line">└─test.json</span><br></pre></td></tr></table></figure><p>emm，先展示一下调用的效果吧</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> json_to_enum_macro::json_to_enum;</span><br><span class="line"></span><br><span class="line">json_to_enum! &#123;</span><br><span class="line">    <span class="meta">#[from_json(<span class="string">&quot;test.json&quot;</span>)]</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Test</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">4</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">t</span> = <span class="keyword">unsafe</span> &#123; std::mem::transmute::&lt;<span class="type">u8</span>, Test&gt;(i) &#125;;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125; &#123;&#125;&quot;</span>, t, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">AppNameAlreadyExists &quot;应用名称已存在&quot;</span></span><br><span class="line"><span class="comment">AppNameInvalid &quot;应用名称无效&quot;</span></span><br><span class="line"><span class="comment">AppNameNotSet &quot;应用名称未设置&quot;</span></span><br><span class="line"><span class="comment">AppNameTooLong &quot;应用名称过长&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>json_to_enum</code>宏里面的匹配规则是一看到这个需求时的想法，所以别问我为什么要这样写（）</p><p>里面塞一个空的enum也是方便指定这个解析出的enum的名字而已，最终的效果是会替换掉enum的内容，所以里面写什么内容都没有用</p><p>好了，现在开始正式编写！</p><h2 id="开始编写你的proc-macro"><a href="#开始编写你的proc-macro" class="headerlink" title="开始编写你的proc-macro"></a>开始编写你的proc-macro</h2><p>先在json_to_enum_macro的<code>cargo.toml</code>里面设置 <code>lib.proc-macro = true</code></p><p>然后导入proc-macro的依赖 quote，syn，以及用于解析json文件的serde_json库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo add quote syn serde_json</span><br></pre></td></tr></table></figure><p>现在文件应该是这样</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;json_to_enum_macro&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[lib]</span></span><br><span class="line"><span class="attr">proc-macro</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">quote</span> = <span class="string">&quot;1.0.36&quot;</span></span><br><span class="line"><span class="attr">serde_json</span> = <span class="string">&quot;1.0.116&quot;</span></span><br><span class="line"><span class="attr">syn</span> = <span class="string">&quot;2.0.59&quot;</span></span><br></pre></td></tr></table></figure><p>把这个库添加到json_to_enum的依赖</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[workspace]</span></span><br><span class="line"><span class="attr">members</span> = [</span><br><span class="line">    <span class="string">&quot;src/json_to_enum_macro&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;json_to_enum&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies.json_to_enum_macro]</span></span><br><span class="line"><span class="attr">path</span> = <span class="string">&quot;src/json_to_enum_macro&quot;</span></span><br></pre></td></tr></table></figure><p>接下来rust-analyser就会一起解析你的macro库了</p><p>打开<code>lib.rs</code>文件导入依赖</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> proc_macro;</span><br><span class="line"><span class="keyword">use</span> proc_macro::&#123;Span, TokenStream&#125;;</span><br><span class="line"><span class="keyword">use</span> quote::quote;</span><br><span class="line"><span class="keyword">use</span> syn::&#123;parse_macro_input, DeriveInput, Ident, Lit&#125;;</span><br></pre></td></tr></table></figure><p>一般来说基本都会用上这几个：<code>proc_macro::TokenStream, quote::quote, syn::&#123;parse_macro_input, DeriveInput&#125;</code></p><p>proc macro也有好几种，比如 <code>proc_macro_derive</code> 可以给enum，struct啥的实现某个特征， 使用方法比如： <code>#[derive(Debug)] struct DebugStruct;</code>， 比如 <code>proc_macro_attribute</code> 可以扩展函数，enum字段等的功能。</p><p>而这里由于我们连enum都要派生，上面说的两者都要依托于某个对象，所以我们这里也就采用<code>proc_macro</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[proc_macro]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">json_to_enum</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">input</span> = parse_macro_input!(input <span class="keyword">as</span> DeriveInput);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">gen</span> = quote! &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    gen.<span class="title function_ invoke__">into</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要先解析一个attribute，得到json文件的路径，比如这个attribute是 <code>#[from_json(&quot;test.json&quot;)]</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由于可以有很多个attribute，所以这里返回的是一个Vec</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">attribute</span> = &amp;input.attrs;</span><br><span class="line"><span class="comment">// 解析出attr里提供的json文件路径</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">json_name</span> = attribute</span><br><span class="line">.<span class="title function_ invoke__">iter</span>()</span><br><span class="line">.<span class="title function_ invoke__">find_map</span>(|attr| &#123;</span><br><span class="line">        <span class="keyword">if</span> attr.<span class="title function_ invoke__">path</span>().<span class="title function_ invoke__">is_ident</span>(<span class="string">&quot;from_json&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 尝试把attr解析成字面量(literal)</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">lit</span> = <span class="keyword">match</span> attr.parse_args::&lt;Lit&gt;() &#123;</span><br><span class="line">                <span class="title function_ invoke__">Ok</span>(lit) =&gt; lit,</span><br><span class="line">                <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, e),</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Lit</span>::<span class="title function_ invoke__">Str</span>(lit) = lit &#123;</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(lit.<span class="title function_ invoke__">value</span>())</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="literal">None</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"><span class="comment">// 读取文件内容</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">json_content</span> = std::fs::<span class="title function_ invoke__">read_to_string</span>(json_name).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;file not found&quot;</span>);</span><br><span class="line"><span class="comment">// 解析文件内容</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">json</span>: serde_json::Value = serde_json::<span class="title function_ invoke__">from_str</span>(&amp;json_content).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;json parse error&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后获取你传入的enum的名字（标识符），和json的keys就可以派生enum了</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">name</span> = &amp;input.ident;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">variants</span> = json</span><br><span class="line">    .<span class="title function_ invoke__">as_object</span>()</span><br><span class="line">    .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;json should be object&quot;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">keys</span>()</span><br><span class="line">    .<span class="title function_ invoke__">map</span>(|k| &#123;</span><br><span class="line">        <span class="comment">// json里面是snake命名，转成驼峰式命名</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">ident</span> = Ident::<span class="title function_ invoke__">new</span>(&amp;<span class="title function_ invoke__">snake_to_camel</span>(k), Span::<span class="title function_ invoke__">call_site</span>().<span class="title function_ invoke__">into</span>());</span><br><span class="line">        quote! &#123;</span><br><span class="line">            #ident,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>这时候就可以像这样派生一个enum</p><p>是不是感觉和写<code>macro_rules!</code>很像呢</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">quote! &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">enum</span> #name &#123;</span><br><span class="line">        *(#variants)*</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后还要实现一下Display，需求说的是要json字段对应的值（也就是那些中文），这也显然只要获取json的values即可</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">msgs</span> = json.<span class="title function_ invoke__">as_object</span>().<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">values</span>().<span class="title function_ invoke__">map</span>(|v| &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">msg</span> = v.<span class="title function_ invoke__">as_str</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;value should be string&quot;</span>);</span><br><span class="line">        quote! &#123;</span><br><span class="line">            #msg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>后面实现Display，（我也顺便实现了Debug）也就跟上面一样</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">std</span>::fmt::Display <span class="keyword">for</span> #name &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> std::fmt::Formatter) <span class="punctuation">-&gt;</span> std::fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            #(</span><br><span class="line">                #name::#keys =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;&#123;&#125;&quot;</span>, <span class="built_in">stringify!</span>(#msgs)),</span><br><span class="line">            )*</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里就已经完成了，如果你不知道后面这部分怎么弄就好好理解一下前面的代码，我故意没有全都写出来（）</p><p>实现完后记得测试一下</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> json_to_enum_macro::json_to_enum;</span><br><span class="line"></span><br><span class="line">json_to_enum! &#123;</span><br><span class="line">    <span class="meta">#[from_json(<span class="string">&quot;test.json&quot;</span>)]</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Test</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = Test::AppNameNotSet;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(a.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;应用名称未设置&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>能正常跑就基本没啥问题了，还担心就展开看看</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo expand</span><br></pre></td></tr></table></figure><p>展开结果：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![feature(prelude_import)]</span></span><br><span class="line"><span class="meta">#[prelude_import]</span></span><br><span class="line"><span class="keyword">use</span> std::prelude::rust_2021::*;</span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> std;</span><br><span class="line"><span class="keyword">use</span> parser_macro::json_to_enum;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    AppNameAlreadyExists,</span><br><span class="line">    AppNameInvalid,</span><br><span class="line">    AppNameNotSet,</span><br><span class="line">    AppNameTooLong,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">std</span>::fmt::Display <span class="keyword">for</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> std::fmt::Formatter) <span class="punctuation">-&gt;</span> std::fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            Test::AppNameAlreadyExists =&gt; &#123;</span><br><span class="line">                f.<span class="title function_ invoke__">write_fmt</span>(</span><br><span class="line">                    <span class="built_in">format_args!</span>(</span><br><span class="line">                        <span class="string">&quot;&#123;0&#125;&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;\&quot;\u&#123;5e94&#125;\u&#123;7528&#125;\u&#123;540d&#125;\u&#123;79f0&#125;\u&#123;5df2&#125;\u&#123;5b58&#125;\u&#123;5728&#125;\&quot;&quot;</span>,</span><br><span class="line">                    ),</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">            Test::AppNameInvalid =&gt; &#123;</span><br><span class="line">                f.<span class="title function_ invoke__">write_fmt</span>(</span><br><span class="line">                    <span class="built_in">format_args!</span>(</span><br><span class="line">                        <span class="string">&quot;&#123;0&#125;&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;\&quot;\u&#123;5e94&#125;\u&#123;7528&#125;\u&#123;540d&#125;\u&#123;79f0&#125;\u&#123;65e0&#125;\u&#123;6548&#125;\&quot;&quot;</span>,</span><br><span class="line">                    ),</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">            Test::AppNameNotSet =&gt; &#123;</span><br><span class="line">                f.<span class="title function_ invoke__">write_fmt</span>(</span><br><span class="line">                    <span class="built_in">format_args!</span>(</span><br><span class="line">                        <span class="string">&quot;&#123;0&#125;&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;\&quot;\u&#123;5e94&#125;\u&#123;7528&#125;\u&#123;540d&#125;\u&#123;79f0&#125;\u&#123;672a&#125;\u&#123;8bbe&#125;\u&#123;7f6e&#125;\&quot;&quot;</span>,</span><br><span class="line">                    ),</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">            Test::AppNameTooLong =&gt; &#123;</span><br><span class="line">                f.<span class="title function_ invoke__">write_fmt</span>(</span><br><span class="line">                    <span class="built_in">format_args!</span>(</span><br><span class="line">                        <span class="string">&quot;&#123;0&#125;&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;\&quot;\u&#123;5e94&#125;\u&#123;7528&#125;\u&#123;540d&#125;\u&#123;79f0&#125;\u&#123;8fc7&#125;\u&#123;957f&#125;\&quot;&quot;</span>,</span><br><span class="line">                    ),</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">std</span>::fmt::<span class="built_in">Debug</span> <span class="keyword">for</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> std::fmt::Formatter) <span class="punctuation">-&gt;</span> std::fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            Test::AppNameAlreadyExists =&gt; &#123;</span><br><span class="line">                f.<span class="title function_ invoke__">write_fmt</span>(<span class="built_in">format_args!</span>(<span class="string">&quot;&#123;0&#125;&quot;</span>, <span class="string">&quot;AppNameAlreadyExists&quot;</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            Test::AppNameInvalid =&gt; f.<span class="title function_ invoke__">write_fmt</span>(<span class="built_in">format_args!</span>(<span class="string">&quot;&#123;0&#125;&quot;</span>, <span class="string">&quot;AppNameInvalid&quot;</span>)),</span><br><span class="line">            Test::AppNameNotSet =&gt; f.<span class="title function_ invoke__">write_fmt</span>(<span class="built_in">format_args!</span>(<span class="string">&quot;&#123;0&#125;&quot;</span>, <span class="string">&quot;AppNameNotSet&quot;</span>)),</span><br><span class="line">            Test::AppNameTooLong =&gt; f.<span class="title function_ invoke__">write_fmt</span>(<span class="built_in">format_args!</span>(<span class="string">&quot;&#123;0&#125;&quot;</span>, <span class="string">&quot;AppNameTooLong&quot;</span>)),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = Test::AppNameNotSet;</span><br><span class="line">    <span class="title function_ invoke__">match</span> (&amp;a.<span class="title function_ invoke__">to_string</span>(), &amp;<span class="string">&quot;应用名称未设置&quot;</span>) &#123;</span><br><span class="line">        (left_val, right_val) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> !(*left_val == *right_val) &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">kind</span> = ::core::panicking::AssertKind::<span class="built_in">Eq</span>;</span><br><span class="line">                ::core::panicking::<span class="title function_ invoke__">assert_failed</span>(</span><br><span class="line">                    kind,</span><br><span class="line">                    &amp;*left_val,</span><br><span class="line">                    &amp;*right_val,</span><br><span class="line">                    ::core::option::<span class="type">Option</span>::<span class="literal">None</span>,</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://hacbit.tech/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      
      <category domain="http://hacbit.tech/tags/Rust/">Rust</category>
      
      
      <comments>http://hacbit.tech/rust%E5%AE%8F%E9%AD%94%E6%B3%95-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>idapython入门</title>
      <link>http://hacbit.tech/idapython%E5%85%A5%E9%97%A8/</link>
      <guid>http://hacbit.tech/idapython%E5%85%A5%E9%97%A8/</guid>
      <pubDate>Fri, 23 Feb 2024 13:15:03 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;IDA-Python入门（todo）&quot;&gt;&lt;a href=&quot;#IDA-Python入门（todo）&quot; class=&quot;headerlink&quot; title=&quot;IDA Python入门（todo）&quot;&gt;&lt;/a&gt;IDA Python入门（todo）&lt;/h1&gt;&lt;p&gt;ida pro7.7已经基本普及了，所以本篇文章是基于ida pro77和python3环境编写。&lt;/p&gt;
&lt;p&gt;不可否认的是ida pro在静态分析上极为强大，不过动调方面还是比起其他工具稍显不足，而idapython提供了大量的ida的api，能一定程度上缓解动调的缺陷，这里就给大家简单介绍一下（&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;PS：参考了Q神的 &lt;a href=&quot;http://www.qfrost.com/posts/ctf/idapython&quot;&gt;http://www.qfrost.com/posts/ctf/idapython&lt;/a&gt; ，并且修正为了新版ida python的api&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="IDA-Python入门（todo）"><a href="#IDA-Python入门（todo）" class="headerlink" title="IDA Python入门（todo）"></a>IDA Python入门（todo）</h1><p>ida pro7.7已经基本普及了，所以本篇文章是基于ida pro77和python3环境编写。</p><p>不可否认的是ida pro在静态分析上极为强大，不过动调方面还是比起其他工具稍显不足，而idapython提供了大量的ida的api，能一定程度上缓解动调的缺陷，这里就给大家简单介绍一下（</p><p><em><strong>PS：参考了Q神的 <a href="http://www.qfrost.com/posts/ctf/idapython">http://www.qfrost.com/posts/ctf/idapython</a> ，并且修正为了新版ida python的api</strong></em></p><span id="more"></span><p><img src="/idapython%E5%85%A5%E9%97%A8/image-20240223213616667.png" alt="image-20240223213616667"></p><p><img src="/idapython%E5%85%A5%E9%97%A8/image-20240223221902702.png" alt="image-20240223221902702"></p><p><strong>指令相关：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> idaapi <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ida_dbg <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 返回目标地址指向的指令的前一条指令的地址</span></span><br><span class="line"><span class="comment"># 参数一是查找的开始地址，参数二是往前查找的最小地址（在范围内）</span></span><br><span class="line">prev_1 = prev_head(<span class="number">0x00007FF6A1AA2577</span>, <span class="number">1</span>)</span><br><span class="line">prev_2 = prev_head(<span class="number">0x00007FF6A1AA257a</span>, <span class="number">0x00007FF6A1AA2578</span>)<span class="comment"># fail</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(prev_1), <span class="built_in">hex</span>(prev_2))</span><br><span class="line">&gt;&gt; <span class="number">0x7ff6a1aa2573</span> <span class="number">0xffffffffffffffff</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回目标地址指向的指令的后一条指令的地址</span></span><br><span class="line"><span class="comment"># 参数一是查找开始地址，参数二是往后查找的最大地址（不在范围内）</span></span><br><span class="line">next_1 = next_head(<span class="number">0x00007FF6A1AA257a</span>, <span class="number">1</span>)<span class="comment"># fail</span></span><br><span class="line">next_2 = next_head(<span class="number">0x00007FF6A1AA257a</span>, <span class="number">0x00007FF6A1AA2580</span>)</span><br><span class="line">&gt;&gt; <span class="number">0xffffffffffffffff</span> <span class="number">0x7ff6a1aa257b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出目标地址的反汇编语句（就是有一点点乱码x）</span></span><br><span class="line">a = generate_disasm_line(<span class="number">0x00007FF6A1AA2585</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&gt;&gt; <span class="string">b&#x27;\x01\x05movzx\x02\x05   \x01)\x01!eax\x02!\x02)\x01\t,\x02\t \x01*\x01 byte ptr\x02  \x01\t[\x02\t\x01!r10\x02!\x01\t]\x02\t\x02*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目标地址指令</span></span><br><span class="line">a = print_insn_mnem(<span class="number">0x00007FF6A1AA2585</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&gt;&gt; movzx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目标地址的某个操作数（按索引取）</span></span><br><span class="line">a = print_operand(<span class="number">0x00007FF6A1AA2585</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&gt;&gt; <span class="string">b&#x27;\x01)\x01!eax\x02!\x02)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目标地址某个操作数的值（按索引取）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(get_operand_value(<span class="number">0x00007FF6A1AA2577</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(get_operand_value(<span class="number">0x00007FF6A1AA2577</span>, <span class="number">1</span>)))</span><br><span class="line">&gt;&gt; <span class="number">0x10</span></span><br><span class="line">&gt;&gt; &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目标地址字符串，参数二是长度，参数三是string的类型</span></span><br><span class="line">a = get_strlit_contents(<span class="number">0x00007FF6A1AC28A8</span>, <span class="number">4</span>, <span class="number">0</span>)</span><br><span class="line">b = get_strlit_contents(<span class="number">0x00007FF6A1AC28A8</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">&gt;&gt; <span class="string">b&#x27;Erro&#x27;</span></span><br><span class="line">&gt;&gt; <span class="string">b&#x27;\xe7\x89\x85\xe6\xbd\xb2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在目标地址添加注释，参数三为True则不会替换comment</span></span><br><span class="line">a = set_cmt(<span class="number">0x00007FF6A1AA2577</span>, <span class="string">&quot;this is a comment&quot;</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&gt;&gt; <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给目标地址的变量改名</span></span><br><span class="line">a = set_name(<span class="number">0x00007FF6A1AC28A8</span>, <span class="string">&quot;err&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&gt;&gt; <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前光标处地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(get_screen_ea()))</span><br><span class="line">&gt;&gt; <span class="number">0x7ff6a1ac28a8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目标地址所在函数有多少个基本块</span></span><br><span class="line"><span class="built_in">print</span>(FlowChart(get_func(<span class="number">0x00007FF6A1AA21B0</span>)).size)</span><br><span class="line">&gt;&gt; <span class="number">149</span></span><br></pre></td></tr></table></figure><p><strong>功能+调试相关：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置断点</span></span><br><span class="line">add_bpt(<span class="number">0x00007FF6A1AA2577</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除断点</span></span><br><span class="line">del_bpt(<span class="number">0x00007FF6A1AA2577</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置断点是否开启</span></span><br><span class="line">enable_bpt(<span class="number">0x00007FF6A1AA2577</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置idapython为默认语言，在设置条件断点时不设置会默认使用idc</span></span><br><span class="line">load_and_run_plugin(<span class="string">&quot;idapython&quot;</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">condition</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; rip:&quot;</span>, get_reg_val(<span class="string">&quot;rip&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">add_bpt(<span class="number">0x00007FF6011D2581</span>)</span><br><span class="line"><span class="comment"># 设置条件断点，每次运行到这个断点停下会触发condition</span></span><br><span class="line">set_bpt_cond(<span class="number">0x00007FF6011D2581</span>, <span class="string">&quot;condition()&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看交叉引用，返回一个迭代器，包含idautils._xref对象</span></span><br><span class="line">a = XrefsTo(<span class="number">0x00007FF6011D2577</span>, flags=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(addr.frm))<span class="comment"># .frm 返回交叉引用地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读/写 1/2/4/8字节， wide是宽字节</span></span><br><span class="line">get_byte(addr)</span><br><span class="line">get_word(addr)</span><br><span class="line">get_dword(addr)</span><br><span class="line">get_qword(addr)</span><br><span class="line">get_wide_byte(addr)</span><br><span class="line">get_wide_word(addr)</span><br><span class="line">get_wide_dword(addr)</span><br><span class="line">get_wide_qword(addr)</span><br><span class="line">patch_byte(addr, val)</span><br><span class="line">patch_word(addr, val)</span><br><span class="line">patch_dword(addr, val)</span><br><span class="line">patch_qword(addr, val)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取寄存器rip的值</span></span><br><span class="line">get_reg_val(<span class="string">&quot;rip&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置寄存器rax的值为0x10</span></span><br><span class="line">set_reg_val(<span class="string">&quot;rax&quot;</span>, <span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始调试</span></span><br><span class="line">start_process()</span><br><span class="line"><span class="comment"># continue</span></span><br><span class="line">continue_process()</span><br><span class="line"><span class="comment"># 运行到目标地址</span></span><br><span class="line">run_to(addr)</span><br><span class="line"><span class="comment"># 获取并清除调试器事件代码，普通代码返回0x20，断点、ret返回0x10，程序结束返回负数</span></span><br><span class="line"><span class="comment"># 必须在进程执行的代码后面调用该函数，以便检索调试器的事件代码，否则可能会阻止后续尝试</span></span><br><span class="line">wait_for_next_event(EVENT_TYPE, flags)</span><br><span class="line"><span class="comment"># 单步</span></span><br><span class="line">step_over()</span><br><span class="line">wait_for_next_event(WFNE_SUSP, -<span class="number">1</span>) <span class="comment"># 每次step_over都要调用一次，continue这些也是</span></span><br><span class="line"><span class="comment"># 事件 WFNE_SUSP 将等待导致被调试进程挂起的事件，比如异常或断点</span></span><br><span class="line"><span class="comment"># 事件 WFNE_CONT 可以恢复被挂起的进程，继续执行</span></span><br><span class="line"><span class="comment"># example:</span></span><br><span class="line">wait_for_next_event(WFNE_SUSP, -<span class="number">1</span>)</span><br><span class="line">wait_for_next_event(WFNE_ANY | WFNE_CONT, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="实战：使用IDApython编写爆破脚本"><a href="#实战：使用IDApython编写爆破脚本" class="headerlink" title="实战：使用IDApython编写爆破脚本"></a>实战：使用IDApython编写爆破脚本</h1><p><strong>PS：使用我给SICTF Round3出的Re题Closeme作为例子</strong></p><p>附件： <a href="../resources/re_asset/closeme_release.zip" target="_block">点击下载附件</a></p><p>这题说实话预期就是爆破（x</p><p>大概回顾一下题目，每次创建几个窗口后都会弹出一个messagebox，点击yes&#x2F;no会被储存为1&#x2F;0，然后长度为16时就check一次，所以先把CreateWindowsEx和MessageBoxW那里的call xxx给nop掉（你也不想开几千上万个窗口把cpu干烧了吧x），然后就需要手动添加各种值了。</p><p>因为每16次循环才能使长度达到16进而check，太影响效率了，所以直接在原来call messagebox那里patch成jmp到cmp rax, 10h这里。</p><p>rax是长度，直接jmp过来就没有调用获取长度的函数，我们需要手动设置0x10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">breakpoint_addr = <span class="number">0x00007FF6A1AA2577</span></span><br><span class="line">add_bpt(breakpoint_addr)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">rip = get_reg_val(<span class="string">&quot;RIP&quot;</span>)</span><br><span class="line"><span class="comment">#print(&quot;rip: &quot;, hex(rip))</span></span><br><span class="line"><span class="keyword">if</span> rip == breakpoint_addr:</span><br><span class="line">    set_reg_val(<span class="string">&quot;rax&quot;</span>, <span class="number">0x10</span>)</span><br></pre></td></tr></table></figure><p><img src="/idapython%E5%85%A5%E9%97%A8/image-20240224010303964.png" alt="image-20240224010303964"></p><p>但是再执行两步就会把一个局部变量取出来解一层引用给r10，后续就是16个比较，所以r10应该是一个指向我们储存16个1或0的地址。</p><p>那么我们要伪造2层，一是先把那个局部变量的值修改为一个可写地址（同时也要保证运行时不会有其他的写者），然后二是在这个可写地址写入我们爆破的数据。</p><p>我直接找了.data段最末尾的0x10的空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .data section</span></span><br><span class="line">buf_addr = <span class="number">0x7FF6A1ACDFF0</span></span><br><span class="line">patch_qword(get_reg_val(<span class="string">&quot;rbp&quot;</span>) + <span class="number">0x38</span>, buf_addr) <span class="comment"># 写入局部变量</span></span><br></pre></td></tr></table></figure><p>然后写入要爆破的数据需要注意端序问题（</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">send = <span class="comment"># 你要爆破的数据， 比如 0101010101010101</span></span><br><span class="line">left = <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27;0&#x27;</span>.join(send[:<span class="number">8</span>][::-<span class="number">1</span>])</span><br><span class="line">left = <span class="built_in">int</span>(left, <span class="number">16</span>)</span><br><span class="line">right = <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27;0&#x27;</span>.join(send[<span class="number">8</span>:][::-<span class="number">1</span>])</span><br><span class="line">right = <span class="built_in">int</span>(right, <span class="number">16</span>)</span><br><span class="line">patch_qword(buf_addr, left)</span><br><span class="line">patch_qword(buf_addr + <span class="number">8</span>, right)</span><br></pre></td></tr></table></figure><p>然后就是爆破2^16次就行了！</p><p><strong>完整爆破脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> idaapi <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ida_dbg <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">this_input = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">start = <span class="number">0x00007FF6530D220F</span></span><br><span class="line"><span class="comment">#add_bpt(start)</span></span><br><span class="line">breakpoint_addr = <span class="number">0x00007FF6A1AA2577</span></span><br><span class="line">add_bpt(breakpoint_addr)</span><br><span class="line">win_addr = <span class="number">0x00007FF6A1AA2993</span></span><br><span class="line">add_bpt(win_addr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Start!&quot;</span>)</span><br><span class="line">start_process()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Waiting for next event...&quot;</span>)</span><br><span class="line">wait_for_next_event(WFNE_SUSP, -<span class="number">1</span>)</span><br><span class="line"><span class="comment"># .data section</span></span><br><span class="line">buf_addr = <span class="number">0x7FF6A1ACDFF0</span></span><br><span class="line">patch_qword(get_reg_val(<span class="string">&quot;rbp&quot;</span>) + <span class="number">0x38</span>, buf_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> this_input &gt;= <span class="number">0x10000</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Burst Finished.&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    send = <span class="built_in">bin</span>(this_input)[<span class="number">2</span>:].zfill(<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;send: &quot;</span>, send)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rip = get_reg_val(<span class="string">&quot;RIP&quot;</span>)</span><br><span class="line">        <span class="comment">#print(&quot;rip: &quot;, hex(rip))</span></span><br><span class="line">        <span class="keyword">if</span> rip == breakpoint_addr:</span><br><span class="line">            set_reg_val(<span class="string">&quot;rax&quot;</span>, <span class="number">0x10</span>)</span><br><span class="line">            <span class="comment">#print(&quot;set rax to 0x10&quot;)</span></span><br><span class="line"></span><br><span class="line">            left = <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27;0&#x27;</span>.join(send[:<span class="number">8</span>][::-<span class="number">1</span>])</span><br><span class="line">            left = <span class="built_in">int</span>(left, <span class="number">16</span>)</span><br><span class="line">            right = <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27;0&#x27;</span>.join(send[<span class="number">8</span>:][::-<span class="number">1</span>])</span><br><span class="line">            right = <span class="built_in">int</span>(right, <span class="number">16</span>)</span><br><span class="line">            patch_qword(buf_addr, left)</span><br><span class="line">            patch_qword(buf_addr + <span class="number">8</span>, right)</span><br><span class="line">        <span class="keyword">elif</span> rip == win_addr:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;win&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag: SICTF&#123;&quot;</span> + <span class="built_in">bin</span>(this_input - <span class="number">1</span>)[<span class="number">2</span>:].zfill(<span class="number">16</span>) + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">        continue_process()</span><br><span class="line">        wait_for_next_event(WFNE_SUSP, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;err: &quot;</span>, e)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    this_input += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://hacbit.tech/categories/CTF/">CTF</category>
      
      
      <category domain="http://hacbit.tech/tags/IDA/">IDA</category>
      
      <category domain="http://hacbit.tech/tags/Tutorial/">Tutorial</category>
      
      
      <comments>http://hacbit.tech/idapython%E5%85%A5%E9%97%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rust-QuickStart</title>
      <link>http://hacbit.tech/Rust-QuickStart/</link>
      <guid>http://hacbit.tech/Rust-QuickStart/</guid>
      <pubDate>Sun, 26 Nov 2023 05:47:08 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Include:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;This book?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Before Start&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Quick Start with a small Game&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Improve your Rust code (TODO)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Others (TODO)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em><strong>Include:</strong></em></p><ul><li><p><em><strong>This book?</strong></em></p></li><li><p><em><strong>Before Start</strong></em></p></li><li><p><em><strong>Quick Start with a small Game</strong></em></p></li><li><p><em><strong>Improve your Rust code (TODO)</strong></em></p></li><li><p><em><strong>Others (TODO)</strong></em></p></li></ul><span id="more"></span><h1 id="This-book"><a href="#This-book" class="headerlink" title="This book?"></a>This book?</h1><p>本文是为<strong>已经有一定编程基础</strong>（像C&#x2F;Cpp, Python, Ruby, C#等）的读者所编写的Rust快速入门教程，因此本文会假定读者已经对通用的基本的编程语言中的概念（如类型，结构体，流程控制等）具有一定的了解。如果在此之前你没有学习过任何有关编程语言的知识，我们强烈建议你应该先去学习一门其他语言。</p><p>如果你有基础且对部分语言比较熟练，可以通过<strong>《Rust语言圣经》</strong>进行更加系统的学习。这本书可以在Rust官网找到， 或者你可以阅读这本不错的中译版：<a href="https://course.rs/%E3%80%82">https://course.rs/。</a> 另外对于这部分爷（先跪了 Orz），您们完全可以跳过第一阶段（Before Start &amp;&amp; Quick Start with a small Game），直接看后面的部分。</p><p>如果你想要快速上手写点什么东西，那么这本书将非常适合你！本书将会带你从一个小项目中逐步学习Rust，比较和其他语言的异同点。另外如果你学习过rust圣经，你可能会发现本书的知识点顺序和圣经差别很大，这是因为本书是以项目讲解为优先的，辅以知识点讲解，每个知识点我都会尽量放在一个比较合适的位置。</p><p>最后，祝各位能从中收获乐趣！</p><h1 id="Before-Start"><a href="#Before-Start" class="headerlink" title="Before Start"></a>Before Start</h1><h2 id="Install-Rust"><a href="#Install-Rust" class="headerlink" title="Install Rust"></a>Install Rust</h2><p>你可以通过Rust官网下载rustup-init，并在本机运行，根据提示安装。rustup会帮你安装好工具链和一些常用工具，比如cargo，rustc等，并且会添加到PATH，所以无须手动添加环境变量。</p><h2 id="Cargo-quick-start"><a href="#Cargo-quick-start" class="headerlink" title="Cargo quick-start"></a>Cargo quick-start</h2><p>cargo是rust自带的包管理器，拥有非常强大的功能，如果你熟练掌握cargo的使用你会很快爱上它~</p><p>本部分只介绍一些本人经常使用到的命令。</p><p><strong>help</strong>（应该一款正经的工具都该有help功能：D）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo help / cargo</span><br></pre></td></tr></table></figure><p><img src="/Rust-QuickStart/image-20231126143131252.png" alt="cargo_help"></p><blockquote><p>  如果你使用的cargo版本是2023-10-18之前的，可能没有颜色高亮</p></blockquote><p>你还可以用help命令来查看某个命令的详细信息，比如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo help new</span><br></pre></td></tr></table></figure><blockquote><p>  这里不放图了，因为实在太长了：(</p></blockquote><p><strong>new</strong></p><p>通过<code>cargo new</code>在当前文件夹下创建一个新的项目文件夹，里面的结构大概是</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\Rust<span class="literal">-test</span>&gt; cargo new hello</span><br><span class="line">     Created binary (application) `hello` package</span><br><span class="line"><span class="built_in">PS</span> D:\Rust<span class="literal">-test</span>&gt; <span class="built_in">cd</span> hello</span><br><span class="line"><span class="built_in">PS</span> D:\Rust<span class="literal">-test</span>\hello&gt; tree</span><br><span class="line">.</span><br><span class="line">├── Cargo.toml</span><br><span class="line">└── src</span><br><span class="line">    └── main.rs</span><br></pre></td></tr></table></figure><p>Cargo.toml里面是一些配置信息，比如name，version，author，dependence之类的。src文件夹存放你的rs源代码。</p><p><strong>build</strong></p><p>你可以通过build命令来编译当前项目，默认是debug，你可以通过<code>cargo build --release</code>指定为release，它会进行更加激进的优化，当然与之对应的是编译时间也会增加。如果你想要交叉编译到其他平台，比如windows编译到linux，你可以通过<code>cargo build --target x86_64-unknown-linux-musl</code>来指定平台。build命令生成的文件会放在target文件夹下，不同平台，debug，release是分开放的，所以无须担心会覆盖。</p><p><strong>run</strong></p><p><code>cargo run</code>实际上相当于执行了2个命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo build</span><br><span class="line">./target/debug/编译得到的可执行文件</span><br></pre></td></tr></table></figure><p>所以build命令的参数在run是可以用的。</p><p>使用new命令创建的项目中main.rs里默认内容是</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快去run一下你的第一个rust程序吧：D</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\Rust<span class="literal">-test</span>\hello&gt; cargo run</span><br><span class="line">   Compiling hello v0.<span class="number">1.0</span> (D:\Rust<span class="literal">-test</span>\hello)</span><br><span class="line">    Finished dev <span class="function">[<span class="type">unoptimized</span> + <span class="type">debuginfo</span>] <span class="title">target</span></span>(s) <span class="keyword">in</span> <span class="number">2.80</span>s</span><br><span class="line">     Running `target\debug\hello.exe`</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><p><strong>check</strong></p><p><code>cargo check</code>应该是使用频率最高的命令之一，无他，谁不愿意在写代码的时候有一个帮手能帮你检查代码呢。check命令就是会对你的rust代码做亿点点检查，如果你写的问题，还会贴心的给予你提示。</p><p>比如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: src/main.rs</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>check一下看看</p><p><img src="/Rust-QuickStart/image-20231126150439479.png" alt="check_a"></p><p>警告了你a这个变量没有使用，并且给了你提示，可以在变量名前面加一个下划线，这样编译器就不会警告这个值，当然这个值还是可以使用的。check的功能远不止这些，得要靠自己探索了：D</p><p><strong>fmt</strong></p><p>rust又一大杀器，除了可以帮你控制代码缩进，还可以帮你的代码书写风格变得更加rusty！</p><p>比如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: src/main.rs</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        std::io::<span class="title function_ invoke__">stdin</span>().<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> s).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">nums</span> = s.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">split_whitespace</span>().<span class="title function_ invoke__">map</span>(|x| x.parse::&lt;<span class="type">usize</span>&gt;().<span class="title function_ invoke__">unwrap</span>()).collect::&lt;<span class="type">Vec</span>&lt;<span class="type">usize</span>&gt;&gt;();</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>cargo fmt</code>后</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    std::io::<span class="title function_ invoke__">stdin</span>().<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> s).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">nums</span> = s</span><br><span class="line">        .<span class="title function_ invoke__">trim</span>()</span><br><span class="line">        .<span class="title function_ invoke__">split_whitespace</span>()</span><br><span class="line">        .<span class="title function_ invoke__">map</span>(|x| x.parse::&lt;<span class="type">usize</span>&gt;().<span class="title function_ invoke__">unwrap</span>())</span><br><span class="line">        .collect::&lt;<span class="type">Vec</span>&lt;<span class="type">usize</span>&gt;&gt;();</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是看的舒服多了，所以再也不用担心重构时一堆缩进问题的（bushi</p><p><strong>clippy</strong></p><p>check + fmt + clippy大概就是写代码过程中最常用的3件套了，写rs嘎嘎爽~</p><p>clippy类似于check，会对你的代码做一些常见错误的检查，同时也像命令描述中说的，improve your Rust code！</p><p>对上面那段代码分别运行check和clippy对比看看</p><p><img src="/Rust-QuickStart/image-20231126151919640.png" alt="check_and_clippy"></p><p>发现check没有发现语法问题，所以没有任何信息抛出；而clippy则是在语法层面提供了一个简单的优化方案，比如这里提示在<code>.split_whitespace()</code>前不需要使用<code>.trim()</code>， 后面其实还有一个提示说可以用clippy帮你改，不用手动改。我们运行一下<code>cargo clippy --fix --bin &#39;hello&#39; --allow-dirty</code>， 再回去看我们的源代码，果然<code>.trim()</code>已经被去除了。</p><p><strong>others</strong></p><p>还有一些不是那么的常用但是也很有用的命令，这里简单列一下：</p><ul><li><code>cargo add</code>  可以把指定的依赖添加到当前项目，比如<code>cargo add regex</code>，就可以把regex库添加到当前项目，使用cargo add会修改你的Cargo.toml文件，默认添加的是最新版本，也可以指定它的版本和feature啥的。当然你也可以直接修改cargo.toml文件来达到一样的效果</li><li><code>cargo remove</code> 于cargo add对应，就是把指定的依赖从当前项目去除</li><li><code>cargo --version</code> 查看cargo的版本，包括是stable还是nightly</li><li><code>cargo install</code> 看起来和add很像，不过install命令是安装二进制文件的，比如运行<code>cargo install tauri-cli</code>，然后你就可以使用<code>cargo tauri</code> 命令来构建你的tauri项目：D</li><li><code>cargo clean</code> 这是和build一对的，clean用来删除<code>./target</code>文件夹</li><li><code>cargo search</code> 可以在crates.io查找指定的crate，<del>记得科学上网</del>，要不然可能有亿点点慢：(</li><li><strong>……</strong></li></ul><h1 id="Quick-Start-with-a-small-Game"><a href="#Quick-Start-with-a-small-Game" class="headerlink" title="Quick Start with a small Game"></a>Quick Start with a small Game</h1><h2 id="Create-your-Tic-tac-toe"><a href="#Create-your-Tic-tac-toe" class="headerlink" title="Create your Tic-tac-toe"></a>Create your Tic-tac-toe</h2><p>通过一个小项目来快速上手可能是一个好方法。</p><p>先找一个你觉得比较舒服的地方，然后通过cargo来创建一个新项目，并且进入项目文件夹</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo new tic<span class="literal">-tac-toe</span></span><br><span class="line"><span class="built_in">cd</span> tic<span class="literal">-tac-toe</span></span><br></pre></td></tr></table></figure><p>现在你位于当前项目的根目录，你需要确保你的终端的当前目录在项目文件夹内，以便cargo可以定位到你的 <code>cargo.toml</code> 文件，除此之外在根目录还是在其他目录（比如<code>src/</code> 或者 <code>target/</code> 等）没有影响</p><p>好！现在你可以使用一个编辑器来打开main.rs文件准备编写项目了！</p><h2 id="Start-with-putting-something"><a href="#Start-with-putting-something" class="headerlink" title="Start with putting something"></a>Start with putting something</h2><p>哪怕是终端，交互也是必不可少的，几乎任何语言的教程教你写的第一句代码都十分默契的选择了 Hello, World! <del>（当然在这里我们不是要输出这句话就是了）</del></p><p>打开你的rs源文件，它应该位于<code>src/main.rs</code>， 会发现里面已经有内容了，那么如果仔细观察会发现使用的输出<del>函数</del> <code>println!()</code> 带有一个！，按理说<code>!</code>属于非法命名，在rs当然也一样，只是因为这个<code>!</code>不是包含在名字内的罢了，另外，println！不是一个函数，而是<strong>宏</strong></p><blockquote><p>  在rust里，带有！的就是宏了，比如 print!, println!, write!等，我们这里暂时先不谈宏，只要知道是用来输出的就行了</p></blockquote><p>把main函数里面清空，并写上这句话</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;Welcome to Rust Tic Tac Toe!&quot;</span>);</span><br></pre></td></tr></table></figure><p>记得运行一下确保能看到输出这句话：D</p><h2 id="Game-initialize"><a href="#Game-initialize" class="headerlink" title="Game initialize"></a>Game initialize</h2><p>细想一个井字棋需要些什么，嗯哼~，我想需要一个棋盘，两个玩家，当然还有配套的一系列判定系统。那我们就先看棋盘吧！</p><p>棋盘显然是一个3x3的，我们可以选择创建一个3x3的二维数组，或者长度为9的一维数组。这里为了更加符合直觉，我选择了前者。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">board</span>: [[<span class="type">char</span>; <span class="number">3</span>]; <span class="number">3</span>] = [[<span class="string">&#x27; &#x27;</span>; <span class="number">3</span>]; <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>在rust中你可以使用let来把一个值绑定到一个变量，如果你写过JavaScript，应该会比较亲切：D， 一个标准的用法就是<code>let 变量名: 类型 = 表达式;</code>， 这里由于rust有强大的类型推导系统，所以你可以不用写名类型，编译器会自动推导出来！所以虽然是强类型语言，但是也不用像C&#x2F;Cpp在创建变量时必须注明类型。</p><p>我们再来看看这个类型，是一个嵌套的数组，在rust里面数组是<strong>固定长度</strong>的，也就是说你在声明时<strong>必须显示的标注长度</strong>， 这就导致，哪怕数组内部每个元素的类型相同，长度不同的话也是不同类型，<strong>比如 <code>[u32; 3]</code> 和 <code>[u32; 4]</code>就是两个不同的类型！</strong></p><p>右边的表达式就和类型长得差不多，只要把数组里面的类型替换成对于类型的某个具体值就行了，像这里就是使用了空格来初始化这个数组。</p><blockquote><p>  不是所有类型都可以作为数组的元素，除非实现Copy trait， copy特征简单来说就是能够快速拷贝，性能开销非常的小，一般储存在栈上的数据都默认实现了Copy特征；而像String这种在堆上的数据，无法实现Copy特征（但是实现了Clone特征，可以用.clone()来复制一份），所以不能作为数组的元素，像 [String; 3]，这种类型是不被允许的</p></blockquote><p>那么地图就这么弄好了，我们每下一步，就只要把数组对应位置的char换成我们下的字符。</p><p>比如我们假定玩家使用 ‘X’ 和 ‘O’， X先手。我们先来测试一下吧</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">board[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span>;</span><br></pre></td></tr></table></figure><p>ok， 非常完美！直接cargo run 运行一手</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   Compiling playground v0.<span class="number">0.1</span> (/playground)</span><br><span class="line">error[<span class="type">E0594</span>]: cannot assign to `board[<span class="type">_</span>][<span class="type">_</span>]`, as `board` is not declared as mutable</span><br><span class="line"> <span class="literal">--</span>&gt; src/main.rs:<span class="number">3</span>:<span class="number">5</span></span><br><span class="line">  |</span><br><span class="line"><span class="number">3</span> |     board[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">  |     ^^^^^^^^^^^^^^^^^ cannot assign</span><br><span class="line">  |</span><br><span class="line">help: consider changing this to be mutable</span><br><span class="line">  |</span><br><span class="line"><span class="number">2</span> |     let mut board: [[<span class="built_in">char</span>; <span class="number">3</span>]; <span class="number">3</span>] = [[<span class="string">&#x27; &#x27;</span>; <span class="number">3</span>]; <span class="number">3</span>];</span><br><span class="line">  |         +++</span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> more information about this error, <span class="keyword">try</span> `rustc <span class="literal">--explain</span> E0594`.</span><br><span class="line">error: could not compile `playground` (bin <span class="string">&quot;playground&quot;</span>) due to previous error</span><br></pre></td></tr></table></figure><p>Oh no! 报错了，编译器提醒我们board没有被声明为可变，所以不能再次分配值给<code>board[_][_]</code>， 当然还贴心的给你了提示，在board前面加一个mut关键字即可</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">board</span>: [[<span class="type">char</span>; <span class="number">3</span>]; <span class="number">3</span>] = [[<span class="string">&#x27; &#x27;</span>; <span class="number">3</span>]; <span class="number">3</span>];</span><br><span class="line">board[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span>;</span><br></pre></td></tr></table></figure><p>运行一下，编译通过！</p><blockquote><p>  在rust中用let来声明一个变量默认是不可变的，如果你想要能在后面改变它的值，你必须用 mut 关键字来显示的声明为一个可变变量，当然你也可以重新用let来绑定，比如你可以像这样：</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = a + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></blockquote><p>然后我们可以加一个current_player来记录当前的玩家，和一个input来储存你每次的输入，目前的main应该大概是这样的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Welcome to Rust Tic Tac Toe!&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">board</span> = [[<span class="string">&#x27; &#x27;</span>; <span class="number">3</span>]; <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">current_player</span> = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">input</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们调用了String类的new方法来申请了一块内存来储存我们的字符串，当然现在还没有读入东西，还是空的。</p><p>ok，记得运行确保你的代码是正确的</p><h2 id="Game-Update"><a href="#Game-Update" class="headerlink" title="Game Update"></a>Game Update</h2><p>接下来就要构建我们游戏的主要逻辑了，我们肯定要放在一个循环里面，然后当有人获胜，或者棋盘被填满（平局）就退出游戏。那么我们的每次循环要做些什么呢？</p><p>首先我们肯定要输出我们的棋盘，不可能盲下吧:cry:， 我们不妨创建一个函数来在每次循环进行调用。</p><p>我们先创建一个循环，这里我比较倾向使用 loop，当然你也可以用while true（如果使用while true，编译器应该会给你一个warning，并建议你改成loop）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loop支持常用的流程控制如break等，这跟大部分语言差不多，不做赘述。</p><h3 id="Definite-a-function-to-put-chessboard"><a href="#Definite-a-function-to-put-chessboard" class="headerlink" title="Definite a function to put chessboard"></a>Definite a function to put chessboard</h3><p>如果仔细观察过main函数，应该可以猜得出来声明一个函数要使用 <code>fn</code> 关键字，其具体的格式是 <code>fn 函数名&lt;特征和生命周期&gt;(参数名1: 参数类型1, ...) -&gt; 返回值类型 &#123;&#125;</code> ， 特征和生命周期先不用管后面再说，如果不注明特征约束或者生命周期，尖括号的部分是可以省略的，就像main一样函数名后面直接就是圆括号了。那我们就照猫画虎的先写一个函数看看吧！</p><blockquote><p>  注意函数的类型标注不能省略</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">print_board</span>(board: &amp;[[<span class="type">char</span>; <span class="number">3</span>]; <span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们只需要输出，所以可以不用返回值，当然实际上是有返回值的，这个函数返回的是一个空元组，或者说是一个单元类型，它长这样 <code>()</code> ， 它可以忽略掉，当然如果你写上 <code>-&gt; () </code> 也不会错。</p><p>这个函数只有一个参数board，类型是一个 3x3的char数组的引用，一般来说，我们定义一个函数如果要传入一个复杂类型的参数，我们一般采用传入一个引用的形式，这会涉及到所有权的知识。</p><blockquote><p>  <strong>所有权和借用</strong>是Rust的一个非常重要的内容。对于内存管理，相信大家都很熟悉GC（比如Java，GO）和手动管理内存的分配和释放（比如C&#x2F;Cpp），而所有权是不同与前2种流派的第三种流派，它会在编译期就根据一系列规则进行检查，因此对于运行期不会有任何性能上的损失。</p><p>  这里因为篇幅关系不便详谈，简单来说所有权有以下几条规则：</p><p>  1）Rust中的每个值都被一个变量所拥有，该变量被称为值的所有者；</p><p>  2）一个值同时只能被一个变量所拥有；</p><p>  3）当所有者（变量）离开作用域范围时，这个值将被丢弃（drop）</p><p>  以String为例，它是被分配到堆上的数据，所以没有实现Copy特征，那么如果我执行了如下代码</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Test_string&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = s1;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s2);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s1);</span><br></pre></td></tr></table></figure><p>  这段代码会报错，因为let s2 &#x3D; s1 的时候，s1的值的所有权被转移给了s2了，所以后面不能调用s1了</p><p>  这里可以把第二行改成 <code>let s2 = &amp;s1;</code> ，这样s2就是s1的值的一个引用（就相当于你借来用用，但是不具有它的所有权）就可以正常运行；或者改为 <code>let s2 = s1.clone();</code>， String实现了clone特征，所以可以调用clone方法来复制一份，注意这会在堆上再申请一块内存，所以使用clone会有一点的性能开销。但是如果我们把这段代码改成：</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="number">0x114514</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = s1;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:x&#125;&quot;</span>, s2);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:x&#125;&quot;</span>, s1);</span><br></pre></td></tr></table></figure><p>  运行发现可以正常输出两行114514，这是因为整型是基本类型，默认实现了Copy特征，可以进行快速拷贝，let s2的时候就是把s1的值拷贝了一份然后在栈上的另一个地方开一块空间存放0x114514作为s2，和上一个例子相比较发现copy和clone都是把值复制了一遍在另外找一块空间来存放，区别就是一个在堆上，一个在栈上。</p></blockquote><p>好，话说回来，我们该写这个函数的具体逻辑了。其实只要简单的遍历以下board的每个值就可以吧，当然为了好看，我们可以加一个边框，像这样：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">print_board</span>(board: &amp;[[<span class="type">char</span>; <span class="number">3</span>]; <span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;+---+---+---+&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> board &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;| &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">col</span> <span class="keyword">in</span> row &#123;</span><br><span class="line">            <span class="built_in">print!</span>(<span class="string">&quot;&#123;&#125; | &quot;</span>, col);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;\n+---+---+---+&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在main里面添加 <code>print_board(&amp;board);</code>， 运行一下，输出的应该是这样：（我在<a href="https://play.rust-lang.org/%E8%BF%90%E8%A1%8C%E7%9A%84%EF%BC%89">https://play.rust-lang.org/运行的）</a></p><p><img src="/Rust-QuickStart/image-20231128185424273.png" alt="board"></p><p>这里我用了两个for来遍历数组，rust的for是类似与python这类语言的for，是遍历一个迭代器的值，而不是简单的遍历索引。</p><blockquote><p>  当然如果想要像c一样或者像python的for i in range(n)这种当然也可以，像这样就可以。</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">idx</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>  要注意0..10类似python的range是左取又不取的，如果你想要从0遍历到10，可以 0..11, 或者 0..&#x3D;10</p></blockquote><p><strong>注意for不支持给迭代的变量标注类型</strong>，也就是说比如 <code>for row: &amp;[char; 3] in board &#123;...&#125;</code> 这种是不被允许的！当然也无须担心，因为编译器会自动推导出类型！</p><h3 id="Receive-input-and-Process-it"><a href="#Receive-input-and-Process-it" class="headerlink" title="Receive input and Process it"></a>Receive input and Process it</h3><p>你可能期待rust的输入可以像c&#x2F;cpp的scanf&#x2F;fread，或者python的input()一样，可以直接调用一个函数来获取终端输入。但是很遗憾，rust并不直接存在这么一个函数，或者说，它被封装在Stdin类下，比如最常见的是<code>.read_line()</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">stdin</span> = std::io::<span class="title function_ invoke__">stdin</span>();</span><br><span class="line">stdin.<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> input).<span class="title function_ invoke__">unwrap</span>();</span><br></pre></td></tr></table></figure><p>这样就会从终端中读取一行（包括换行符）拼接在input结尾处，所以在循环中我们必须在每次开头都清空一下input中的内容。你需要在read_line的上一行插入：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input.<span class="title function_ invoke__">clear</span>();</span><br></pre></td></tr></table></figure><p>需要注意：clear和read_line都是改变input的值，所以我们需要在声明input的时候添加mut关键字使其可变，而 <code>&amp;mut input</code> 是input的可变引用，它也是一种引用，不具有所有权，但是具有其使用权和更改权限，所以可以对input本身进行更改。</p><blockquote><p>  <strong>一个变量最多只能有一个可变引用，并且有可变引用时，不允许存在不可变引用，也不能通过所有者来访问值</strong></p><p>  来看这段代码</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">b</span> = &amp;<span class="keyword">mut</span> a;</span><br><span class="line">*b += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, a, b);</span><br></pre></td></tr></table></figure><p>  运行后果不其然报错了</p>  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">error[<span class="type">E0502</span>]: cannot borrow `a` as immutable because it is also borrowed as mutable</span><br><span class="line"> <span class="literal">--</span>&gt; src/main.rs:<span class="number">5</span>:<span class="number">23</span></span><br><span class="line">  |</span><br><span class="line"><span class="number">3</span> |     let b = &amp;mut a;</span><br><span class="line">  |             <span class="literal">------</span> mutable borrow occurs here</span><br><span class="line"><span class="number">4</span> |     *b += <span class="number">1</span>;</span><br><span class="line"><span class="number">5</span> |     println!(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, a, b);</span><br><span class="line">  |                       ^  - mutable borrow later used here</span><br><span class="line">  |                       |</span><br><span class="line">  |                       immutable borrow occurs here</span><br><span class="line">  |</span><br><span class="line">  = note: this error originates <span class="keyword">in</span> the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (<span class="keyword">in</span> Nightly builds, run with <span class="literal">-Z</span> macro<span class="literal">-backtrace</span> <span class="keyword">for</span> more info)</span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> more information about this error, <span class="keyword">try</span> `rustc <span class="literal">--explain</span> E0502`.</span><br></pre></td></tr></table></figure><p>  可以这么来想，A有一个PS，B借过来玩（可变引用），B在玩的过程中（B的作用范围没有结束），A（所有者）和其他人（其他借用）显然不能借走吧，除非B还回去（B的作用结束），这样就回到A手上了，A又可以继续玩（A可以访问或修改值了）</p><p>  如果把上面那段改成这样就Ok了</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">b</span> = &amp;<span class="keyword">mut</span> a;<span class="comment">// 可变借用 b 作用域开始</span></span><br><span class="line">*b += <span class="number">1</span>; <span class="comment">/* ps: *是解引用，因为b是&amp;i32, 没有实现+=，所以要解引用对值本身+= */</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, b);<span class="comment">// b 作用域结束，因为后面都没有再使用b了</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, a);<span class="comment">// b 作用结束后值的使用权自动还给a，所以a可以输出</span></span><br></pre></td></tr></table></figure><p>  建议自己写写尝试一下：D</p></blockquote><p>那么read_line后面的 <code>.unwrap()</code> 是干嘛的呢，你可能会有这种疑问。</p><p>其实功能就像字面意思那样，“拆开”，这里因为read_line，返回的是一个Result，而result需要手动处理，所以这里就用unwrap来取出里面的值</p><blockquote><p>  Result是一个枚举类型，定义是这样的</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Result</span>&lt;T, E&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(T),</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(E),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这里T，E都是泛型，一般T是一个你期望的值，E是一个错误。当unwrap遇到Ok时就会正常取出值，而如果是Err，就会<code>panic!</code> ，然后你就发现程序崩溃并且输出了一堆奇奇怪怪的东西。</p><p>  一般返回result就是让你自己来错误处理，常常会配合match之类的。在后面讲错误处理的时候再说：D</p></blockquote><p>哦，差点忘记了，我们需要些什么数据好像还没说。不如输入的格式就是 <code>row col</code>吧。所以我们在输入之前加上一条说明。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">print_board</span>(&amp;board);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;Please input your move: (fmt: row col)&quot;</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>然后我们得要把行列数据提取出来，我们可以使用split_whitespace，它会去掉空格、tab、回车之类的字符，并且会由此把其他可见字符字串隔开，返回的是一个迭代器。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">input</span> = input</span><br><span class="line">.<span class="title function_ invoke__">split_whitespace</span>()</span><br><span class="line">.<span class="title function_ invoke__">map</span>(|x| x.parse::&lt;<span class="type">usize</span>&gt;().<span class="title function_ invoke__">unwrap</span>())</span><br><span class="line">.collect::&lt;<span class="type">Vec</span>&lt;<span class="type">usize</span>&gt;&gt;();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">row</span> = input[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">col</span> = input[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><blockquote><p>  map其实功能就是你们印象的那个map，在rust里，只要实现了迭代器特征的类型就可以调用map方法，map接收一个闭包作为参数，如果你用过一些函数式语言可能会比较熟悉 “闭包” 这个概念，其实它就是类似lambda的东西，其具体的形式是接近Ruby语言的闭包的。</p><p>  <code>||</code> 里面的是入参，闭包会自动把捕获的值绑定到里面的变量，你可以标注类型，但是同样也没必要这样做，因为编译器会自动推导！<code>||</code> 后面是一个表达式，这也意味着，你可以在 {} 中写多行代码，而不用像python的lambda一样只能想办法把表达式压缩到一行</p><p>  然后里面的入参 x 是一个&amp;str类型，这里通过parse()方法解析成usize类型（通过 <code>::&lt;&gt;</code> 的格式来指定），返回的也是Result（因为可能解析失败），然后unwrap解包。</p><p>  再通过collect方法把map返回的迭代器收集成一个Vec（是不定长的数组，所以创建时不用像数组一样标注长度）</p></blockquote><h3 id="Move"><a href="#Move" class="headerlink" title="Move"></a>Move</h3><p>接下来就要落子了，我们定义一个on_move，返回值是一个bool，来表示是否落子成功。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">on_move</span>(board: &amp;<span class="keyword">mut</span> [[<span class="type">char</span>; <span class="number">3</span>]; <span class="number">3</span>], row: <span class="type">usize</span>, col: <span class="type">usize</span>, symbol: <span class="type">char</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">// symbol 是当前玩家对应的符号</span></span><br><span class="line">    <span class="comment">// 先检验范围，保证只能是0, 1, 2</span></span><br><span class="line">    <span class="comment">// 超出棋盘范围或者该处已经落子了，就代表这一步不成功</span></span><br><span class="line">    <span class="keyword">if</span> row &gt;= <span class="number">3</span> || col &gt;= <span class="number">3</span> || board[row][col] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        board[row][col] = symbol;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  这里得说明一下，每个作用域的最后一个表达式就会作为返回值，这里on_move函数只有一个表达式（最后一句不要有分号，有分号就是语句，语句没有返回值，或者准确来说语句返回一个单元<code>()</code> )，就是if {} else {}，然后if和else里面分别有false和true作为返回值。</p><p>  <strong>注意每个语句块只有最后一行才能不写分号，像是if， for，函数，或者仅仅只是{} 包裹的内容就是一个语句块。当然语句块也是一个语句</strong></p><p>  而return往往用于一个函数的中间，会直接跳出这个函数并返回值。</p><p>  这样的好处是不用写return（PS：本人比较倾向于不写return，一般不是迫不得已我不会写return）</p></blockquote><p>然后我们得处理一下on_move的结果</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> !<span class="title function_ invoke__">on_move</span>(&amp;<span class="keyword">mut</span> board, row, col, current_player) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Invalid move!&quot;</span>);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后每个人落子成功就轮到下一个玩家，我们写一个next_player来轮换玩家，你可能会想写个if，else if好了，不过这里我们用match来更优雅的实现</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">if</span> !<span class="title function_ invoke__">on_move</span>(...) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        current_player = <span class="title function_ invoke__">next_player</span>(current_player);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">next_player</span>(symbol: <span class="type">char</span>) <span class="punctuation">-&gt;</span> <span class="type">char</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> symbol &#123;</span><br><span class="line">        <span class="string">&#x27;X&#x27;</span> =&gt; <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;O&#x27;</span> =&gt; <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">        _ =&gt; <span class="built_in">unreachable!</span>(),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能跟C的switch很像，不过match的强大还远远不止这些，match有个大杀器就是模式匹配（没错，又是从函数式语言借鉴的：D），会在后续内容细嗦。</p><blockquote><p>  顺带一提，在Rust里面，<strong>无论是函数还是全局变量，或者是结构体等的定义，只要有定义就行了，不需要太关注位置，也就是说，你不必像C&#x2F;Cpp一样得先在main前面声明某个函数，才能在main后面写函数的具体实现。</strong></p></blockquote><h3 id="Win-or-Draw"><a href="#Win-or-Draw" class="headerlink" title="Win or Draw"></a>Win or Draw</h3><p>现在距离一个功能完备的游戏只差胜负判断了，我们得写一个is_win函数来再每次落子后判断是否有人胜利（win），然后还得写一个函数is_full来判断棋盘时候已经下满了，也就意味着平局（draw），当然这个函数得放在is_win后面调用：D， 最后在loop里面调用即可</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">if</span> <span class="title function_ invoke__">is_win</span>(&amp;board) &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; win!&quot;</span>, current_player);</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">// 或者 return;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="title function_ invoke__">is_full</span>(&amp;board) &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Draw!&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保证上一步下完既没有人win，也没有下满棋盘，才能轮到下一手</span></span><br><span class="line">        current_player = <span class="title function_ invoke__">next_player</span>(current_player);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">is_win</span>(board: &amp;[[<span class="type">char</span>; <span class="number">3</span>]; <span class="number">3</span>]) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">// 行</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> board &#123;</span><br><span class="line">        <span class="keyword">if</span> row[<span class="number">0</span>] == row[<span class="number">1</span>] &amp;&amp; row[<span class="number">1</span>] == row[<span class="number">2</span>] &amp;&amp; row[<span class="number">0</span>] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 列</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">col</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> board[<span class="number">0</span>][col] == board[<span class="number">1</span>][col] &amp;&amp; board[<span class="number">1</span>][col] == board[<span class="number">2</span>][col] &amp;&amp; board[<span class="number">0</span>][col] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对角线</span></span><br><span class="line">    <span class="keyword">if</span> board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">2</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">0</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">2</span>] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">is_full</span>(board: &amp;[[<span class="type">char</span>; <span class="number">3</span>]; <span class="number">3</span>]) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> board &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">col</span> <span class="keyword">in</span> row &#123;</span><br><span class="line">            <span class="keyword">if</span> *col == <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok，基本的功能已经基本实现了，可以运行玩一玩。这节内容其实没有涉及多少Rust真正深入的部分，上面遗留的很多问题<del>（挖的很多坑）</del>，会在下一节解答，下一节也会逐渐带你认识rust一些真正吸引人的特性。</p><h1 id="Improve-your-Rust-code"><a href="#Improve-your-Rust-code" class="headerlink" title="Improve your Rust code"></a>Improve your Rust code</h1><p>相信大佬们看了上面的很不尽兴吧，<del>我想要看Rust独特的特性（震声</del>，别急，本节会给出一个答复。</p><h2 id="使用struct封装"><a href="#使用struct封装" class="headerlink" title="使用struct封装"></a>使用struct封装</h2><p>我们可以定义一个Game结构体，来记录一些游戏属性。</p><p>在rust中，定义结构体和C是类似的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    board: [<span class="type">char</span>; <span class="number">9</span>],</span><br><span class="line">    players: [<span class="type">char</span>; <span class="number">2</span>],</span><br><span class="line">    current_player: <span class="type">usize</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在原来的版本中，我们是使用X和O来代替玩家，但是这样太草率了，很多读者肯定不会买账的，所以这里我们定义一个Player结构体，储存名字和对应的符号</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    symbol: <span class="type">char</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然前面的Game的players的类型也要做相应的修改。</p><p>那么我们怎么封装逻辑呢，这里我们是可以像其他语言的class一样为创建的结构体定义一组方法的。我们可以使用impl （implement）关键字为一个struct定义一组或多组实现</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> Game &#123;</span><br><span class="line">        Game &#123;</span><br><span class="line">            board: [<span class="string">&#x27; &#x27;</span>; <span class="number">9</span>],</span><br><span class="line">            players: [Player::<span class="title function_ invoke__">new</span>(); <span class="number">2</span>],</span><br><span class="line">            current_turn: <span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> Player &#123;</span><br><span class="line">        Player &#123;</span><br><span class="line">            name: <span class="string">&quot;Test Player&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">            symbol: <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main里创建一个Game试试，</p><blockquote><p>  会发现爆了一个错误</p>  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Compiling playground v0.<span class="number">0.1</span> (/playground)</span><br><span class="line">error[<span class="type">E0277</span>]: the trait bound `Player: <span class="built_in">Copy</span>` is not satisfied</span><br><span class="line">  <span class="literal">--</span>&gt; src/main.rs:<span class="number">21</span>:<span class="number">23</span></span><br><span class="line">   |</span><br><span class="line"><span class="number">21</span> |             players: [<span class="type">Player</span>::<span class="type">new</span>(); <span class="number">2</span>],</span><br><span class="line">   |                       ^^^^^^^^^^^^^ the trait `Copy` is not implemented <span class="keyword">for</span> `Player`</span><br><span class="line">   |</span><br><span class="line">   = note: the `Copy` trait is required because this value will be copied <span class="keyword">for</span> each element of the array</span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> more information about this error, <span class="keyword">try</span> `rustc <span class="literal">--explain</span> E0277`.</span><br><span class="line">error: could not compile `playground` (bin <span class="string">&quot;playground&quot;</span>) due to previous error</span><br></pre></td></tr></table></figure><p>  这个在前面说过，是由于没有实现Copy特征，我们可以试试通过派生宏来快速实现一个特征</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Copy)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Player</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  发现还是报错了</p>  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Compiling playground v0.<span class="number">0.1</span> (/playground)</span><br><span class="line">error[<span class="type">E0204</span>]: the trait `Copy` cannot be implemented <span class="keyword">for</span> this <span class="built_in">type</span></span><br><span class="line">  <span class="literal">--</span>&gt; src/main.rs:<span class="number">11</span>:<span class="number">10</span></span><br><span class="line">   |</span><br><span class="line"><span class="number">11</span> | <span class="comment">#[derive(Copy)]</span></span><br><span class="line">   |          ^^^^</span><br><span class="line"><span class="number">12</span> | struct Player &#123;</span><br><span class="line"><span class="number">13</span> |     name: String,</span><br><span class="line">   |     <span class="literal">------------</span> this field does not implement `Copy`</span><br><span class="line">   |</span><br><span class="line">   = note: this error originates <span class="keyword">in</span> the derive macro `Copy` (<span class="keyword">in</span> Nightly builds, run with <span class="literal">-Z</span> macro<span class="literal">-backtrace</span> <span class="keyword">for</span> more info)</span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> more information about this error, <span class="keyword">try</span> `rustc <span class="literal">--explain</span> E0204`.</span><br><span class="line">error: could not compile `playground` (bin <span class="string">&quot;playground&quot;</span>) due to previous error</span><br></pre></td></tr></table></figure><p>  由于Player里面包含了String，所以不能为Player实现Copy特征，这是因为数据在堆上，不能快速拷贝，所以无法实现Copy，这也意味着我们不能用这个[xxx; n] 的格式来快速生成了，其实这是一个语法糖，当数据长度比较大，用这个就很方便，当然我们只能采用最普通的方法： <code>[Player::new(), Player::new()]</code>， 就是有几个就写几遍，或者也可以创建一个空的Vec后面在push两个Player进去。</p></blockquote><p>改好后我们可以输出一下Game的信息看看。</p><p>如果你习惯写C，可能会想要依次访问每个成员，再输出，在rust里当然可以，不过更加优雅的方式是为该结构体实现一个Debug特征</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面的#[derive()]是一个派生宏，可以快速实现某些特征，当然如果想要自定义效果，你也可以自己手动实现该特征。通过派生宏来实现的一个条件是必须每个成员都实现了该特征，因为Game里面有成员的类型包含了Player，所以我们得给Player也实现Debug，由于Player里面的String和char是默认实现了该特征，所以Player才能实现Debug，像前面Copy特征正是由于String在堆上，不能实现Copy，导致Player也不能实现Copy特征。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">game</span> = Game::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, &amp;game);</span><br><span class="line">    <span class="comment">// 或者选择更好的输出方式</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>, &amp;game);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Game &#123; board: [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], players: [<span class="type">Player</span> &#123; <span class="type">name</span>: <span class="string">&quot;Test Player&quot;</span>, <span class="type">symbol</span>: <span class="string">&#x27;X&#x27;</span> &#125;, <span class="type">Player</span> &#123; <span class="type">name</span>: <span class="string">&quot;Test Player&quot;</span>, <span class="type">symbol</span>: <span class="string">&#x27;X&#x27;</span> &#125;], current_player: <span class="number">0</span> &#125;</span><br><span class="line">Game &#123;</span><br><span class="line">    board: [</span><br><span class="line">        <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    players: [</span><br><span class="line">        <span class="type">Player</span> &#123;</span><br><span class="line">            <span class="type">name</span>: <span class="string">&quot;Test Player&quot;</span>,</span><br><span class="line">            <span class="type">symbol</span>: <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="type">Player</span> &#123;</span><br><span class="line">            <span class="type">name</span>: <span class="string">&quot;Test Player&quot;</span>,</span><br><span class="line">            <span class="type">symbol</span>: <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    current_player: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体选择哪种取决你自己实际需求，如果都不合你胃口，就可以自己实现一个Debug特征</p><h2 id="自定义Debug样式"><a href="#自定义Debug样式" class="headerlink" title="自定义Debug样式"></a>自定义Debug样式</h2><p>如果学过面向对象，那么肯定知道继承这个概念，但是一上手可能很容易写出屎山，而且不好维护（如果你对某个基类做了修改的话），而Rust选择抛弃了继承这一个糟糕的特性，选择另一种更加优雅的方式来实现类的多态，也就是trait。</p><p>Trait（特征）是为一些类定义的一组行为，如果要一个struct使用某个特征的功能，只要为它实现该特征即可，一个struct可以实现多个特征。来看看例子，我们来为Player和Game实现自定义的Debug</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::&#123;<span class="built_in">Debug</span>, Formatter, <span class="type">Result</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Debug</span> <span class="keyword">for</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> Formatter&lt;<span class="symbol">&#x27;_</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">&quot;Player &#123;&#125; with &#123;&#125;&quot;</span>, &amp;<span class="keyword">self</span>.name, &amp;<span class="keyword">self</span>.symbol)</span><br><span class="line">        <span class="comment">// 注意不要带分号，因为要返回Result，带分号就返回()了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Debug</span> <span class="keyword">for</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> Formatter&lt;<span class="symbol">&#x27;_</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Result</span> &#123;</span><br><span class="line">        f.<span class="title function_ invoke__">debug_struct</span>(<span class="string">&quot;Game&quot;</span>)</span><br><span class="line">            .<span class="title function_ invoke__">field</span>(<span class="string">&quot;board&quot;</span>, &amp;<span class="built_in">format!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, &amp;<span class="keyword">self</span>.board) <span class="keyword">as</span> &amp;<span class="keyword">dyn</span> <span class="built_in">Debug</span>)</span><br><span class="line">            .<span class="title function_ invoke__">field</span>(<span class="string">&quot;players&quot;</span>, &amp;<span class="keyword">self</span>.players)</span><br><span class="line">            .<span class="title function_ invoke__">field</span>(<span class="string">&quot;current_player&quot;</span>, &amp;<span class="keyword">self</span>.current_player)</span><br><span class="line">            .<span class="title function_ invoke__">finish</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再运行看看就发先变成自定义的了，记得去掉<code>#[derive(Debug)]</code>，否则会提示你实现Debug特征冲突了</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Game &#123; board: <span class="string">&quot;[&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;]&quot;</span>, players: [<span class="type">Player</span> <span class="type">Test</span> <span class="type">Player</span> <span class="type">with</span> <span class="type">X</span>, <span class="type">Player</span> <span class="type">Test</span> <span class="type">Player</span> <span class="type">with</span> <span class="type">X</span>], current_player: <span class="number">0</span> &#125;</span><br><span class="line">Game &#123;</span><br><span class="line">    board: <span class="string">&quot;[&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;]&quot;</span>,</span><br><span class="line">    players: [</span><br><span class="line">        <span class="type">Player</span> <span class="type">Test</span> <span class="type">Player</span> <span class="type">with</span> <span class="type">X</span>,</span><br><span class="line">        <span class="type">Player</span> <span class="type">Test</span> <span class="type">Player</span> <span class="type">with</span> <span class="type">X</span>,</span><br><span class="line">    ],</span><br><span class="line">    current_player: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Option"><a href="#使用Option" class="headerlink" title="使用Option"></a>使用Option</h2><p>我们不妨把函数迁移到我们定义的struct吧，但这里其实会发现：我们很多函数都是直接对与board的操作，那么这里我们如果直接为Game实现这些功能，就会发现非常的丑陋，尤其是is_win，is_full这些只用到了board的函数。那么我们为什么不定义一个Board，而把这部分逻辑封装到board里面呢？</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Board</span> &#123;</span><br><span class="line">    cells: [....]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次我们就不按照之前的使用char数组了，我们使用char数组时是用空格作为初始值的，但是这样其实并不好<del>（如果我想用空格作为玩家的符号呢）</del>。在这种情况下，Option是一个很好的解决办法！Option和Result的定义很像</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Option</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(T),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很好理解吧，要么有值（Some），要么是空（None）。这样设计的好处就是避免了像C一样0和NULL冲突。你只需要吧None作为一个仅代表空这个意义的东西。</p><p>那么我们来改写一下board</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Board</span> &#123;</span><br><span class="line">    cells: [<span class="type">Option</span>&lt;<span class="type">char</span>&gt;; <span class="number">9</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Board</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> Board &#123;</span><br><span class="line">        Board &#123; cells: [<span class="literal">None</span>; <span class="number">9</span>] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// other function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  因为Option是被放在了prelude模块中的，prelude会放一下比较常用的东西，可以不需要导入就可以使用。这里当然也可以使用<code>Option::None</code></p></blockquote><p>那么该如何处理这些值呢？可以用前面介绍的 <code>.unwrap()</code>，来取出里面的值，但是注意！如果遇到None就会错误（因为None代表空的意义，也就是<strong>没有值</strong>，所以当然unwrap不了），然后程序崩溃。所以前面我也说过<strong>unwrap适合你几乎能确定不会报错的情况下</strong>。</p><h2 id="用模式匹配来处理异常"><a href="#用模式匹配来处理异常" class="headerlink" title="用模式匹配来处理异常"></a>用模式匹配来处理异常</h2><p>比如要实现输出board，那么就不可避免的要处理Option，那么就可以像这样</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Board</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;+---+---+---+&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">            <span class="built_in">print!</span>(<span class="string">&quot;| &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">col</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">cell</span> = <span class="keyword">self</span>.cells[row * <span class="number">3</span> + col];</span><br><span class="line">                <span class="keyword">match</span> cell &#123;</span><br><span class="line">                    <span class="title function_ invoke__">Some</span>(value) =&gt; <span class="built_in">print!</span>(<span class="string">&quot;&#123;&#125; | &quot;</span>, value),</span><br><span class="line">                    <span class="literal">None</span> =&gt; <span class="built_in">print!</span>(<span class="string">&quot;  | &quot;</span>),</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">println!</span>();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;+---+---+---+&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>match会自动匹配到格式一样的模式，如果你是Some，就会匹配到第一种，如果是None就会匹配到第二个。要注意：<strong>match必须穷尽所有可能</strong>， 如果你想不到更多的可能，你可以匹配到 <code>_</code>， 这代表除了上面的模式以外的全部模式（必须放在最后）。</p><p>来回去看我们的前面写的读入终端内容的那一行 <code>stdin.read_line(&amp;mut input).unwrap();</code>， 我们如果不能确保是否一定没有问题，我们就可以用match来手动处理，但是这里我们介绍另一种常用的模式匹配 <code>if let</code></p><p>因为如果是正常的话我们不需要做额外的处理，所有我们只需要匹配Result::Err这一种模式就可以了<strong>（只要匹配一种或者少量的模式，那么if let就非常适合）</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为让程序自己出现异常来panic的话，会输出很多额外的东西（给开发者看的，但是显然不是用户想看到的）</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Err</span>(e) = stdin.<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> input) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;[Error]: &#123;&#125;&quot;</span>, e);</span><br><span class="line">    std::process::<span class="title function_ invoke__">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Move-移动-and-Move-落子"><a href="#Move-移动-and-Move-落子" class="headerlink" title="Move(移动) and Move(落子)"></a>Move(移动) and Move(落子)</h2><h3 id="简单的与C互操作"><a href="#简单的与C互操作" class="headerlink" title="简单的与C互操作"></a>简单的与C互操作</h3><p>如果只是像原来那样输入坐标的话也太难受了，这一点也不游戏！！！相信读者大爹们肯定不会买账的。所以我们来实现一下通过键盘的WASD来选择棋盘的落点（这样也不用担心输入坐标的越界问题），SPACE来确定落子。</p><p>也就是说我们需要每次按键后，程序都能及时反应。但是Rust没有直接提供一个类似于C的getch方法，当然还有第三方库可以实现按键监控，不过这里为了介绍与C互操作所以选择了调用C API。</p><p>我们需要使用extern关键字</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>我们需要一个getch用来接收按键，和一个kbhit监测是否有按键事件。在extern中定义接口</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">_getch</span>() <span class="punctuation">-&gt;</span> <span class="type">u8</span>;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">_kbhit</span>() <span class="punctuation">-&gt;</span> <span class="type">bool</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以封装一个按键监控的函数了，要注意ffi是不安全的，所以代码必须用unsafe包裹，（或者把函数声明为unsafe，但是这会导致每次调用都得使用unsafe）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">getch</span>(on_block: <span class="type">bool</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">u8</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="comment">// 设置了一个on_block来指示是否阻塞，true就会等待按下</span></span><br><span class="line">        <span class="keyword">if</span> on_block || _kbhit() &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(_getch())</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把原来的main里面的逻辑迁移到Game的run方法里，为了提供一个更良好的游戏环境，你做了一个决定是清空屏幕！</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::process::Command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="comment">// other fn</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">run</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;you can use WASD to move the cursor, and press &lt;SPACE&gt; to place the symbol.&quot;</span>);</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;We will clear the screen before start.\nAre you sure to start? (Y/n): &quot;</span>);</span><br><span class="line">        std::io::<span class="title function_ invoke__">stdout</span>().<span class="title function_ invoke__">flush</span>().<span class="title function_ invoke__">unwrap</span>();<span class="comment">// 刷新缓冲区，否则会在输入后才输入print!里面的东西</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">opt</span> = <span class="title function_ invoke__">getch</span>(<span class="literal">true</span>);<span class="comment">// 等待输入</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(opt) = opt &#123;</span><br><span class="line">            <span class="keyword">if</span> !matches!(opt <span class="keyword">as</span> <span class="type">char</span>, <span class="string">&#x27;Y&#x27;</span>|<span class="string">&#x27;y&#x27;</span>|<span class="string">&#x27;\r&#x27;</span>|<span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Command::<span class="title function_ invoke__">new</span>(<span class="string">&quot;Powershell&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">args</span>(&amp;[<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;cls&quot;</span>])</span><br><span class="line">        .<span class="title function_ invoke__">status</span>()</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;failed to clear screen&quot;</span>);</span><br><span class="line">        <span class="keyword">loop</span> &#123;</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后处理输入，给Game添加一个<code>current_pos: usize</code>记录当前位置（记得改new）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in loop</span></span><br><span class="line"><span class="keyword">self</span>.board.<span class="title function_ invoke__">render</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">opt</span> = <span class="title function_ invoke__">getch</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">match</span> opt &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(opt) =&gt; <span class="keyword">match</span> opt &#123;</span><br><span class="line">        <span class="string">b&#x27;q&#x27;</span> =&gt; <span class="keyword">break</span>,</span><br><span class="line">        <span class="string">b&#x27;w&#x27;</span> =&gt; <span class="keyword">if</span> <span class="keyword">self</span>.current_pos &gt;= <span class="number">3</span> &#123; <span class="keyword">self</span>.current_pos -= <span class="number">3</span> &#125;,</span><br><span class="line">        <span class="string">b&#x27;s&#x27;</span> =&gt; <span class="keyword">if</span> <span class="keyword">self</span>.current_pos &lt; <span class="number">6</span> &#123; <span class="keyword">self</span>.current_pos += <span class="number">3</span> &#125;,</span><br><span class="line">        <span class="string">b&#x27;a&#x27;</span> =&gt; <span class="keyword">if</span> <span class="keyword">self</span>.current_pos % <span class="number">3</span> &gt; <span class="number">0</span> &#123; <span class="keyword">self</span>.current_pos -= <span class="number">1</span> &#125;,</span><br><span class="line">        <span class="string">b&#x27;d&#x27;</span> =&gt; <span class="keyword">if</span> <span class="keyword">self</span>.current_pos % <span class="number">3</span> &lt; <span class="number">2</span> &#123; <span class="keyword">self</span>.current_pos += <span class="number">1</span> &#125;,</span><br><span class="line">        <span class="string">b&#x27; &#x27;</span> =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.board.cells[<span class="keyword">self</span>.current_pos].<span class="title function_ invoke__">is_none</span>() &#123;</span><br><span class="line">                <span class="keyword">self</span>.board.cells[<span class="keyword">self</span>.current_pos] = </span><br><span class="line">                <span class="title function_ invoke__">Some</span>(<span class="keyword">self</span>.players[<span class="keyword">self</span>.current_player].<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>().symbol);</span><br><span class="line">                <span class="keyword">self</span>.current_player ^= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">None</span> =&gt; &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// is win and is full</span></span><br></pre></td></tr></table></figure><h2 id="Register-players"><a href="#Register-players" class="headerlink" title="Register players"></a>Register players</h2><p>现在好像player还是默认的，我们得实现传参自定义玩家。我们为Game实现一个register_player来注册玩家，所以在注册前玩家是空（None），我们把Game的player字段改成 <code>[Option&lt;Player&gt;; 2]</code>，并在Game::new()初始化为None。</p><p>register_player应该接收一个player数组，并且把前2个复制给Game，这里为了能链式调用选择返回本身</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">register_player</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, players: &amp;[Player]) <span class="punctuation">-&gt;</span> &amp;<span class="keyword">mut</span> Game &#123;</span><br><span class="line">        <span class="keyword">self</span>.players = [</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(players[<span class="number">0</span>].<span class="title function_ invoke__">clone</span>()),</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(players[<span class="number">1</span>].<span class="title function_ invoke__">clone</span>())</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后你可以在像这样调用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    Game::<span class="title function_ invoke__">new</span>()</span><br><span class="line">    .<span class="title function_ invoke__">register_player</span>(&amp;<span class="built_in">vec!</span>[</span><br><span class="line">            Player::<span class="title function_ invoke__">new</span>(name: &amp;<span class="type">str</span>, symbol: <span class="type">char</span>),</span><br><span class="line">            Player &#123; name: <span class="string">&quot;B&quot;</span>.<span class="title function_ invoke__">to_string</span>(), symbol: <span class="string">&#x27;O&#x27;</span> &#125;,</span><br><span class="line">    ]).<span class="title function_ invoke__">run</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(name: &amp;<span class="type">str</span>, symbol: <span class="type">char</span>) <span class="punctuation">-&gt;</span> Player &#123;</span><br><span class="line">        Player &#123;</span><br><span class="line">            name: name.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">            symbol,<span class="comment">// 变量名和成员名相同可以省略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是比较麻烦，因为你每个都要new一下，有没有能够更加简化书写的方式呢？</p><p>当然有，你可以用宏来实现。</p><h3 id="编写一个简单的宏"><a href="#编写一个简单的宏" class="headerlink" title="编写一个简单的宏"></a>编写一个简单的宏</h3><p>Rust的宏非常强大，可以做很多事情，比如不定长参数等等，宏一般分为声明宏（也就是马上要讲的，和派生宏等），相信大家在前面已经见识到了派生宏的强大了，接下来看看如何定义一个宏。</p><p>我们定义一个register_player宏来帮我更方便的生成一个Player数组</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> register_player &#123;</span><br><span class="line">    ($($name:expr =&gt; $sym:expr),*) =&gt; &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// return the start two</span></span><br><span class="line">            <span class="built_in">vec!</span>[$(Player::<span class="title function_ invoke__">new</span>($name, $sym),)*][..<span class="number">2</span>].<span class="title function_ invoke__">to_vec</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后你可以这么调用，要注意宏后面可以跟（）, [], {}， 虽然都可以，但是一般会有一个约定的写法，比如println!是 ()， vec!是[]</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    Game::<span class="title function_ invoke__">new</span>()</span><br><span class="line">    .<span class="title function_ invoke__">register_player</span>(</span><br><span class="line">    &amp;register_player!&#123;</span><br><span class="line">                <span class="string">&quot;Player1&quot;</span> =&gt; <span class="string">&#x27;X&#x27;</span>，</span><br><span class="line">                <span class="string">&quot;Player2&quot;</span> =&gt; <span class="string">&#x27;O&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">    ).<span class="title function_ invoke__">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  宏的定义允许像match一样写多个模式，只不过宏匹配的是一段Rust源代码。</p><p>  register_player宏接受一系列的表达式，每个表达式由一个名字和一个符号组成，然后为每个表达式创建一个新的 <code>Player</code> 对象。</p><p>  宏的参数使用 <code>$(...),*</code> 的形式定义，这表示宏接受任意数量的参数，每个参数都应该匹配 <code>...</code> 中的模式，参数之间用逗号分隔。</p><p>  在宏的主体中，首先使用 <code>vec!</code> 宏创建一个 <code>Player</code> 对象的向量，每个 <code>Player</code> 对象都使用 <code>Player::new($name, $sym)</code> 创建。然后，使用 <code>[..2].to_vec()</code> 取向量的前两个元素并转换为新的向量。</p><p>  总的来说，这个宏的作用是接受一系列的名字和符号，为每个名字和符号创建一个 <code>Player</code> 对象，然后返回前两个 <code>Player</code> 对象的向量。</p></blockquote><h2 id="为不同平台分别实现"><a href="#为不同平台分别实现" class="headerlink" title="为不同平台分别实现"></a>为不同平台分别实现</h2><p>在上面我们实现了getch功能使用了C接口，而其中kbhit是在windows平台的函数（如果没有记错应该在windows.h里面），所以如果你尝试编译为其他平台的可执行文件，就会出问题，在这里问题很可能是编译时找不到kbhit这个符号。（可以自己编译看看错误）</p><p>那么如果能找到天然跨平台的实现就好了（显然使用纯rust不会有这种问题），但是这往往比较困难。所以我们可以考虑另一种方式，也就是为不同的平台分别实现相应的方法即可！</p><p>假定只要编译到windows和linux，我们来改写一下上面实现的getch</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[cfg(target_os = <span class="string">&quot;windows&quot;</span>)]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">_getch</span>() <span class="punctuation">-&gt;</span> <span class="type">u8</span>;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">_kbhit</span>() <span class="punctuation">-&gt;</span> <span class="type">bool</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过cfg来设置一个（块）语句的某些属性，这里是指定这段代码只在windows平台有效，只有编译成windows平台的可执行文件才会编译这部分。</p><p>同样我们也给getch标上（这里改了个名字，因为感觉key会更合适一点）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[cfg(target_os = <span class="string">&quot;windows&quot;</span>)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">getkey</span>(on_blocking: <span class="type">bool</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">u8</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> on_blocking || <span class="keyword">unsafe</span> &#123; _kbhit() &#125; &#123;</span><br><span class="line">        <span class="keyword">unsafe</span> &#123; <span class="title function_ invoke__">Some</span>(_getch()) &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来要写linux部分的实现了，linux里并没有（大概？）直接提供类似kbhit的函数，但是我们可以在读一个字节后返回。</p><p>我们得先导入libc库 <code>cargo add libc</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[cfg(target_os = <span class="string">&quot;linux&quot;</span>)]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> libc;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(target_os = <span class="string">&quot;linux&quot;</span>)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">getkey</span>(on_blocking: <span class="type">bool</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">u8</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// 建议直接在函数内部use就可以了，毕竟如果不是linux平台也用不到</span></span><br><span class="line">    <span class="keyword">use</span> libc::&#123;termios, ECHO, ICANON, TCSANOW, VMIN, VTIME&#125;;</span><br><span class="line">    <span class="keyword">use</span> std::io::&#123;stdin, Read&#125;;</span><br><span class="line">    <span class="keyword">use</span> std::mem::zeroed;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">termios</span> = <span class="keyword">unsafe</span> &#123; zeroed::&lt;termios&gt;() &#125;;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123; libc::<span class="title function_ invoke__">tcgetattr</span>(<span class="number">0</span>, &amp;<span class="keyword">mut</span> termios) &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">old</span> = termios;</span><br><span class="line">    termios.c_lflag &amp;= !(ICANON | ECHO);</span><br><span class="line">    termios.c_cc[VMIN] = <span class="keyword">if</span> on_blocking &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    termios.c_cc[VTIME] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123; libc::<span class="title function_ invoke__">tcsetattr</span>(<span class="number">0</span>, TCSANOW, &amp;termios) &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = [<span class="number">0_u8</span>; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = <span class="keyword">if</span> <span class="title function_ invoke__">stdin</span>().<span class="title function_ invoke__">read</span>(&amp;<span class="keyword">mut</span> buf).<span class="title function_ invoke__">is_ok</span>() &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(buf[<span class="number">0</span>])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123; libc::<span class="title function_ invoke__">tcsetattr</span>(<span class="number">0</span>, TCSANOW, &amp;old) &#125;;</span><br><span class="line">    res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  首先，这段代码使用了条件编译（<code>#[cfg(target_os = &quot;linux&quot;)]</code>），这意味着这段代码只有在目标操作系统为 Linux 时才会编译和运行。</p><p>  然后，函数 <code>getkey</code> 接受一个布尔参数 <code>on_blocking</code>，用于指定是否在等待用户输入时阻塞。</p><p>  在函数内部，首先使用 <code>libc</code> 库的 <code>termios</code> 结构体来获取和设置终端的 I&#x2F;O 属性。<code>termios</code> 结构体中的 <code>c_lflag</code> 字段用于控制输入模式，<code>ICANON</code> 和 <code>ECHO</code> 是两个标志位，分别用于控制规范模式（即行缓冲）和回显。通过将这两个标志位清零，函数设置终端为非规范模式和非回显模式，这样就可以立即读取用户的每一个键入，而不需要等待回车键。</p><p>  <code>termios</code> 结构体中的 <code>c_cc</code> 字段是一个数组，用于控制特殊字符的行为。<code>VMIN</code> 和 <code>VTIME</code> 是数组中的两个索引，分别用于控制在非规范模式下的最小读取字符数和超时时间。通过设置 <code>VMIN</code> 为 <code>on_blocking</code> 参数（如果 <code>on_blocking</code> 为 <code>true</code>，则 <code>VMIN</code> 为 1，否则为 0），函数可以在没有输入时立即返回，而不是等待用户输入。<code>VTIME</code> 被设置为 0，表示不使用超时。</p><p>  然后，函数使用 <code>stdin().read(&amp;mut buf)</code> 从标准输入读取一个字符到 <code>buf</code> 中。如果读取成功，函数返回读取到的字符，否则返回 <code>None</code>。</p><p>  最后，函数使用 <code>libc::tcsetattr(0, TCSANOW, &amp;old)</code> 恢复终端的原始 I&#x2F;O 属性。</p></blockquote><p>当然到这里其实也可以了，但是读者肯定不会买账的，因为每次调用还必须指定bool，我就不能像其他语言一样整个默认参数吗。</p><p>由于rust的函数是不支持默认参数的，但是我们可以用宏来实现类似的功能。</p><p>前面有提过宏可以像match一样匹配模式，我们这里不妨就设置2种模式，对应阻塞和非阻塞。我们简单把我们的函数包装一下。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> getkey &#123;</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">        <span class="title function_ invoke__">getkey</span>(<span class="literal">false</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    (block) =&gt; &#123;</span><br><span class="line">        <span class="title function_ invoke__">getkey</span>(<span class="literal">true</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样如果你使用比如 <code>getkey!()</code>， 就会不阻塞。如果使用<code>getkey!(block)</code>，就会阻塞等待用户输入了。这里面的block并不是一个变量，只是一个模式。所以你无须定义block为一个具体的东西，你当然可以写成其他的：D</p><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><h3 id="编写简单测试"><a href="#编写简单测试" class="headerlink" title="编写简单测试"></a>编写简单测试</h3><p>有时候你想测试某个或着说一部分功能，直接编译整个项目再测试是非常低效的做法。这种情况非常建议你写test模块。</p><p>假定我们要测试我们写的register_player宏是否能按照我们想的那样运作，可以像这样写个测试函数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> test &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">player_reg</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">players</span> = register_player!(</span><br><span class="line">            <span class="string">&quot;Player 1&quot;</span> =&gt; <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;Player 2&quot;</span> =&gt; <span class="string">&#x27;O&#x27;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">/* dbg!(players);</span></span><br><span class="line"><span class="comment">        assert!(false); */</span></span><br><span class="line">        <span class="built_in">assert_eq!</span>(</span><br><span class="line">            players,</span><br><span class="line">            <span class="built_in">vec!</span>[Player::<span class="title function_ invoke__">new</span>(<span class="string">&quot;Player 1&quot;</span>, <span class="string">&#x27;X&#x27;</span>), Player::<span class="title function_ invoke__">new</span>(<span class="string">&quot;Player 2&quot;</span>, <span class="string">&#x27;O&#x27;</span>)]</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在你的终端运行 <code>cargo test</code></p><p>如果正常就只能看到ok，出错就会看到你的输出和错误信息。一般如果我们确定大概会有个什么输出，我们就用assert系列的宏，这很好理解。当我们想要比较的内容太多，你懒得输入，你可以主动报错<del>骗它输出</del>， 比如本人就喜欢 <code>assert!(false);</code>， 然后前面记得输出一下，然后你就可以看到回显了：D</p><blockquote><p>  测试函数可以有很多个，会挨个跑一遍</p><p>  super关键字代表当前模块（这里指test）的父模块，所以 <code>use super::*;</code>就是导入父模块的所有项。如果你的register_player等都定义在main.rs中，那么你应该把这段<code>mod test&#123; &#125;</code>放在main.rs中的某个位置（这保证了main是test的父模块）。</p></blockquote><h3 id="优化你的文件结构（todo）"><a href="#优化你的文件结构（todo）" class="headerlink" title="优化你的文件结构（todo）"></a>优化你的文件结构（todo）</h3>]]></content:encoded>
      
      
      <category domain="http://hacbit.tech/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      
      <category domain="http://hacbit.tech/tags/Rust/">Rust</category>
      
      <category domain="http://hacbit.tech/tags/Tutorial/">Tutorial</category>
      
      
      <comments>http://hacbit.tech/Rust-QuickStart/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
